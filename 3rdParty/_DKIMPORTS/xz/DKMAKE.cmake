# https://github.com/xz-mirror/xz
#
# https://tukaani.org/xz/xz-5.2.5.tar.gz
# https://github.com/xz-mirror/xz/archive/refs/tags/v5.2.5.zip

### DEPENDS ###
DKDEPEND(mingw32)
DKDEPEND(mingw64)
DKDEPEND(msys)


### VERSION ###
DKSET(XZ_VERSION 5.2.5)
DKSET(XZ_NAME xz-${XZ_VERSION})
#DKSET(XZ_DL https://github.com/xz-mirror/xz/archive/refs/tags/v${XZ_VERSION}.zip)
DKSET(XZ_DL https://tukaani.org/xz/${XZ_NAME}.tar.gz)
DKSET(XZ ${3RDPARTY}/${XZ_NAME})



### INSTALL ###
DKINSTALL(${XZ_DL} xz ${XZ})



### DKPLUGINS LINK ###
DKDEFINE(LZMA_API_STATIC)
DKINCLUDE(${XZ}/src/liblzma/api)
WIN_DEBUG_LIB(${XZ}/${OS}/${DEBUG_DIR}/src/liblzma/.libs/liblzma.a)
WIN_RELEASE_LIB(${XZ}/${OS}/${RELEASE_DIR}/src/liblzma/.libs/liblzma.a)
MAC_DEBUG_LIB(${XZ}/${OS}/${DEBUG_DIR}/src/liblzma/.libs/liblzma.a)
MAC_RELEASE_LIB(${XZ}/${OS}/${RELEASE_DIR}/src/liblzma/.libs/liblzma.a)
IOS_DEBUG_LIB(${XZ}/${OS}/${DEBUG_DIR}/src/liblzma/.libs/liblzma.a)
IOS_RELEASE_LIB(${XZ}/${OS}/${RELEASE_DIR}/src/liblzma/.libs/liblzma.a)
IOSSIM_DEBUG_LIB(${XZ}/${OS}/${DEBUG_DIR}/src/liblzma/.libs/liblzma.a)
IOSSIM_RELEASE_LIB(${XZ}/${OS}/${RELEASE_DIR}/src/liblzma/.libs/liblzma.a)
LINUX_DEBUG_LIB(${XZ}/${OS}/${DEBUG_DIR}/src/liblzma/.libs/liblzma.a)
LINUX_RELEASE_LIB(${XZ}/${OS}/${RELEASE_DIR}/src/liblzma/.libs/liblzma.a)
RASPBERRY_DEBUG_LIB(${XZ}/${OS}/${DEBUG_DIR}/src/liblzma/.libs/liblzma.a)
RASPBERRY_RELEASE_LIB(${XZ}/${OS}/${RELEASE_DIR}/src/liblzma/.libs/liblzma.a)
ANDROID_DEBUG_LIB(${XZ}/${OS}/obj/local/armeabi-v7a/liblzma.a)
ANDROID_RELEASE_LIB(${XZ}/${OS}/obj/local/armeabi-v7a/liblzma.a)



### 3RDPARTY LINK ###
DKSET(XZ_WIN -DCMAKE_C_FLAGS=/DLZMA_API_STATIC -DCMAKE_CXX_FLAGS=/DLZMA_API_STATIC -DLIBLZMA_INCLUDE_DIR=${XZ}/src/liblzma/api -DLIBLZMA_LIBRARY_DEBUG=${XZ}/${OS}/${DEBUG_DIR}/src/liblzma/.libs/liblzma.a -DLIBLZMA_LIBRARY_RELEASE=${XZ}/${OS}/${RELEASE_DIR}/src/liblzma/.libs/liblzma.a)
DKSET(XZ_APPLE -DCMAKE_C_FLAGS=-DLZMA_API_STATIC -DCMAKE_CXX_FLAGS=-DLZMA_API_STATIC -DLIBLZMA_INCLUDE_DIR=${XZ}/src/liblzma/api -DLIBLZMA_LIBRARY_DEBUG=${XZ}/${OS}/${DEBUG_DIR}/src/liblzma/.libs/liblzma.a -DLIBLZMA_LIBRARY_RELEASE=${XZ}/${OS}/${RELEASE_DIR}/src/liblzma/.libs/liblzma.a)
DKSET(XZ_LINUX -DCMAKE_C_FLAGS=-DLZMA_API_STATIC -DCMAKE_CXX_FLAGS=-DLZMA_API_STATIC -DLIBLZMA_INCLUDE_DIR=${XZ}/src/liblzma/api -DLIBLZMA_LIBRARY_DEBUG=${XZ}/${OS}/${DEBUG_DIR}/src/liblzma/.libs/liblzma.a -DLIBLZMA_LIBRARY_RELEASE=${XZ}/${OS}/${RELEASE_DIR}/src/liblzma/.libs/liblzma.a)
DKSET(XZ_RASPBERRY -DCMAKE_C_FLAGS=-DLZMA_API_STATIC -DCMAKE_CXX_FLAGS=-DLZMA_API_STATIC -DLIBLZMA_INCLUDE_DIR=${XZ}/src/liblzma/api -DLIBLZMA_LIBRARY_DEBUG=${XZ}/${OS}/${DEBUG_DIR}/src/liblzma/.libs/liblzma.a -DLIBLZMA_LIBRARY_RELEASE=${XZ}/${OS}/${RELEASE_DIR}/src/liblzma/.libs/liblzma.a)
DKSET(XZ_ANDROID -DCMAKE_C_FLAGS=-DLZMA_API_STATIC -DCMAKE_CXX_FLAGS=-DLZMA_API_STATIC -DLIBLZMA_INCLUDE_DIR=${XZ}/src/liblzma/api -DLIBLZMA_LIBRARY_DEBUG=${XZ}/${OS}/obj/local/armeabi-v7a/liblzma.a -DLIBLZMA_LIBRARY_RELEASE=${XZ}/${OS}/obj/local/armeabi-v7a/liblzma.a)


### COMPILE ###
WIN32_DEBUG_PATH(${XZ}/${OS}/${DEBUG_DIR})
WIN32_DEBUG_MSYS(${DKCONFIGURE_WIN32})
WIN32_DEBUG_MSYS(make)
WIN32_RELEASE_PATH(${XZ}/${OS}/${RELEASE_DIR})
WIN32_RELEASE_MSYS(${DKCONFIGURE_WIN32})
WIN32_RELEASE_MSYS(make)


# look at xz/windows/build.bash for details
WIN64_DEBUG_PATH(${XZ}/${OS}/${DEBUG_DIR})
WIN64_DEBUG_MSYS(${DKCONFIGURE_WIN64} --prefix= --enable-silent-rules --disable-dependency-tracking --disable-nls --disable-scripts)
WIN64_DEBUG_MSYS(make)
WIN64_RELEASE_PATH(${XZ}/${OS}/${RELEASE_DIR})
WIN64_DEBUG_MSYS(${DKCONFIGURE_WIN64}  --prefix= --enable-silent-rules --disable-dependency-tracking --disable-nls --disable-scripts)
WIN64_RELEASE_MSYS(make)


MAC_DEBUG_PATH(${XZ}/${OS}/${DEBUG_DIR})
MAC_DEBUG_COMMAND(${DKCONFIGURE_MAC64})
MAC_DEBUG_COMMAND(make)
MAC_RELEASE_PATH(${XZ}/${OS}/${RELEASE_DIR})
MAC_RELEASE_COMMAND(${DKCONFIGURE_MAC64})
MAC_RELEASE_COMMAND(make)


IOS_DEBUG_PATH(${XZ}/${OS}/${DEBUG_DIR})
IOS_DEBUG_COMMAND(${DKCONFIGURE_IOS64})
IOS_DEBUG_COMMAND(make)
IOS_RELEASE_PATH(${XZ}/${OS}/${RELEASE_DIR})
IOS_RELEASE_COMMAND(${DKCONFIGURE_IOS64})
IOS_RELEASE_COMMAND(make)


IOSSIM_DEBUG_PATH(${XZ}/${OS}/${DEBUG_DIR})
IOSSIM_DEBUG_COMMAND(${DKCONFIGURE_IOSSIM64})
IOSSIM_DEBUG_COMMAND(make)
IOSSIM_RELEASE_PATH(${XZ}/${OS}/${RELEASE_DIR})
IOSSIM_RELEASE_COMMAND(${DKCONFIGURE_IOSSIM64})
IOSSIM_RELEASE_COMMAND(make)


LINUX_DEBUG_PATH(${XZ}/${OS}/${DEBUG_DIR})
LINUX_DEBUG_COMMAND(${DKCONFIGURE_LINUX})
LINUX_DEBUG_COMMAND(make)
LINUX_RELEASE_PATH(${XZ}/${OS}/${RELEASE_DIR})
LINUX_RELEASE_COMMAND(${DKCONFIGURE_LINUX})
LINUX_RELEASE_COMMAND(make)


RASPBERRY_DEBUG_PATH(${XZ}/${OS}/${DEBUG_DIR})
RASPBERRY_DEBUG_COMMAND(${DKCONFIGURE_RASPBERRY})
RASPBERRY_DEBUG_COMMAND(make)
RASPBERRY_RELEASE_PATH(${XZ}/${OS}/${RELEASE_DIR})
RASPBERRY_RELEASE_COMMAND(${DKCONFIGURE_RASPBERRY})
RASPBERRY_RELEASE_COMMAND(make)


ANDROID_NDK(${XZ_NAME})
#ANDROID_DEBUG_MSYS(${DKCONFIGURE_ANDROID})
#ANDROID_DEBUG_MSYS(make)
#ANDROID_RELEASE_MSYS(${DKCONFIGURE_ANDROID})
#ANDROID_RELEASE_MSYS(make)
#ANDROID_PATH(${XZ}/${OS})
#ANDROID32_COMMAND(${DKCMAKE_BUILD} ${XZ})
#ANDROID64_COMMAND(${DKCMAKE_BUILD} ${XZ})
#ANDROID_VS(${XZ_NAME} xz.sln liblzma)
