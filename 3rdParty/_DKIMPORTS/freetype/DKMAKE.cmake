## https://www.freetype.org/

### VERSION ###
DKSET(FREETYPE_MAJOR_VERSION 2)
DKSET(FREETYPE_MINOR_VERSION 5)
DKSET(FREETYPE_BUILD_VERSION 5)
DKSET(FREETYPE_VERSION ${FREETYPE_MAJOR_VERSION}.${FREETYPE_MINOR_VERSION}.${FREETYPE_BUILD_VERSION})
DKSET(FREETYPE ${3RDPARTY}/freetype-${FREETYPE_VERSION})



### INSTALL ###
## https://sourceforge.net/projects/freetype/files/freetype2/2.5.5/freetype-2.5.5.tar.gz
DKINSTALL(https://sourceforge.net/projects/freetype/files/freetype2/${FREETYPE_MAJOR_VERSION}.${FREETYPE_MINOR_VERSION}.${FREETYPE_BUILD_VERSION}/freetype-${FREETYPE_VERSION}.tar.gz freetype freetype-${FREETYPE_VERSION})



### DKPLUGINS LINK ###
DKINCLUDE(${FREETYPE}/include)
DKINCLUDE(${FREETYPE}/${OS}/include/freetype2)
WIN_DEBUG_LIB(${FREETYPE}/${OS}/${DEBUG_DIR}/freetype.lib)
WIN_RELEASE_LIB(${FREETYPE}/${OS}/${RELEASE_DIR}/freetype.lib)
MAC_DEBUG_LIB(${FREETYPE}/${OS}/${DEBUG_DIR}/libfreetype.a)
MAC_RELEASE_LIB(${FREETYPE}/${OS}/${RELEASE_DIR}/libfreetype.a)
IOSSIM_DEBUG_LIB(${FREETYPE}/${OS}/${DEBUG_DIR}/libfreetype.a)
IOSSIM_RELEASE_LIB(${FREETYPE}/${OS}/${RELEASE_DIR}/libfreetype.a)
LINUX_DEBUG_LIB(${FREETYPE}/${OS}/${DEBUG_DIR}/libfreetype.a)
LINUX_RELEASE_LIB(${FREETYPE}/${OS}/${RELEASE_DIR}/libfreetype.a)
RASPBERRY_DEBUG_LIB(${FREETYPE}/${OS}/${DEBUG_DIR}/libfreetype.a)
RASPBERRY_RELEASE_LIB(${FREETYPE}/${OS}/${RELEASE_DIR}/libfreetype.a)
##ANDROID_DEBUG_LIB(${FREETYPE}/${OS}/${DEBUG_DIR}/obj/local/armeabi-v7a/libft2.a)
##ANDROID_RELEASE_LIB(${FREETYPE}/${OS}/${RELEASE_DIR}/obj/local/armeabi-v7a/libft2.a)
ANDROID_DEBUG_LIB(${FREETYPE}/${OS}/${DEBUG_DIR}/libfreetype.a)
ANDROID_RELEASE_LIB(${FREETYPE}/${OS}/${RELEASE_DIR}/libfreetype.a)



### 3RDPARTY LINK ###
DKSET(FREETYPE_WIN -DFREETYPE_INCLUDE_DIRS=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_freetype2=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_ft2build=${FREETYPE}/include -DFREETYPE_LIBRARY_DEBUG=${FREETYPE}/${OS}/${DEBUG_DIR}/freetype.lib -DFREETYPE_LIBRARY_RELEASE=${FREETYPE}/${OS}/${RELEASE_DIR}/freetype.lib)
DKSET(FREETYPE_APPLE -DFREETYPE_INCLUDE_DIRS=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_freetype2=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_ft2build=${FREETYPE}/include -DFREETYPE_LIBRARY_DEBUG=${FREETYPE}/${OS}/${DEBUG_DIR}/libfreetype.a -DFREETYPE_LIBRARY_RELEASE=${FREETYPE}/${OS}/${RELEASE_DIR}/libfreetype.a)
DKSET(FREETYPE_LINUX -DFREETYPE_INCLUDE_DIRS=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_freetype2=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_ft2build=${FREETYPE}/include -DFREETYPE_LIBRARY_DEBUG=${FREETYPE}/${OS}/${DEBUG_DIR}/libfreetype.a -DFREETYPE_LIBRARY_RELEASE=${FREETYPE}/${OS}/${RELEASE_DIR}/libfreetype.a)
DKSET(FREETYPE_RASPBERRY -DFREETYPE_INCLUDE_DIRS=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_freetype2=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_ft2build=${FREETYPE}/include -DFREETYPE_LIBRARY_DEBUG=${FREETYPE}/${OS}/${DEBUG_DIR}/libfreetype.a -DFREETYPE_LIBRARY_RELEASE=${FREETYPE}/${OS}/${RELEASE_DIR}/libfreetype.a)
DKSET(FREETYPE_ANDROID -DFREETYPE_INCLUDE_DIRS=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_freetype2=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_ft2build=${FREETYPE}/include -DFREETYPE_LIBRARY_DEBUG=${FREETYPE}/${OS}/${DEBUG_DIR}/libfreetype.a -DFREETYPE_LIBRARY_RELEASE=${FREETYPE}/${OS}/${RELEASE_DIR}/libfreetype.a)
	
	
	
### COMPILE ###
WIN_PATH(${FREETYPE}/${OS})
WIN32_COMMAND(${DKCMAKE_WIN32} ${FREETYPE})
WIN64_COMMAND(${DKCMAKE_WIN64} ${FREETYPE})
WIN_VS(freetype-${FREETYPE_VERSION} freetype.sln freetype)


MAC_PATH(${FREETYPE}/${OS})
MAC64_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_OSX_ARCHITECTURES=x86_64 ${FREETYPE})
MAC_XCODE_DEBUG(freetype-${FREETYPE_VERSION} freetype)
MAC_XCODE_RELEASE(freetype-${FREETYPE_VERSION} freetype)


IOS_PATH(${FREETYPE}/${OS})
IOS_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=OS ${FREETYPE})
IOS_XCODE_DEBUG(freetype-${FREETYPE_VERSION} freetype)
IOS_XCODE_RELEASE(freetype-${FREETYPE_VERSION} freetype)


IOSSIM_PATH(${FREETYPE}/${OS})
IOSSIM64_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=SIMULATOR64 ${FREETYPE})
IOSSIM_XCODE_DEBUG(freetype-${FREETYPE_VERSION} freetype)
IOSSIM_XCODE_RELEASE(freetype-${FREETYPE_VERSION} freetype)
## DKSETPATH(${FREETYPE}/${OS}/${DEBUG_DIR})
## IOSSIM_DEBUG_COMMAND(../../configure --enable-static=yes --enable-shared=no --without-bzip2 "CFLAGS=-arch x86_64")
## IOSSIM_DEBUG_COMMAND(make)
## DKSETPATH(${FREETYPE}/${OS}/${RELEASE_DIR})
## IOSSIM_RELEASE_COMMAND(../../configure --enable-static=yes --enable-shared=no --without-bzip2 "CFLAGS=-arch x86_64")
## IOSSIM_RELEASE_COMMAND(make)


LINUX_DEBUG_PATH(${FREETYPE}/${OS}/${DEBUG_DIR})
LINUX_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG ${FREETYPE})
LINUX_DEBUG_COMMAND(make freetype)

LINUX_RELEASE_PATH(${FREETYPE}/${OS}/${RELEASE_DIR})
LINUX_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE ${FREETYPE})
LINUX_RELEASE_COMMAND(make freetype)


RASPBERRY_DEBUG_PATH(${FREETYPE}/${OS}/${DEBUG_DIR})
RASPBERRY_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG ${FREETYPE})
RASPBERRY_DEBUG_COMMAND(make freetype)

RASPBERRY_RELEASE_PATH(${FREETYPE}/${OS}/${RELEASE_DIR})
RASPBERRY_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE ${FREETYPE})
RASPBERRY_RELEASE_COMMAND(make freetype)


##ANDROID_NDK_DEBUG(freetype-${FREETYPE_VERSION})
##ANDROID_NDK_RELEASE(freetype-${FREETYPE_VERSION})
ANDROID_PATH(${FREETYPE}/${OS})
ANDROID32_COMMAND(${DKCMAKE_ANDROID32} ${FREETYPE})
ANDROID64_COMMAND(${DKCMAKE_ANDROID64} ${FREETYPE})
ANDROID_VS(freetype-${FREETYPE_VERSION} freetype.sln freetype)