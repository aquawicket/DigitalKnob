### INSTALL ###
DKINSTALL(http://digitalknob.com/Download/Libs/opencv-3.4.1.zip opencv-3.4.1)
DKSET(OPENCV ${3RDPARTY}/opencv-3.4.1)


### LINK ###
DKINCLUDE(${OPENCV})
WIN32_INCLUDE(${OPENCV}/${OS})
WIN64_INCLUDE(${OPENCV}/${OS})
WIN_DEBUG_LIB(${OPENCV}/${OS}/${DEBUG}/opencvd.lib)
WIN_RELEASE_LIB(${OPENCV}/${OS}/${RELEASE}/opencv.lib)
APPLE_DEBUG_LIB(${OPENCV}/${OS}/${DEBUG}/libopencv.a)
APPLE_RELEASE_LIB(${OPENCV}/${OS}/${RELEASE}/libopencv.a)
LINUX_DEBUG_LIB(${OPENCV}/${OS}/${DEBUG}/libopencv.a)
LINUX_RELEASE_LIB(${OPENCV}/${OS}/${RELEASE}/libopencv.a)
ANDROID_DEBUG_LIB(${OPENCV}/${OS}/${DEBUG}/obj/local/armeabi-v7a/libopencv.a)
ANDROID_RELEASE_LIB(${OPENCV}/${OS}/${RELEASE}/obj/local/armeabi-v7a/libopencv.a)


### COMPILE ###
DKSETPATH(${OPENCV}/${OS})
WIN32_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} "-DCMAKE_C_FLAGS=/DTEST /DWIN32 /D_WINDOWS /W3 /nologo" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" ${OPENCV})
WIN32_VS_DEBUG(opencv-3.4.1 OpenCV.sln opencv_core)
WIN32_VS_RELEASE(opencv-3.4.1 OpenCV.sln opencv_core)

DKSETPATH(${OPENCV}/${OS})
WIN64_COMMAND(${CMAKE_COMMAND} -G ${X64GENERATOR} "-DCMAKE_C_FLAGS=/DWIN32 /D_WINDOWS /W3 /nologo" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" ${OPENCV})
WIN64_VS_DEBUG(opencv-3.4.1 OpenCV.sln opencv_core)
WIN64_VS_RELEASE(opencv-3.4.1 OpenCV.sln opencv_core)

DKSETPATH(${OPENCV}/${OS})
MAC64_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_OSX_ARCHITECTURES=x86_64 ${OPENCV})
MAC64_XCODE_DEBUG(opencv-3.4.1 opencv_core)
MAC64_XCODE_RELEASE(opencv-3.4.1 opencv_core)

DKSETPATH(${OPENCV}/${OS})
IOS_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=OS ${OPENCV})
IOS_XCODE_DEBUG(opencv-3.4.1 opencv_core)
IOS_XCODE_RELEASE(opencv-3.4.1 opencv_core)

DKSETPATH(${OPENCV}/${OS})
IOSSIM_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=SIMULATOR64 ${OPENCV})
IOSSIM_XCODE_DEBUG(opencv-3.4.1 opencv_core)
IOSSIM_XCODE_RELEASE(opencv-3.4.1 opencv_core)

DKSETPATH(${OPENCV}/${OS}/${DEBUG})
LINUX32_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG -DCMAKE_C_FLAGS=-fPIC -m32 ${OPENCV})
LINUX32_DEBUG_COMMAND(make opencv_core)

DKSETPATH(${OPENCV}/${OS}/${RELEASE})
LINUX32_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_FLAGS=-fPIC -m32 ${OPENCV})
LINUX32_RELEASE_COMMAND(make opencv_core)

DKSETPATH(${OPENCV}/${OS}/${DEBUG})
LINUX64_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG -DCMAKE_C_FLAGS=-fPIC ${OPENCV})
LINUX64_DEBUG_COMMAND(make opencv_core)

DKSETPATH(${OPENCV}/${OS}/${RELEASE})
LINUX64_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_FLAGS=-fPIC ${OPENCV})
LINUX64_RELEASE_COMMAND(make opencv_core)

ANDROID_NDK_DEBUG(opencv-3.4.1)
ANDROID_NDK_RELEASE(opencv-3.4.1)