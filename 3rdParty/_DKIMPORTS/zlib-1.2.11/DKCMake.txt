IF(ANDROID)
	RETURN()
ENDIF()

### INSTALL ###
DKINSTALL(https://www.zlib.net/zlib-1.2.11.tar.gz zlib-1.2.11)
## DKINSTALL(${DKWEB}/Download/zlib1211.zip zlib-1.2.11)
DKSET(ZLIB ${3RDPARTY}/zlib-1.2.11)


### LINK ###
DKINCLUDE(${ZLIB})
DKINCLUDE(${ZLIB}/${OS})
## WIN32_INCLUDE(${ZLIB}/${OS})
## WIN64_INCLUDE(${ZLIB}/${OS})
WIN_DEBUG_LIB(${ZLIB}/${OS}/${DEBUG}/zlibstaticd.lib)
WIN_RELEASE_LIB(${ZLIB}/${OS}/${RELEASE}/zlibstatic.lib)
APPLE_DEBUG_LIB(${ZLIB}/${OS}/${DEBUG}/libz.a)
APPLE_RELEASE_LIB(${ZLIB}/${OS}/${RELEASE}/libz.a)
LINUX_DEBUG_LIB(${ZLIB}/${OS}/${DEBUG}/libz.a)
LINUX_RELEASE_LIB(${ZLIB}/${OS}/${RELEASE}/libz.a)
ANDROID_DEBUG_LIB(${ZLIB}/${OS}/${DEBUG}/obj/local/armeabi-v7a/libzlib.a)
ANDROID_RELEASE_LIB(${ZLIB}/${OS}/${RELEASE}/obj/local/armeabi-v7a/libzlib.a)
RASPBERRY_DEBUG_LIB(${ZLIB}/${OS}/${DEBUG}/libz.a)
RASPBERRY_RELEASE_LIB(${ZLIB}/${OS}/${RELEASE}/libz.a)


### COMPILE ###
DKSETPATH(${ZLIB}/${OS})
WIN32_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A Win32 "-DCMAKE_C_FLAGS=/DTEST /DWIN32 /D_WINDOWS /W3 /nologo" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" ${ZLIB})
WIN32_VS_DEBUG(zlib-1.2.11 zlib.sln zlibstatic)
WIN32_VS_RELEASE(zlib-1.2.11 zlib.sln zlibstatic)

DKSETPATH(${ZLIB}/${OS})
WIN64_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A x64 "-DCMAKE_C_FLAGS=/DWIN32 /D_WINDOWS /W3 /nologo" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" ${ZLIB})
WIN64_VS_DEBUG(zlib-1.2.11 zlib.sln zlibstatic)
WIN64_VS_RELEASE(zlib-1.2.11 zlib.sln zlibstatic)

DKSETPATH(${ZLIB}/${OS})
MAC64_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_OSX_ARCHITECTURES=x86_64 ${ZLIB})
MAC64_XCODE_DEBUG(zlib-1.2.11 zlibstatic)
MAC64_XCODE_RELEASE(zlib-1.2.11 zlibstatic)

DKSETPATH(${ZLIB}/${OS})
IOS_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=OS ${ZLIB})
IOS_XCODE_DEBUG(zlib-1.2.11 zlibstatic)
IOS_XCODE_RELEASE(zlib-1.2.11 zlibstatic)

DKSETPATH(${ZLIB}/${OS})
IOSSIM_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=SIMULATOR64 ${ZLIB})
IOSSIM_XCODE_DEBUG(zlib-1.2.11 zlibstatic)
IOSSIM_XCODE_RELEASE(zlib-1.2.11 zlibstatic)

DKSETPATH(${ZLIB}/${OS}/${DEBUG})
LINUX32_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG -DCMAKE_C_FLAGS=-fPIC -m32 ${ZLIB})
LINUX32_DEBUG_COMMAND(make zlibstatic)

DKSETPATH(${ZLIB}/${OS}/${RELEASE})
LINUX32_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_FLAGS=-fPIC -m32 ${ZLIB})
LINUX32_RELEASE_COMMAND(make zlibstatic)

DKSETPATH(${ZLIB}/${OS}/${DEBUG})
LINUX64_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG -DCMAKE_C_FLAGS=-fPIC ${ZLIB})
LINUX64_DEBUG_COMMAND(make zlibstatic)

DKSETPATH(${ZLIB}/${OS}/${RELEASE})
LINUX64_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_FLAGS=-fPIC ${ZLIB})
LINUX64_RELEASE_COMMAND(make zlibstatic)

ANDROID_NDK_DEBUG(zlib-1.2.11)
ANDROID_NDK_RELEASE(zlib-1.2.11)

DKSETPATH(${ZLIB}/${OS}/${DEBUG})
RASPBERRY32_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG -DCMAKE_C_FLAGS=-fPIC -m32 ${ZLIB})
RASPBERRY32_DEBUG_COMMAND(make zlibstatic)

DKSETPATH(${ZLIB}/${OS}/${RELEASE})
RASPBERRY32_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_FLAGS=-fPIC -m32 ${ZLIB})
RASPBERRY32_RELEASE_COMMAND(make zlibstatic)

DKSETPATH(${ZLIB}/${OS}/${DEBUG})
RASPBERRY64_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG -DCMAKE_C_FLAGS=-fPIC ${ZLIB})
RASPBERRY64_DEBUG_COMMAND(make zlibstatic)

DKSETPATH(${ZLIB}/${OS}/${RELEASE})
RASPBERRY64_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_FLAGS=-fPIC ${ZLIB})
RASPBERRY64_RELEASE_COMMAND(make zlibstatic)