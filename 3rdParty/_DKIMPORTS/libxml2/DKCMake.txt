### DEPENDS ###
DKDEPEND(libiconv)


### VERSION ###
DKSET(XML2_VERSION libxml2-2.9.8)


### INSTALL ###
DKINSTALL(http://xmlsoft.org/sources/${XML2_VERSION}.tar.gz libxml2 ${XML2_VERSION})
DKSET(XML2 ${3RDPARTY}/${XML2_VERSION})


### LINK ###
DKINCLUDE(${XML2})
DKINCLUDE(${XML2}/include)
DKINCLUDE(${XML2}/${OS})
ANDROID_INCLUDE(${XML2}/${OS}/$(BUILD_TYPE)/jni)
WIN_DEBUG_LIB(${XML2}/${OS}/Debug/xml2.lib)
WIN_RELEASE_LIB(${XML2}/${OS}/Release/xml2.lib)
APPLE_DEBUG_LIB(${XML2}/${OS}/${DEBUG}/libxml2.a)
APPLE_RELEASE_LIB(${XML2}/${OS}/${RELEASE}/libxml2.a)
LINUX_DEBUG_LIB(${XML2}/${OS}/Debug/libxml2.a)
LINUX_RELEASE_LIB(${XML2}/${OS}/Release/libxml2.a)
ANDROID_DEBUG_LIB(${XML2}/${OS}/Debug/obj/local/armeabi-v7a/libxml2.a)
ANDROID_RELEASE_LIB(${XML2}/${OS}/Release/obj/local/armeabi-v7a/libxml2.a)


### COMPILE ###
DKSETPATH(${XML2}/${OS})
WIN32_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A Win32 "-DCMAKE_C_FLAGS=/DWIN32 /D_WINDOWS /W3 /nologo /I${ZLIB}/${OS}" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" -DICONV_DIR=${ICONV} -DICONV_LIBRARIES=${ICONV}/${OS}/Release -DICONV_INCLUDE_DIR=${ICONV}/include -DZLIB_INCLUDE_DIR=${ZLIB} -DZLIB_LIBRARY=${ZLIB}/${OS}/Release/zlibstatic.lib ${XML2})
WIN32_VS_DEBUG(${XML2_VERSION} xml2.sln xml2)
WIN32_VS_RELEASE(${XML2_VERSION} xml2.sln xml2)

DKSETPATH(${XML2}/${OS})
WIN64_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A x64 "-DCMAKE_C_FLAGS=/DWIN32 /DWIN64 /D_WINDOWS /W3 /nologo /I${ZLIB}/${OS}" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" -DICONV_DIR=${ICONV} -DICONV_LIBRARIES=${ICONV}/${OS}/Release -DICONV_INCLUDE_DIR=${ICONV}/include -DZLIB_INCLUDE_DIR=${ZLIB} -DZLIB_LIBRARY=${ZLIB}/${OS}/Release/zlibstatic.lib ${XML2})
WIN64_VS_DEBUG(${XML2_VERSION} xml2.sln xml2)
WIN64_VS_RELEASE(${XML2_VERSION} xml2.sln xml2)

DKSETPATH(${XML2}/${OS})
MAC_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_OSX_ARCHITECTURES=x86_64 ${XML2})
MAC_XCODE_DEBUG(${XML2_VERSION} xml2)
MAC_XCODE_RELEASE(${XML2_VERSION} xml2)

DKSETPATH(${XML2}/${OS})
IOS_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=OS ${XML2})
IOS_XCODE_DEBUG(${XML2_VERSION} xml2)
IOS_XCODE_RELEASE(${XML2_VERSION} xml2)

DKSETPATH(${XML2}/${OS})
IOSSIM_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=SIMULATOR64 ${XML2})
IOSSIM_XCODE_DEBUG(${XML2_VERSION} xml2)
IOSSIM_XCODE_RELEASE(${XML2_VERSION} xml2)

DKSETPATH(${XML2}/${OS}/Debug)
LINUX_DEBUG_COMMAND(../../configure --disable-shared --enable-static)
LINUX_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG "-DCMAKE_C_FLAGS=-DLIBXML_THREAD_ENABLED -DHAVE_ERRNO_H -I${XML2}/${OS}/Debug -I${ZLIB}/${OS}/Debug" -DZLIB_INCLUDE_DIR=${ZLIB} -DZLIB_LIBRARY=${ZLIB}/${OS}/Debug/libz.a ${XML2})
LINUX_DEBUG_COMMAND(make xml2)

DKSETPATH(${XML2}/${OS}/Release)
LINUX_RELEASE_COMMAND(../../configure --disable-shared --enable-static)
LINUX_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE "-DCMAKE_C_FLAGS=-DLIBXML_THREAD_ENABLED -DHAVE_ERRNO_H -I${XML2}/${OS}/Release -I${ZLIB}/${OS}/Release" -DZLIB_INCLUDE_DIR=${ZLIB} -DZLIB_LIBRARY=${ZLIB}/${OS}/Release/libz.a ${XML2})
LINUX_RELEASE_COMMAND(make xml2)

ANDROID_NDK_DEBUG(${XML2_VERSION}b)
ANDROID_NDK_RELEASE(${XML2_VERSION})
