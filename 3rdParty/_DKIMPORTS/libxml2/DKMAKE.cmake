# http://xmlsoft.org/sources/libxml2-2.9.8.tar.gz
# https://github.com/GNOME/libxml2/archive/refs/tags/v2.9.8.zip

### DEPENDS ###
DKDEPEND(libiconv)


### VERSION ###
DKSET(XML2_VERSION 2.9.8)
DKSET(XML2_NAME libxml2-${XML2_VERSION})
DKSET(XML2_DL https://github.com/GNOME/libxml2/archive/refs/tags/v${XML2_VERSION}.zip)
DKSET(XML2 ${3RDPARTY}/${XML2_NAME})


### INSTALL ###
DKINSTALL(${XML2_DL} libxml2 ${XML2})


### LINK ###
DKINCLUDE(${XML2})
DKINCLUDE(${XML2}/include)
DKINCLUDE(${XML2}/${OS})
WIN_DEBUG_LIB(${XML2}/${OS}/${DEBUG_DIR}/xml2.lib)
WIN_RELEASE_LIB(${XML2}/${OS}/${RELEASE_DIR}/xml2.lib)
APPLE_DEBUG_LIB(${XML2}/${OS}/${DEBUG_DIR}/libxml2.a)
APPLE_RELEASE_LIB(${XML2}/${OS}/${RELEASE_DIR}/libxml2.a)
LINUX_DEBUG_LIB(${XML2}/${OS}/${DEBUG_DIR}/libxml2.a)
LINUX_RELEASE_LIB(${XML2}/${OS}/${RELEASE_DIR}/libxml2.a)
RASPBERRY_DEBUG_LIB(${XML2}/${OS}/${DEBUG_DIR}/libxml2.a)
RASPBERRY_RELEASE_LIB(${XML2}/${OS}/${RELEASE_DIR}/libxml2.a)
ANDROID_DEBUG_LIB(${XML2}/${OS}/${DEBUG_DIR}/libxml2.a)
ANDROID_RELEASE_LIB(${XML2}/${OS}/${RELEASE_DIR}/libxml2.a)

### 3RDPARTY LINK ###
WIN_DKSET(XML2_CMAKE -DLIBXML2_INCLUDE_DIR=${XML2}/include -DLIBXML2_LIBRARIES=${XML2}/${OS}/${RELEASE_DIR}/xml2.lib)
APPLE_DKSET(XML2_CMAKE -DLIBXML2_INCLUDE_DIR=${XML2}/include -DLIBXML2_LIBRARIES=${XML2}/${OS}/${RELEASE_DIR}/libxml2.a)
LINUX_DKSET(XML2_CMAKE -DLIBXML2_INCLUDE_DIR=${XML2}/include -DLIBXML2_LIBRARIES=${XML2}/${OS}/${RELEASE_DIR}/libxml2.a)
RASPBERRY_DKSET(XML2_CMAKE -DLIBXML2_INCLUDE_DIR=${XML2}/include -DLIBXML2_LIBRARIES=${XML2}/${OS}/${RELEASE_DIR}/libxml2.a)
ANDROID_DKSET(XML2_CMAKE -DLIBXML2_INCLUDE_DIR=${XML2}/include -DLIBXML2_LIBRARIES=${XML2}/${OS}/${RELEASE_DIR}/libxml2.a)



### COMPILE ###
DKSETPATH(${XML2}/${BUILD_DIR})


WIN_DKQCOMMAND(${DKCMAKE_BUILD} ${ICONV_CMAKE} ${ZLIB_CMAKE} ${XML2})
WIN_VS(${XML2_NAME} xml2.sln xml2)

MAC_DKQCOMMAND(${DKCMAKE_BUILD} ${ZLIB_CMAKE} ${XML2})
MAC_XCODE(${XML2_NAME} xml2)

IOS_DKQCOMMAND(${DKCMAKE_BUILD} ${ZLIB_CMAKE} ${XML2})
IOS_XCODE(${XML2_NAME} xml2)

IOSSIM_DKQCOMMAND(${DKCMAKE_BUILD} ${ZLIB_CMAKE} ${XML2})
IOSSIM_XCODE(${XML2_NAME} xml2)

LINUX_DKQCOMMAND(${DKCONFIGURE_BUILD})
LINUX_DKQCOMMAND(${DKCMAKE_BUILD} "-DCMAKE_C_FLAGS=-DLIBXML_THREAD_ENABLED -DHAVE_ERRNO_H -I${XML2}/${OS}/${DEBUG_DIR}" ${ZLIB_CMAKE} ${XML2})
LINUX_DKQCOMMAND(make xml2)

RASPBERRY_DKQCOMMAND(${DKCONFIGURE_BUILD})
RASPBERRY_DKQCOMMAND(${DKCMAKE_BUILD} "-DCMAKE_C_FLAGS=-DLIBXML_THREAD_ENABLED -DHAVE_ERRNO_H -I${XML2}/${OS}/${RELEASE_DIR}" ${ZLIB_CMAKE} ${XML2})
RASPBERRY_DKQCOMMAND(make xml2)

ANDROID_MSYS(${DKCONFIGURE_BUILD})
ANDROID_DKQCOMMAND(${DKCMAKE_BUILD} "-DANDROID_COMPILER_FLAGS=-I${XML2}/${OS}" ${ICONV_CMAKE} ${ZLIB_CMAKE} ${XML2})
ANDROID_VS(${XML2_NAME} xml2.sln xml2)
