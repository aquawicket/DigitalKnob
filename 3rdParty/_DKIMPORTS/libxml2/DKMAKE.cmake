### DEPENDS ###
DKDEPEND(libiconv)


### VERSION ###
DKSET(XML2_VERSION libxml2-2.9.8)


### INSTALL ###
DKINSTALL(http://xmlsoft.org/sources/${XML2_VERSION}.tar.gz libxml2 ${XML2_VERSION})
DKSET(XML2 ${3RDPARTY}/${XML2_VERSION})


### LINK ###
DKINCLUDE(${XML2})
DKINCLUDE(${XML2}/include)
DKINCLUDE(${XML2}/${OS})
WIN_DEBUG_LIB(${XML2}/${OS}/${DEBUG_DIR}/xml2.lib)
WIN_RELEASE_LIB(${XML2}/${OS}/${RELEASE_DIR}/xml2.lib)
APPLE_DEBUG_LIB(${XML2}/${OS}/${DEBUG_DIR}/libxml2.a)
APPLE_RELEASE_LIB(${XML2}/${OS}/${RELEASE_DIR}/libxml2.a)
LINUX_DEBUG_LIB(${XML2}/${OS}/${DEBUG_DIR}/libxml2.a)
LINUX_RELEASE_LIB(${XML2}/${OS}/${RELEASE_DIR}/libxml2.a)
RASPBERRY_DEBUG_LIB(${XML2}/${OS}/${DEBUG_DIR}/libxml2.a)
RASPBERRY_RELEASE_LIB(${XML2}/${OS}/${RELEASE_DIR}/libxml2.a)
##ANDROID_DEBUG_LIB(${XML2}/${OS}/${DEBUG_DIR}/obj/local/armeabi-v7a/libxml2.a)
##ANDROID_RELEASE_LIB(${XML2}/${OS}/${RELEASE_DIR}/obj/local/armeabi-v7a/libxml2.a)
ANDROID_DEBUG_LIB(${XML2}/${OS}/${DEBUG_DIR}/libxml2.a)
ANDROID_RELEASE_LIB(${XML2}/${OS}/${RELEASE_DIR}/libxml2.a)



### COMPILE ###
WIN_PATH(${XML2}/${OS})
WIN32_COMMAND(${DKCMAKE_WIN32} -DICONV_DIR=${ICONV} -DICONV_LIBRARIES=${ICONV}/${OS}/${RELEASE_DIR} -DICONV_INCLUDE_DIR=${ICONV}/include ${ZLIB_WIN} ${XML2})
WIN64_COMMAND(${DKCMAKE_WIN64} -DICONV_DIR=${ICONV} -DICONV_LIBRARIES=${ICONV}/${OS}/${RELEASE_DIR} -DICONV_INCLUDE_DIR=${ICONV}/include ${ZLIB_WIN} ${XML2})
WIN_VS(${XML2_VERSION} xml2.sln xml2)


MAC_PATH(${XML2}/${OS})
MAC_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_OSX_ARCHITECTURES=x86_64 ${ZLIB_APPLE} ${XML2})
MAC_XCODE_DEBUG(${XML2_VERSION} xml2)
MAC_XCODE_RELEASE(${XML2_VERSION} xml2)


IOS_PATH(${XML2}/${OS})
IOS_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=OS ${ZLIB_APPLE} ${XML2})
IOS_XCODE_DEBUG(${XML2_VERSION} xml2)
IOS_XCODE_RELEASE(${XML2_VERSION} xml2)


IOSSIM_PATH(${XML2}/${OS})
IOSSIM_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=SIMULATOR64 ${ZLIB_APPLE} ${XML2})
IOSSIM_XCODE_DEBUG(${XML2_VERSION} xml2)
IOSSIM_XCODE_RELEASE(${XML2_VERSION} xml2)


LINUX_DEBUG_PATH(${XML2}/${OS}/${DEBUG_DIR})
LINUX_DEBUG_COMMAND(../../configure --disable-shared --enable-static)
LINUX_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG "-DCMAKE_C_FLAGS=-DLIBXML_THREAD_ENABLED -DHAVE_ERRNO_H -I${XML2}/${OS}/${DEBUG_DIR}" ${ZLIB_LINUX} ${XML2})
LINUX_DEBUG_COMMAND(make xml2)

LINUX_RELEASE_PATH(${XML2}/${OS}/${RELEASE_DIR})
LINUX_RELEASE_COMMAND(../../configure --disable-shared --enable-static)
LINUX_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE "-DCMAKE_C_FLAGS=-DLIBXML_THREAD_ENABLED -DHAVE_ERRNO_H -I${XML2}/${OS}/${RELEASE_DIR}" ${ZLIB_LINUX} ${XML2})
LINUX_RELEASE_COMMAND(make xml2)


RASPBERRY_DEBUG_PATH(${XML2}/${OS}/${DEBUG_DIR})
RASPBERRY_DEBUG_COMMAND(../../configure --disable-shared --enable-static)
RASPBERRY_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG "-DCMAKE_C_FLAGS=-DLIBXML_THREAD_ENABLED -DHAVE_ERRNO_H -I${XML2}/${OS}/${DEBUG_DIR}" ${ZLIB_RASPBERRY} ${XML2})
RASPBERRY_DEBUG_COMMAND(make xml2)

RASPBERRY_RELEASE_PATH(${XML2}/${OS}/${RELEASE_DIR})
RASPBERRY_RELEASE_COMMAND(../../configure --disable-shared --enable-static)
RASPBERRY_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE "-DCMAKE_C_FLAGS=-DLIBXML_THREAD_ENABLED -DHAVE_ERRNO_H -I${XML2}/${OS}/${RELEASE_DIR}" ${ZLIB_RASPBERRY} ${XML2})
RASPBERRY_RELEASE_COMMAND(make xml2)


##ANDROID_NDK_DEBUG(${XML2_VERSION}b)
##ANDROID_NDK_RELEASE(${XML2_VERSION})

ANDROID_PATH(${XML2}/${OS})
ANDROID32_BASH("#!/bin/bash 
cd /${XML2}/${OS}
export PATH=/${MINGW32}/bin:$PATH\;
export PATH=/${MSYS}/bin:$PATH\;
../configure --disable-shared --enable-static
exit \n")
ANDROID64_BASH("#!/bin/bash 
cd /${XML2}/${OS}
export PATH=/${MINGW64}/bin:$PATH\;
export PATH=/${MSYS}/bin:$PATH\;
../configure --disable-shared --enable-static
exit \n")
ANDROID32_COMMAND(${DKCMAKE_ANDROID32} "-DANDROID_COMPILER_FLAGS=-DANDROID32 -D_ANDROID -I${XML2}/${OS}" ${ICONV_ANDROID} ${ZLIB_ANDROID} ${XML2})
ANDROID64_COMMAND(${DKCMAKE_ANDROID64} "-DANDROID_COMPILER_FLAGS=-DANDROID64 -D_ANDROID -I${XML2}/${OS}" ${ICONV_ANDROID} ${ZLIB_ANDROID} ${XML2})
ANDROID_VS(${XML2_VERSION} xml2.sln xml2)