IF(WIN)
	DKDEPEND(python)
	DKDEPEND(vc2015)
ENDIF()

IF(LINUX)
	DKDEPEND(libboost1.58-tools-dev)
ENDIF()

IF(ANDROID OR IPHONE OR IPHONESIMULATOR)
	RETURN()
ENDIF()

### INSTALL ###
IF(WIN32)
	IF(NOT EXISTS ${3RDPARTY}/boost-build/bootstrap.log)
		MESSAGE("Installing Boost-Build")
		DKSETPATH(${DIGITALKNOB}/Download)
		SET(DKONLINE "http://digitalknob.com/Download") ## WHY DO WE NEED THIS
		##DKDOWNLOAD(${DKONLINE}/Tools/boost-build-2014-10.zip)
		DKDOWNLOAD(https://github.com/boostorg/build/releases/download/2014.10/boost-build-2014-10.zip)
		DKEXTRACT(${DIGITALKNOB}/Download/boost-build-2014-10.zip ${3RDPARTY})
		DKSETPATH(${3RDPARTY}/boost-build)
		EXECUTE_PROCESS(COMMAND cmd /c bootstrap.bat vc14 WORKING_DIRECTORY ${CURRENT_DIR})
	ENDIF()
	DKSET(BOOSTBUILD ${3RDPARTY}/boost-build)
ENDIF()

DKINSTALL(${DKONLINE}/Libs/boost_1_66_0.zip boost_1_66_0)
DKSET(BOOST ${3RDPARTY}/boost_1_66_0)

### LINK ###
DKINCLUDE(${BOOST})
IF(WIN)
	DKLINKDIR(${BOOST}/${OS}/lib)
ENDIF()
IF(MAC)
	DKLINKDIR(${BOOST}/${OS}/lib)
ENDIF()
IF(LINUX)
	DKLINKDIR(${BOOST}/${OS}/lib)
ENDIF()

IF(STATIC)

IF(Boost_Atomic)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/lib/libboost_atomic-vc140-mt-sgd-x32-1_66.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/lib/libboost_atomic-vc140-mt-s-x32-1_66.lib)
	WIN64_DEBUG_LIB(${BOOST}/${OS}/lib/libboost_atomic-vc140-mt-sgd-x64-1_66.lib)
	WIN64_RELEASE_LIB(${BOOST}/${OS}/lib/libboost_atomic-vc140-mt-s-x64-1_66.lib)
	APPLE_DEBUG_LIB(${BOOST}/${OS}/${DEBUG}/lib/libboost_atomic.a)
	APPLE_RELEASE_LIB(${BOOST}/${OS}/${RELEASE}/lib/libboost_atomic.a)
	LINUX_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_atomic.a)
	LINUX_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_atomic.a)
ENDIF()

IF(Boost_Chrono)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/lib/libboost_chrono-vc140-mt-sgd-x32-1_66.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/lib/libboost_chrono-vc140-mt-s-x32-1_66.lib)
	WIN64_DEBUG_LIB(${BOOST}/${OS}/lib/libboost_chrono-vc140-mt-sgd-x64-1_66.lib)
	WIN64_RELEASE_LIB(${BOOST}/${OS}/lib/libboost_chrono-vc140-mt-s-x64-1_66.lib)
	APPLE_DEBUG_LIB(${BOOST}/${OS}/${DEBUG}/lib/libboost_chrono.a)
	APPLE_RELEASE_LIB(${BOOST}/${OS}/${RELEASE}/lib/libboost_chrono.a)
	LINUX_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_chrono.a)
	LINUX_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_chrono.a)
ENDIF()

IF(Boost_DateTime)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/lib/libboost_date_time-vc140-mt-sgd-x32-1_66.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/lib/libboost_date_time-vc140-mt-s-x32-1_66.lib)
	WIN64_DEBUG_LIB(${BOOST}/${OS}/lib/libboost_date_time-vc140-mt-sgd-x64-1_66.lib)
	WIN64_RELEASE_LIB(${BOOST}/${OS}/lib/libboost_date_time-vc140-mt-s-x64-1_66.lib)
	APPLE_DEBUG_LIB(${BOOST}/${OS}/${DEBUG}/lib/libboost_date_time.a)
	APPLE_RELEASE_LIB(${BOOST}/${OS}/${RELEASE}/lib/libboost_date_time.a)
	LINUX_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_date_time.a)
	LINUX_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_date_time.a)
ENDIF()

IF(Boost_Filesystem)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/lib/libboost_filesystem-vc140-mt-sgd-x32-1_66.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/lib/libboost_filesystem-vc140-mt-s-x32-1_66.lib)
	WIN64_DEBUG_LIB(${BOOST}/${OS}/lib/libboost_filesystem-vc140-mt-sgd-x64-1_66.lib)
	WIN64_RELEASE_LIB(${BOOST}/${OS}/lib/libboost_filesystem-vc140-mt-s-x64-1_66.lib)
	APPLE_DEBUG_LIB(${BOOST}/${OS}/${DEBUG}/lib/libboost_filesystem.a)
	APPLE_RELEASE_LIB(${BOOST}/${OS}/${RELEASE}/lib/libboost_filesystem.a)
	LINUX_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_filesystem.a)
	LINUX_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_filesystem.a)
ENDIF()

IF(Boost_Random)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/lib/libboost_random-vc140-mt-sgd-x32-1_66.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/lib/libboost_random-vc140-mt-s-x32-1_66.lib)
	WIN64_DEBUG_LIB(${BOOST}/${OS}/lib/libboost_random-vc140-mt-sgd-x64-1_66.lib)
	WIN64_RELEASE_LIB(${BOOST}/${OS}/lib/libboost_random-vc140-mt-s-x64-1_66.lib)
	APPLE_DEBUG_LIB(${BOOST}/${OS}/${DEBUG}/lib/libboost_random.a)
	APPLE_RELEASE_LIB(${BOOST}/${OS}/${RELEASE}/lib/libboost_random.a)
	LINUX_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_random.a)
	LINUX_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_random.a)
ENDIF()

IF(Boost_System)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/lib/libboost_system-vc140-mt-sgd-x32-1_66.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/lib/libboost_system-vc140-mt-s-x32-1_66.lib)
	WIN64_DEBUG_LIB(${BOOST}/${OS}/lib/libboost_system-vc140-mt-sgd-x64-1_66.lib)
	WIN64_RELEASE_LIB(${BOOST}/${OS}/lib/libboost_system-vc140-mt-s-x64-1_66.lib)
	APPLE_DEBUG_LIB(${BOOST}/${OS}/${DEBUG}/lib/libboost_system.a)
	APPLE_RELEASE_LIB(${BOOST}/${OS}/${RELEASE}/lib/libboost_system.a)
	LINUX_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_system.a)
	LINUX_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_system.a)
ENDIF()

IF(Boost_Thread)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/lib/libboost_thread-vc140-mt-sgd-x32-1_66.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/lib/libboost_thread-vc140-mt-s-x32-1_66.lib)
	WIN64_DEBUG_LIB(${BOOST}/${OS}/lib/libboost_thread-vc140-mt-sgd-x64-1_66.lib)
	WIN64_RELEASE_LIB(${BOOST}/${OS}/lib/libboost_thread-vc140-mt-s-x64-1_66.lib)
	APPLE_DEBUG_LIB(${BOOST}/${OS}/${DEBUG}/lib/libboost_thread.a)
	APPLE_RELEASE_LIB(${BOOST}/${OS}/${RELEASE}/lib/libboost_thread.a)
	LINUX_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_thread.a)
	LINUX_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_thread.a)
ENDIF()


### COMPILE ###
IF(WIN_32)
	DKSETPATH(${BOOSTBUILD})
ENDIF()
##WIN32_COMMAND(b2 install toolset=msvc-14.0 --prefix=${BOOSTBUILD})
WIN32_COMMAND(bootstrap.bat)
DKSETPATH(${BOOST})
WIN32_COMMAND(${BOOSTBUILD}/bjam.exe toolset=msvc-14.0 link=static variant=debug runtime-debugging=on runtime-link=static --threading=multi --with-thread --with-chrono --with-date_time --with-regex --with-filesystem --with-system --with-random --with-atomic --stagedir=${BOOST}/${OS})
WIN32_COMMAND(${BOOSTBUILD}/bjam.exe toolset=msvc-14.0 link=static variant=release runtime-debugging=off runtime-link=static --threading=multi --with-thread --with-chrono --with-date_time --with-regex --with-filesystem --with-system --with-random --with-atomic --stagedir=${BOOST}/${OS})

WIN64_COMMAND(call C:/Windows/System32/cmd.exe /E:ON /V:ON /T:0E /K "${WINDOWS_SDK_EXE}")
IF(WIN_64)
	DKSETPATH(${BOOSTBUILD})
ENDIF()
WIN64_COMMAND(b2 install toolset=msvc-14.0 address-model=64 --prefix=${BOOSTBUILD})
DKSETPATH(${BOOST})
WIN64_COMMAND(${BOOSTBUILD}/bjam.exe toolset=msvc-14.0 link=static address-model=64 variant=debug runtime-debugging=on runtime-link=static --threading=multi --with-thread --with-chrono --with-date_time --with-regex --with-filesystem --with-system --with-random --with-atomic --stagedir=${BOOST}/${OS})
WIN64_COMMAND(${BOOSTBUILD}/bjam.exe toolset=msvc-14.0 link=static address-model=64 variant=release runtime-debugging=off runtime-link=static --threading=multi --with-thread --with-chrono --with-date_time --with-regex --with-filesystem --with-system --with-random --with-atomic --stagedir=${BOOST}/${OS})

DKSETPATH(${BOOST})
MAC32_COMMAND(sudo ./bootstrap.sh)
MAC32_COMMAND(sudo ./bjam --toolset=darwin address-model=32 link=static variant=debug runtime-debugging=on runtime-link=static --threading=multi --with-thread --with-chrono --with-date_time --with-regex --with-filesystem --with-system --with-random --with-atomic --stagedir=${BOOST}/${OS}/Debug)
MAC32_COMMAND(sudo ./bjam --toolset=darwin address-model=32 link=static variant=release runtime-debugging=off runtime-link=static --threading=multi --with-thread --with-chrono --with-date_time --with-regex --with-filesystem --with-system --with-random --with-atomic --stagedir=${BOOST}/${OS}/Release)

DKSETPATH(${BOOST})
MAC64_COMMAND(sudo ./bootstrap.sh)
MAC64_COMMAND(sudo ./bjam --toolset=darwin address-model=64 link=static variant=debug runtime-debugging=on runtime-link=static --threading=multi --with-thread --with-chrono --with-date_time --with-regex --with-filesystem --with-system --with-random --with-atomic --stagedir=${BOOST}/${OS}/Debug)
MAC64_COMMAND(sudo ./bjam --toolset=darwin address-model=64 link=static variant=release runtime-debugging=off runtime-link=static --threading=multi --with-thread --with-chrono --with-date_time --with-regex --with-filesystem --with-system --with-random --with-atomic --stagedir=${BOOST}/${OS}/Release)

DKSETPATH(${BOOST})
LINUX_DEBUG_COMMAND(bjam toolset=gcc link=static variant=debug runtime-debugging=on runtime-link=static --threading=multi --with-thread --with-chrono --with-date_time --with-regex --with-filesystem --with-system --with-random --with-atomic --stagedir=${BOOST}/${OS}/Debug)

LINUX_RELEASE_COMMAND(bjam toolset=gcc link=static variant=release runtime-debugging=off runtime-link=static --threading=multi --with-thread --with-chrono --with-date_time --with-regex --with-filesystem --with-system --with-random --with-atomic --stagedir=${BOOST}/${OS}/Release)

ENDIF(STATIC)

IF(DYNAMIC)

IF(Boost_Filesystem)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/lib/boost_filesystem-vc140-mt-gd-x32-1_66.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/lib/boost_filesystem-vc140-mt-x32-1_66.lib)
ENDIF()

IF(Boost_System)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/lib/boost_system-vc140-mt-gd-x32-1_66.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/lib/boost_system-vc140-mt-x32-1_66.lib)
ENDIF()

IF(WIN_32)
	DKSETPATH(${BOOSTBUILD})
ENDIF()
	WIN32_COMMAND(b2 install toolset=msvc-14.0 --prefix=${BOOSTBUILD})
	DKSETPATH(${BOOST})
	WIN32_COMMAND(${BOOSTBUILD}/bin/bjam.exe toolset=msvc-14.0 link=shared variant=debug runtime-debugging=on runtime-link=shared --threading=multi --with-thread --with-chrono --with-date_time --with-regex --with-filesystem --with-system --stagedir=${BOOST}/${OS})
	WIN32_COMMAND(${BOOSTBUILD}/bin/bjam.exe toolset=msvc-14.0 link=shared variant=release runtime-debugging=off runtime-link=shared --threading=multi --with-thread --with-chrono --with-date_time --with-regex --with-filesystem --with-system --stagedir=${BOOST}/${OS})
	
	DKRENAME(${BOOST}/${OS}/lib/boost_system-vc140-mt-gd-x32-1_66.lib ${BOOST}/${OS}/lib/libboost_system-vc140-mt-gd-x32-1_66.lib)
	DKRENAME(${BOOST}/${OS}/lib/boost_filesystem-vc140-mt-gd-x32-1_66.lib ${BOOST}/${OS}/lib/libboost_filesystem-vc140-mt-gd-x32-1_66.lib)
	DKRENAME(${BOOST}/${OS}/lib/boost_date_time-vc140-mt-gd-x32-1_66.lib ${BOOST}/${OS}/lib/libboost_date_time-vc140-mt-gd-x32-1_66.lib)
	DKRENAME(${BOOST}/${OS}/lib/boost_regex-vc140-mt-gd-x32-1_66.lib ${BOOST}/${OS}/lib/libboost_regex-vc140-mt-gd-x32-1_66.lib)
	DKRENAME(${BOOST}/${OS}/lib/boost_thread-vc140-mt-gd-x32-1_66.lib ${BOOST}/${OS}/lib/libboost_thread-vc140-mt-gd-x32-1_66.lib)
	DKRENAME(${BOOST}/${OS}/lib/boost_chrono-vc140-mt-gd-x32-1_66.lib ${BOOST}/${OS}/lib/libboost_chrono-vc140-mt-gd-x32-1_66.lib)
	
	DKRENAME(${BOOST}/${OS}/lib/boost_system-vc140-mt-x32-1_66.lib ${BOOST}/${OS}/lib/libboost_system-vc140-mt-x32-1_66.lib)
	DKRENAME(${BOOST}/${OS}/lib/boost_filesystem-vc140-mt-x32-1_66.lib ${BOOST}/${OS}/lib/libboost_filesystem-vc140-mt-x32-1_66.lib)
	DKRENAME(${BOOST}/${OS}/lib/boost_date_time-vc140-mt-x32-1_66.lib ${BOOST}/${OS}/lib/libboost_date_time-vc140-mt-x32-1_66.lib)
	DKRENAME(${BOOST}/${OS}/lib/boost_regex-vc140-mt-x32-1_66.lib ${BOOST}/${OS}/lib/libboost_regex-vc140-mt-x32-1_66.lib)
	DKRENAME(${BOOST}/${OS}/lib/boost_thread-vc140-mt-x32-1_66.lib ${BOOST}/${OS}/lib/libboost_thread-vc140-mt-x32-1_66.lib)
	DKRENAME(${BOOST}/${OS}/lib/boost_chrono-vc140-mt-x32-1_66.lib ${BOOST}/${OS}/lib/libboost_chrono-vc140-mt-x32-1_66.lib)


ENDIF(DYNAMIC)