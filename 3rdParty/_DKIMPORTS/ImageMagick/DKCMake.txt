## https://github.com/ImageMagick/ImageMagick/archive/refs/tags/7.1.0-0.zip

### VERSION ###
DKSET(IMAGEMAGICK_VERSION 7.1.0-0)
DKSET(IMAGEMAGICK_NAME ImageMagick-${IMAGEMAGICK_VERSION})
DKSET(IMAGEMAGICK_ROOT ${3RDPARTY}/${IMAGEMAGICK_NAME})


### INSTALL ###
DKINSTALL(https://github.com/ImageMagick/ImageMagick/archive/refs/tags/${IMAGEMAGICK_VERSION}.zip ImageMagick ${IMAGEMAGICK_NAME})


### LINK ###
WIN32_INCLUDE(${IMAGEMAGICK_ROOT}/${OS})
WIN64_INCLUDE(${IMAGEMAGICK_ROOT}/${OS})
WIN_DEBUG_LIB(${IMAGEMAGICK_ROOT}/${OS}/${DEBUG}/imagemagickd.lib)
WIN_RELEASE_LIB(${IMAGEMAGICK_ROOT}/${OS}/${RELEASE}/imagemagick.lib)
APPLE_DEBUG_LIB(${IMAGEMAGICK_ROOT}/${OS}/${DEBUG}/libimagemagick.a)
APPLE_RELEASE_LIB(${IMAGEMAGICK_ROOT}/${OS}/${RELEASE}/libimagemagick.a)
LINUX_DEBUG_LIB(${IMAGEMAGICK_ROOT}/${OS}/${DEBUG}/libimagemagick.a)
LINUX_RELEASE_LIB(${IMAGEMAGICK_ROOT}/${OS}/${RELEASE}/libimagemagick.a)
ANDROID_DEBUG_LIB(${IMAGEMAGICK_ROOT}/${OS}/${DEBUG}/obj/local/armeabi-v7a/libimagemagick.a)
ANDROID_RELEASE_LIB(${IMAGEMAGICK_ROOT}/${OS}/${RELEASE}/obj/local/armeabi-v7a/libimagemagick.a)


### COMPILE ###
DKSETPATH(${IMAGEMAGICK_ROOT}/win32/Debug)
WIN32_BASH("#!/bin/bash\;
cd ${IMAGEMAGICK_ROOT}/win32/Debug\;
export PATH=/${MINGW32}/bin:$PATH\;
export PATH=/${MSYS}/bin:$PATH\;
../../configure --disable-shared --enable-static\;
make\;
exit\;")


## DKSETPATH(${IMAGEMAGICK_ROOT}/${OS})
## WIN32_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A Win32 "-DCMAKE_C_FLAGS=/DTEST /DWIN32 /D_WINDOWS /W3 /nologo" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" ${IMAGEMAGICK_ROOT})
## WIN32_VS_DEBUG(ImageMagick-${IMAGEMAGICK_VERSION} imagemagick.sln imagemagick)
## WIN32_VS_RELEASE(ImageMagick-${IMAGEMAGICK_VERSION} imagemagick.sln imagemagick)

DKSETPATH(${IMAGEMAGICK_ROOT}/${OS})
WIN64_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A x64 "-DCMAKE_C_FLAGS=/DWIN32 /D_WINDOWS /W3 /nologo" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" ${IMAGEMAGICK_ROOT})
WIN64_VS_DEBUG(ImageMagick-${IMAGEMAGICK_VERSION} imagemagick.sln imagemagick)
WIN64_VS_RELEASE(ImageMagick-${IMAGEMAGICK_VERSION} imagemagick.sln imagemagick)

DKSETPATH(${IMAGEMAGICK_ROOT}/${OS})
MAC64_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_OSX_ARCHITECTURES=x86_64 ${IMAGEMAGICK_ROOT})
MAC64_XCODE_DEBUG(ImageMagick-${IMAGEMAGICK_VERSION} imagemagick)
MAC64_XCODE_RELEASE(ImageMagick-${IMAGEMAGICK_VERSION} imagemagick)

DKSETPATH(${IMAGEMAGICK_ROOT}/${OS})
IOS_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=OS ${IMAGEMAGICK_ROOT})
IOS_XCODE_DEBUG(ImageMagick-${IMAGEMAGICK_VERSION} imagemagick)
IOS_XCODE_RELEASE(ImageMagick-${IMAGEMAGICK_VERSION} imagemagick)

DKSETPATH(${IMAGEMAGICK_ROOT}/${OS})
IOSSIM_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=SIMULATOR64 ${IMAGEMAGICK_ROOT})
IOSSIM_XCODE_DEBUG(ImageMagick-${IMAGEMAGICK_VERSION} imagemagick)
IOSSIM_XCODE_RELEASE(ImageMagick-${IMAGEMAGICK_VERSION} imagemagick)

DKSETPATH(${IMAGEMAGICK_ROOT}/${OS}/${DEBUG})
LINUX32_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG -DCMAKE_C_FLAGS=-fPIC -m32 ${IMAGEMAGICK_ROOT})
LINUX32_DEBUG_COMMAND(make imagemagick)

DKSETPATH(${IMAGEMAGICK_ROOT}/${OS}/${RELEASE})
LINUX32_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_FLAGS=-fPIC -m32 ${IMAGEMAGICK_ROOT})
LINUX32_RELEASE_COMMAND(make imagemagick)

DKSETPATH(${IMAGEMAGICK_ROOT}/${OS}/${DEBUG})
LINUX64_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG -DCMAKE_C_FLAGS=-fPIC ${IMAGEMAGICK_ROOT})
LINUX64_DEBUG_COMMAND(make imagemagick)

DKSETPATH(${IMAGEMAGICK_ROOT}/${OS}/${RELEASE})
LINUX64_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_FLAGS=-fPIC ${IMAGEMAGICK_ROOT})
LINUX64_RELEASE_COMMAND(make imagemagick)

ANDROID_NDK_DEBUG(${IMAGEMAGICK_NAME})
ANDROID_NDK_RELEASE(${IMAGEMAGICK_NAME})