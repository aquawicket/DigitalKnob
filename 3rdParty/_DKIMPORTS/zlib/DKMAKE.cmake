### VERSION ###
IF(ANDROID)
	DKSET(ZLIB_VERSION 1.2.8) ## https://www.zlib.net/fossils/zlib-1.2.8.tar.gz
ELSE()
	DKSET(ZLIB_VERSION 1.2.11) ##https://www.zlib.net/fossils/zlib-1.2.11.tar.gz
ENDIF()
DKSET(ZLIB ${3RDPARTY}/zlib-${ZLIB_VERSION})


### INSTALL ###
DKINSTALL(https://www.zlib.net/fossils/zlib-${ZLIB_VERSION}.tar.gz zlib zlib-${ZLIB_VERSION})


### DKPLUGINS LINK ###
DKINCLUDE(${ZLIB})
DKINCLUDE(${ZLIB}/${OS})
WIN_DEBUG_LIB(${ZLIB}/${OS}/${DEBUG}/zlibstaticd.lib)
WIN_RELEASE_LIB(${ZLIB}/${OS}/${RELEASE}/zlibstatic.lib)
APPLE_DEBUG_LIB(${ZLIB}/${OS}/${DEBUG}/libz.a)
APPLE_RELEASE_LIB(${ZLIB}/${OS}/${RELEASE}/libz.a)
LINUX_DEBUG_LIB(${ZLIB}/${OS}/${DEBUG}/libz.a)
LINUX_RELEASE_LIB(${ZLIB}/${OS}/${RELEASE}/libz.a)
RASPBERRY_DEBUG_LIB(${ZLIB}/${OS}/${DEBUG}/libz.a)
RASPBERRY_RELEASE_LIB(${ZLIB}/${OS}/${RELEASE}/libz.a)
ANDROID_DEBUG_LIB(${ZLIB}/${OS}/${DEBUG}/obj/local/armeabi-v7a/libzlib.a)
ANDROID_RELEASE_LIB(${ZLIB}/${OS}/${RELEASE}/obj/local/armeabi-v7a/libzlib.a)


### 3RDPARTY LINK ###
DKSET(ZLIB_WIN -DCMAKE_C_FLAGS=/I${ZLIB}/${OS} -DCMAKE_CXX_FLAGS=/I${ZLIB}/${OS} -DZLIB_INCLUDE_DIR=${ZLIB} -DZLIB_LIBRARY_DEBUG=${ZLIB}/${OS}/${DEBUG}/zlibstatic.lib -DZLIB_LIBRARY_RELEASE=${ZLIB}/${OS}/${RELEASE}/zlibstatic.lib)
DKSET(ZLIB_APPLE -DCMAKE_C_FLAGS=-I${ZLIB}/${OS} -DZLIB_INCLUDE_DIR=${ZLIB} -DZLIB_LIBRARY_DEBUG=${ZLIB}/${OS}/${DEBUG}/libz.a -DZLIB_LIBRARY_RELEASE=${ZLIB}/${OS}/${RELEASE}/libz.a)
DKSET(ZLIB_LINUX -DCMAKE_C_FLAGS=-I${ZLIB}/${OS}/${RELEASE} -DZLIB_INCLUDE_DIR=${ZLIB} -DZLIB_LIBRARY_DEBUG=${ZLIB}/${OS}/${DEBUG}/libz.a -DZLIB_LIBRARY_RELEASE=${ZLIB}/${OS}/${RELEASE}/libz.a)
DKSET(ZLIB_RASPBERRY -DCMAKE_C_FLAGS=-I${ZLIB}/${OS}/${RELEASE} -DZLIB_INCLUDE_DIR=${ZLIB} -DZLIB_LIBRARY_DEBUG=${ZLIB}/${OS}/${DEBUG}/libz.a -DZLIB_LIBRARY_RELEASE=${ZLIB}/${OS}/${RELEASE}/libz.a)
DKSET(ZLIB_ANDROID -DCMAKE_C_FLAGS=-I${ZLIB}/${OS}/${RELEASE} -DZLIB_INCLUDE_DIR=${ZLIB} -DZLIB_LIBRARY_DEBUG=${ZLIB}/${OS}/${DEBUG}/obj/local/armeabi-v7a/libzlib.a -DZLIB_LIBRARY_RELEASE=${ZLIB}/${OS}/${RELEASE}/obj/local/armeabi-v7a/libzlib.a)


### COMPILE ###
WIN32_PATH(${ZLIB}/${OS})
WIN32_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A Win32 "-DCMAKE_C_FLAGS=/DWIN32 /D_WINDOWS /W3 /nologo" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" ${ZLIB})
WIN32_VS_DEBUG(zlib-${ZLIB_VERSION} zlib.sln zlibstatic)
WIN32_VS_RELEASE(zlib-${ZLIB_VERSION} zlib.sln zlibstatic)


WIN64_PATH(${ZLIB}/${OS})
WIN64_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A x64 "-DCMAKE_C_FLAGS=/DWIN32 /D_WINDOWS /W3 /nologo" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" ${ZLIB})
WIN64_VS_DEBUG(zlib-${ZLIB_VERSION} zlib.sln zlibstatic)
WIN64_VS_RELEASE(zlib-${ZLIB_VERSION} zlib.sln zlibstatic)


MAC64_PATH(${ZLIB}/${OS})
MAC64_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_OSX_ARCHITECTURES=x86_64 ${ZLIB})
MAC64_XCODE_DEBUG(zlib-${ZLIB_VERSION} zlibstatic)
MAC64_XCODE_RELEASE(zlib-${ZLIB_VERSION} zlibstatic)


IOS_PATH(${ZLIB}/${OS})
IOS_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=OS ${ZLIB})
IOS_XCODE_DEBUG(zlib-${ZLIB_VERSION} zlibstatic)
IOS_XCODE_RELEASE(zlib-${ZLIB_VERSION} zlibstatic)


IOSSIM64_PATH(${ZLIB}/${OS})
IOSSIM64_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=SIMULATOR64 ${ZLIB})
IOSSIM64_XCODE_DEBUG(zlib-${ZLIB_VERSION} zlibstatic)
IOSSIM64_XCODE_RELEASE(zlib-${ZLIB_VERSION} zlibstatic)


LINUX_DEBUG_PATH(${ZLIB}/${OS}/${DEBUG})
LINUX_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG -DCMAKE_C_FLAGS=-fPIC ${ZLIB})
LINUX_DEBUG_COMMAND(make zlibstatic)
LINUX_RELEASE_PATH(${ZLIB}/${OS}/${RELEASE})
LINUX_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_FLAGS=-fPIC ${ZLIB})
LINUX_RELEASE_COMMAND(make zlibstatic)


RASPBERRY_DEBUG_PATH(${ZLIB}/${OS}/${DEBUG})
RASPBERRY_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG -DCMAKE_C_FLAGS=-fPIC ${ZLIB})
RASPBERRY_DEBUG_COMMAND(make zlibstatic)
RASPBERRY_RELEASE_PATH(${ZLIB}/${OS}/${RELEASE})
RASPBERRY_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_FLAGS=-fPIC ${ZLIB})
RASPBERRY_RELEASE_COMMAND(make zlibstatic)


ANDROID_NDK_DEBUG(zlib-${ZLIB_VERSION})
ANDROID_NDK_RELEASE(zlib-${ZLIB_VERSION})
