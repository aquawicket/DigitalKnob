# Debugging: When calling b2 to compile the boost libraries, you can use the -q flag to make it stop at the first error.
# Notes: abi=aapcs and binary-format=elf were added to android build to supress "No best alternative for libs/context/build/asm_sources"

### VERSION ###
DKSET(BOOST_VERSION_MAJOR 1)
DKSET(BOOST_VERSION_MINOR 74)
DKSET(BOOST_VERSION_BUILD 0)
DKSET(BOOST_VERSION boost_${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}_${BOOST_VERSION_BUILD})

### DEPENDS ###
IF(WIN)
	DKDEPEND(python)
	DKDEPEND(vc2019)
ENDIF()
IF(LINUX)
IF(NOT RASPBERRY)
	DKDEPEND(libboost-tools-dev)
ENDIF()
ENDIF()
IF(RASPBERRY)
	DKDEPEND(libboost-tools-dev)
ENDIF()
IF(ANDROID)
	IF(CMAKE_HOST_WIN32)
		DKDEPEND(vc2019)
		DKDEPEND(android-ndk-r21e)
		DKDEPEND(mingw32)
		DKDEPEND(msys)
	ENDIF()
ENDIF()


### INSTALL ###
DKINSTALL(https://dl.bintray.com/boostorg/release/${BOOST_VERSION_MAJOR}.${BOOST_VERSION_MINOR}.${BOOST_VERSION_BUILD}/source/${BOOST_VERSION}.zip ${BOOST_VERSION})
DKSET(BOOST ${3RDPARTY}/${BOOST_VERSION})


### LINK ###
DKINCLUDE(${BOOST})
DKLINKDIR(${BOOST}/${OS}/Debug/lib)
DKLINKDIR(${BOOST}/${OS}/Release/lib)


IF(STATIC)

IF(Boost_Atomic)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_atomic-vc142-mt-sgd-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_atomic-vc142-mt-s-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN64_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_atomic-vc142-mt-sgd-x64-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN64_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_atomic-vc142-mt-s-x64-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	APPLE_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_atomic.a)
	APPLE_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_atomic.a)
	LINUX_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_atomic.a)
	LINUX_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_atomic.a)
	RASPBERRY_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_atomic.a)
	RASPBERRY_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_atomic.a)
	ANDROID_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_atomic-clang-mt-d-a32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.a)
	ANDROID_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_atomic-clang-mt-a32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.a)
ENDIF()
IF(Boost_Chrono)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_chrono-vc142-mt-sgd-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_chrono-vc142-mt-s-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN64_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_chrono-vc142-mt-sgd-x64-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN64_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_chrono-vc142-mt-s-x64-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	APPLE_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_chrono.a)
	APPLE_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_chrono.a)
	LINUX_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_chrono.a)
	LINUX_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_chrono.a)
	RASPBERRY_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_chrono.a)
	RASPBERRY_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_chrono.a)
	ANDROID_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_chrono-clang-mt-a32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.a)
	ANDROID_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_chrono-clang-mt-d-a32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.a)
ENDIF()
IF(Boost_DateTime)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_date_time-vc142-mt-sgd-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_date_time-vc142-mt-s-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN64_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_date_time-vc142-mt-sgd-x64-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN64_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_date_time-vc142-mt-s-x64-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	APPLE_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_date_time.a)
	APPLE_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_date_time.a)
	LINUX_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_date_time.a)
	LINUX_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_date_time.a)
	RASPBERRY_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_date_time.a)
	RASPBERRY_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_date_time.a)
	ANDROID_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_date_time-clang-mt-d-a32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.a)
	ANDROID_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_date_time-clang-mt-a32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.a)
ENDIF()
IF(Boost_Filesystem)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_filesystem-vc142-mt-sgd-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_filesystem-vc142-mt-s-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN64_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_filesystem-vc142-mt-sgd-x64-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN64_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_filesystem-vc142-mt-s-x64-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	APPLE_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_filesystem.a)
	APPLE_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_filesystem.a)
	LINUX_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_filesystem.a)
	LINUX_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_filesystem.a)
	RASPBERRY_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_filesystem.a)
	RASPBERRY_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_filesystem.a)
	ANDROID_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_filesystem-clang-mt-d-a32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.a)
	ANDROID_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_filesystem-clang-mt-a32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.a)
ENDIF()
IF(Boost_Random)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_random-vc142-mt-sgd-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_random-vc142-mt-s-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN64_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_random-vc142-mt-sgd-x64-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN64_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_random-vc142-mt-s-x64-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	APPLE_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_random.a)
	APPLE_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_random.a)
	LINUX_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_random.a)
	LINUX_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_random.a)
	RASPBERRY_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_random.a)
	RASPBERRY_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_random.a)
	ANDROID_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_random-clang-mt-d-a32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.a)
	ANDROID_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_random-clang-mt-a32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.a)
ENDIF()
IF(Boost_System)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_system-vc142-mt-sgd-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_system-vc142-mt-s-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN64_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_system-vc142-mt-sgd-x64-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN64_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_system-vc142-mt-s-x64-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	APPLE_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_system.a)
	APPLE_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_system.a)
	LINUX_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_system.a)
	LINUX_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_system.a)
	RASPBERRY_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_system.a)
	RASPBERRY_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_system.a)
	ANDROID_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_system-clang-mt-d-a32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.a)
	ANDROID_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_system-clang-mt-a32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.a)
ENDIF() 
IF(Boost_Thread)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_thread-vc142-mt-sgd-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_thread-vc142-mt-s-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN64_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_thread-vc142-mt-sgd-x64-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN64_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_thread-vc142-mt-s-x64-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	APPLE_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_thread.a)
	APPLE_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_thread.a)
	LINUX_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_thread.a)
	LINUX_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_thread.a)
	RASPBERRY_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_thread.a)
	RASPBERRY_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_thread.a)
	ANDROID_DEBUG_LIB(${BOOST}/${OS}/Debug/lib/libboost_thread-clang-mt-d-a32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.a)
	ANDROID_RELEASE_LIB(${BOOST}/${OS}/Release/lib/libboost_thread-clang-mt-a32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.a)
ENDIF()


### COMPILE ###
DKSETPATH(${BOOST})
WIN32_COMMAND(bootstrap.bat)
WIN32_COMMAND(b2 toolset=msvc-14.2 address-model=32 variant=debug link=static threading=multi runtime-debugging=on runtime-link=static --build-dir=${BOOST}/${OS}/Debug --stagedir=${BOOST}/${OS}/Debug)
WIN32_COMMAND(b2 toolset=msvc-14.2 address-model=32 variant=release link=static threading=multi runtime-debugging=off runtime-link=static --build-dir=${BOOST}/${OS}/Release --stagedir=${BOOST}/${OS}/Release)

#WIN64_COMMAND(call C:/Windows/System32/cmd.exe /E:ON /V:ON /T:0E /K "${WINDOWS_SDK_EXE}")
DKSETPATH(${BOOST})
WIN64_COMMAND(bootstrap.bat)
WIN64_COMMAND(b2 toolset=msvc-14.2 address-model=64 variant=debug link=static threading=multi runtime-debugging=on runtime-link=static --build-dir=${BOOST}/${OS}/Debug --stagedir=${BOOST}/${OS}/Debug)
WIN64_COMMAND(b2 toolset=msvc-14.2 address-model=64 variant=release link=static threading=multi runtime-debugging=off runtime-link=static --build-dir=${BOOST}/${OS}/Release --stagedir=${BOOST}/${OS}/Release)

DKSETPATH(${BOOST})
MAC32_COMMAND(sudo ./bootstrap.sh)
MAC32_COMMAND(sudo ./b2 toolset=darwin address-model=32 variant=debug link=static threading=multi runtime-debugging=on runtime-link=static --build-dir=${BOOST}/${OS}/Debug --stagedir=${BOOST}/${OS}/Debug)
MAC32_COMMAND(sudo ./b2 toolset=darwin address-model=32 variant=release link=static threading=multi runtime-debugging=off runtime-link=static --build-dir=${BOOST}/${OS}/Release --stagedir=${BOOST}/${OS}/Release)

DKSETPATH(${BOOST})
MAC64_COMMAND(sudo ./bootstrap.sh)
MAC64_COMMAND(sudo ./b2 toolset=darwin address-model=64 variant=debug link=static threading=multi runtime-debugging=on runtime-link=static --build-dir=${BOOST}/${OS}/Debug --stagedir=${BOOST}/${OS}/Debug)
MAC64_COMMAND(sudo ./b2 toolset=darwin address-model=64 variant=release link=static threading=multi runtime-debugging=off runtime-link=static --build-dir=${BOOST}/${OS}/Release --stagedir=${BOOST}/${OS}/Release)

DKSETPATH(${BOOST})
LINUX32_COMMAND(sudo ./bootstrap.sh)
LINUX32_COMMAND(sudo ./b2 toolset=gcc address-model=32 variant=debug link=static threading=multi runtime-debugging=on runtime-link=static --build-dir=${BOOST}/${OS}/Debug --stagedir=${BOOST}/${OS}/Debug)
LINUX32_COMMAND(sudo ./b2 toolset=gcc address-model=32 variant=release link=static threading=multi runtime-debugging=off runtime-link=static --build-dir=${BOOST}/${OS}/Release --stagedir=${BOOST}/${OS}/Release)

DKSETPATH(${BOOST})
LINUX64_COMMAND(sudo ./bootstrap.sh)
LINUX64_COMMAND(sudo ./b2 toolset=gcc address-model=64 variant=debug link=static threading=multi runtime-debugging=on runtime-link=static --build-dir=${BOOST}/${OS}/Debug --stagedir=${BOOST}/${OS}/Debug)
LINUX64_COMMAND(sudo ./b2 toolset=gcc address-model=64 variant=release link=static threading=multi runtime-debugging=off runtime-link=static --build-dir=${BOOST}/${OS}/Release --stagedir=${BOOST}/${OS}/Release)

DKSETPATH(${BOOST})
ANDROID_BASH("#!/bin/bash\;
cd ${BOOST}\;
export PATH=/${MINGW32}/bin:$PATH\;
export PATH=/${MSYS}/bin:$PATH\;
./SetupAndroid.sh\;")
ANDROID_DEBUG_COMMAND(set ANDROIDNDKROOT=${ANDROID_NDK} && set NDKVER=r21e && set CLANGPATH=%ANDROIDNDKROOT%/toolchains/llvm/prebuilt/windows-x86_64/bin && b2 toolset=clang-armeabiv7a architecture=arm variant=debug link=static threading=multi target-os=android -j4 --layout=versioned --ignore-site-config --user-config=${BOOST}/android-config.jam --build-dir=${BOOST}/${OS}/Debug --stagedir=${BOOST}/${OS}/Debug --without-python abi=aapcs binary-format=elf)
ANDROID_RELEASE_COMMAND(set ANDROIDNDKROOT=${ANDROID_NDK} && set NDKVER=r21e && set CLANGPATH=%ANDROIDNDKROOT%/toolchains/llvm/prebuilt/windows-x86_64/bin && b2 toolset=clang-armeabiv7a architecture=arm variant=release link=static threading=multi target-os=android -j4 --layout=versioned --ignore-site-config --user-config=${BOOST}/android-config.jam --build-dir=${BOOST}/${OS}/Release --stagedir=${BOOST}/${OS}/Release --without-python abi=aapcs binary-format=elf)

ENDIF(STATIC)


IF(SHARED)

IF(Boost_Filesystem)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/lib/boost_filesystem-vc142-mt-gd-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/lib/boost_filesystem-vc142-mt-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
ENDIF()

IF(Boost_System)
	WIN32_DEBUG_LIB(${BOOST}/${OS}/lib/boost_system-vc142-mt-gd-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
	WIN32_RELEASE_LIB(${BOOST}/${OS}/lib/boost_system-vc142-mt-x32-${BOOST_VERSION_MAJOR}_${BOOST_VERSION_MINOR}.lib)
ENDIF()

#WIN32_COMMAND(b2 install toolset=msvc-14.0 --prefix=${BOOSTBUILD})
#DKSETPATH(${BOOST})
#WIN32_COMMAND(b2 toolset=msvc-14.0 link=shared variant=debug runtime-debugging=on #runtime-link=shared --threading=multi --build-dir=${BOOST}/${OS}/Debug #--stagedir=${BOOST}/${OS}/Debug)
#WIN32_COMMAND(b2 toolset=msvc-14.0 link=shared variant=release runtime-debugging=off #runtime-link=shared --threading=multi --build-dir=${BOOST}/${OS}/Release #--stagedir=${BOOST}/${OS}/Release/)

ENDIF(SHARED)
