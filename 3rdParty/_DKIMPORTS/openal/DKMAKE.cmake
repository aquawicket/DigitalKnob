# https://openal.org/
# https://openal-soft.org/
#
# https://github.com/native-toolkit/openal-android
# https://openal.org/downloads/OpenAL11CoreSDK.zip
# https://www.openal-soft.org/openal-releases/openal-soft-1.15.1.tar.bz2
# https://www.openal-soft.org/openal-releases/openal-soft-1.21.1.tar.bz2
### VERSION ###
DKSET(OPENAL_VERSION 1.21.1)
DKSET(OPENAL_NAME openal-${OPENAL_VERSION})
DKSET(OPENAL_DL https://www.openal-soft.org/openal-releases/openal-soft-${OPENAL_VERSION}.tar.bz2)
DKSET(OPENAL ${3RDPARTY}/${OPENAL_NAME})


WIN_DKDEPEND(winmm.lib)


### INSTALL ###
DKINSTALL(${OPENAL_DL} openal ${OPENAL})


### LINK ###
DKINCLUDE(${OPENAL}/include)
DKINCLUDE(${OPENAL}/include/AL)
DKDEFINE(AL_LIBTYPE_STATIC)
file(REMOVE ${OPENAL}/include/AL/stdint.h)
file(REMOVE ${OPENAL}/include/AL/inttypes.h)
WIN_DEBUG_DKLIB(${OPENAL}/${OS}/${DEBUG_DIR}/OpenAL32.lib)
WIN_RELEASE_DKLIB(${OPENAL}/${OS}/${RELEASE_DIR}/OpenAL32.lib)
APPLE_DEBUG_DKLIB(${OPENAL}/${OS}/${DEBUG_DIR}/libopenal.a)
APPLE_RELEASE_DKLIB(${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a)
LINUX_DEBUG_DKLIB(${OPENAL}/${OS}/${DEBUG_DIR}/libopenal.a)
LINUX_RELEASE_DKLIB(${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a)
RASPBERRY_DEBUG_DKLIB(${OPENAL}/${OS}/${DEBUG_DIR}/libopenal.a)
RASPBERRY_RELEASE_DKLIB(${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a)


WIN_DKSET(OPENAL_CMAKE -DOPENAL_INCLUDE_DIR=${OPENAL}/include -DOPENAL_LIBRARY_DEBUG=${OPENAL}/${OS}/${DEBUG_DIR}/libopenal.a -DOPENAL_LIBRARY_RELEASE=${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a)
APPLE_DKSET(OPENAL_CMAKE -DOPENAL_INCLUDE_DIR=${OPENAL}/include/AL -DOPENAL_LIBRARY_DEBUG=${OPENAL}/${OS}/${DEBUG_DIR}/libopenal.a -DOPENAL_LIBRARY_RELEASE=${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a)
LINUX_DEBUG_DKSET(OPENAL_CMAKE -DOPENAL_INCLUDE_DIR=${OPENAL}/include/AL -DOPENAL_LIBRARY=${OPENAL}/${OS}/${DEBUG_DIR}/libopenal.a)
LINUX_RELEASE_DKSET(OPENAL_CMAKE -DOPENAL_INCLUDE_DIR=${OPENAL}/include/AL -DOPENAL_LIBRARY=${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a)
RASPBERRY_DEBUG_DKSET(OPENAL_CMAKE -DOPENAL_INCLUDE_DIR=${OPENAL}/include/AL -DOPENAL_LIBRARY=${OPENAL}/${OS}/${DEBUG_DIR}/libopenal.a)
RASPBERRY_RELEASE_DKSET(OPENAL_CMAKE -DOPENAL_INCLUDE_DIR=${OPENAL}/include/AL -DOPENAL_LIBRARY=${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a)
ANDROID_DKSET(OPENAL_CMAKE -DOPENAL_INCLUDE_DIR=${OPENAL}/include/AL -DOPENAL_LIBRARY=${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a -DOPENAL_LIBRARY_DEBUG=${OPENAL}/${OS}/${DEBUG_DIR}/libopenal.a -DOPENAL_LIBRARY_RELEASE=${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a)


### COMPILE ###
DKSETPATH(${OPENAL}/${BUILD_DIR})


WIN_DKQCOMMAND(${DKCMAKE_BUILD} "-DCMAKE_C_FLAGS=/DAL_LIBTYPE_STATIC" -DLIBTYPE=STATIC -DEXAMPLES=OFF -DFORCE_STATIC_VCRT=ON ${OGG_CMAKE} ${VORBIS_CMAKE} ${FLAC_CMAKE} ${OPENAL})
WIN_VS(${OPENAL_NAME} OpenAL.sln OpenAL)

MAC_DKQCOMMAND(${DKCMAKE_BUILD} -DLIBTYPE=STATIC -DEXAMPLES=OFF ${OGG_CMAKE} ${VORBIS_CMAKE} ${FLAC_CMAKE} ${OPENAL})
MAC_XCODE(${OPENAL_NAME} OpenAL)

IOS_DKQCOMMAND(${DKCMAKE_BUILD} -DLIBTYPE=STATIC -DEXAMPLES=OFF ${OGG_CMAKE} ${VORBIS_CMAKE} ${FLAC_CMAKE} ${OPENAL})
IOS_XCODE(${OPENAL_NAME} OpenAL)

IOSSIM_DKQCOMMAND(${DKCMAKE_BUILD} -DLIBTYPE=STATIC -DEXAMPLES=OFF ${OGG_CMAKE} ${VORBIS_CMAKE} ${FLAC_CMAKE} ${OPENAL})
IOSSIM_XCODE(${OPENAL_NAME} OpenAL)

LINUX_DKQCOMMAND(${DKCMAKE_BUILD} -DLIBTYPE=STATIC -DEXAMPLES=OFF ${OGG_CMAKE} ${VORBIS_CMAKE} ${FLAC_CMAKE} ${OPENAL})
LINUX_DKQCOMMAND(make)

RASPBERRY_DKQCOMMAND(${DKCMAKE_BUILD} -DLIBTYPE=STATIC -DEXAMPLES=OFF ${OGG_CMAKE} ${VORBIS_CMAKE} ${FLAC_CMAKE} ${OPENAL})
RASPBERRY_DKQCOMMAND(make)

ANDROID_DKQCOMMAND(${DKCMAKE_BUILD} -DLIBTYPE=STATIC -DEXAMPLES=OFF ${OGG_CMAKE} ${VORBIS_CMAKE} ${FLAC_CMAKE} ${OPENAL})
ANDROID_VS(${OPENAL_NAME} OpenAL.sln OpenAL)
