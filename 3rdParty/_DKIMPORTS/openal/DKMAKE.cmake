# https://openal.org/
# https://openal-soft.org/
#
# https://github.com/native-toolkit/openal-android
# https://openal.org/downloads/OpenAL11CoreSDK.zip
# https://www.openal-soft.org/openal-releases/openal-soft-1.15.1.tar.bz2
# https://www.openal-soft.org/openal-releases/openal-soft-1.21.1.tar.bz2
### VERSION ###
DKSET(OPENAL_VERSION 1.21.1)
DKSET(OPENAL_NAME openal-${OPENAL_VERSION})
DKSET(OPENAL_DL https://www.openal-soft.org/openal-releases/openal-soft-${OPENAL_VERSION}.tar.bz2)
DKSET(OPENAL ${3RDPARTY}/${OPENAL_NAME})


IF(WIN)
	DKDEPEND(winmm.lib)
ENDIF()


### INSTALL ###
DKINSTALL(${OPENAL_DL} openal ${OPENAL})


### LINK ###
DKINCLUDE(${OPENAL}/include)
DKINCLUDE(${OPENAL}/include/AL)
DKDEFINE(AL_LIBTYPE_STATIC)
FILE(REMOVE ${OPENAL}/include/AL/stdint.h)
FILE(REMOVE ${OPENAL}/include/AL/inttypes.h)
WIN_DEBUG_LIB(${OPENAL}/${OS}/${DEBUG_DIR}/OpenAL32.lib)
WIN_RELEASE_LIB(${OPENAL}/${OS}/${RELEASE_DIR}/OpenAL32.lib)
APPLE_DEBUG_LIB(${OPENAL}/${OS}/${DEBUG_DIR}/libopenal.a)
APPLE_RELEASE_LIB(${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a)
LINUX_DEBUG_LIB(${OPENAL}/${OS}/${DEBUG_DIR}/libopenal.a)
LINUX_RELEASE_LIB(${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a)
RASPBERRY_DEBUG_LIB(${OPENAL}/${OS}/${DEBUG_DIR}/libopenal.a)
RASPBERRY_RELEASE_LIB(${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a)


DKSET(OPENAL_WIN32 -DOPENAL_INCLUDE_DIR=${OPENAL}/include -DOPENAL_LIBRARY_DEBUG=${OPENAL}/${OS}/${DEBUG_DIR}/libopenal.a -DOPENAL_LIBRARY_RELEASE=${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a)
DKSET(OPENAL_APPLE -DOPENAL_INCLUDE_DIR=${OPENAL}/include/AL -DOPENAL_LIBRARY_DEBUG=${OPENAL}/${OS}/${DEBUG_DIR}/libopenal.a -DOPENAL_LIBRARY_RELEASE=${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a)
DKSET(OPENAL_LINUX_DEBUG -DOPENAL_INCLUDE_DIR=${OPENAL}/include/AL -DOPENAL_LIBRARY=${OPENAL}/${OS}/${DEBUG_DIR}/libopenal.a)
DKSET(OPENAL_LINUX_RELEASE -DOPENAL_INCLUDE_DIR=${OPENAL}/include/AL -DOPENAL_LIBRARY=${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a)
DKSET(OPENAL_RASPBERRY_DEBUG -DOPENAL_INCLUDE_DIR=${OPENAL}/include/AL -DOPENAL_LIBRARY=${OPENAL}/${OS}/${DEBUG_DIR}/libopenal.a)
DKSET(OPENAL_RASPBERRY_RELEASE -DOPENAL_INCLUDE_DIR=${OPENAL}/include/AL -DOPENAL_LIBRARY=${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a)
DKSET(OPENAL_ANDROID -DOPENAL_INCLUDE_DIR=${OPENAL}/include/AL -DOPENAL_LIBRARY=${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a -DOPENAL_LIBRARY_DEBUG=${OPENAL}/${OS}/${DEBUG_DIR}/libopenal.a -DOPENAL_LIBRARY_RELEASE=${OPENAL}/${OS}/${RELEASE_DIR}/libopenal.a)


### COMPILE ###
WIN_DKSETPATH(${OPENAL}/${OS})
WIN32_DKQCOMMAND(${DKCMAKE_BUILD} "-DCMAKE_C_FLAGS=/DWIN32 /D_WINDOWS /W3 /nologo /DAL_LIBTYPE_STATIC" -DLIBTYPE=STATIC -DEXAMPLES=OFF -DFORCE_STATIC_VCRT=ON ${OGG_WIN_CMAKE} ${VORBIS_WIN_RELEASE} ${FLAC_WIN} ${OPENAL})
WIN64_DKQCOMMAND(${DKCMAKE_BUILD} "-DCMAKE_C_FLAGS=/DWIN64 /D_WINDOWS /W3 /nologo /DAL_LIBTYPE_STATIC" -DLIBTYPE=STATIC -DEXAMPLES=OFF -DFORCE_STATIC_VCRT=ON ${OGG_WIN_CMAKE} ${VORBIS_WIN_RELEASE} ${FLAC_WIN} ${OPENAL})
WIN_VS(${OPENAL_NAME} OpenAL.sln OpenAL)


MAC_DKSETPATH(${OPENAL}/${OS})
MAC64_DKQCOMMAND(${DKCMAKE_BUILD} -DLIBTYPE=STATIC -DEXAMPLES=OFF ${OGG_MAC_CMAKE} ${VORBIS_MAC_RELEASE} ${FLAC_MAC} ${OPENAL})
MAC_XCODE(${OPENAL_NAME} OpenAL)


IOS_DKSETPATH(${OPENAL}/${OS})
IOS64_DKQCOMMAND(${DKCMAKE_BUILD} -DLIBTYPE=STATIC -DEXAMPLES=OFF ${OGG_IOS_CMAKE} ${VORBIS_IOS_RELEASE} ${FLAC_IOS} ${OPENAL})
IOS_XCODE(${OPENAL_NAME} OpenAL)


IOSSIM_DKSETPATH(${OPENAL}/${OS})
IOSSIM64_DKQCOMMAND(${DKCMAKE_BUILD} -DLIBTYPE=STATIC -DEXAMPLES=OFF ${OGG_IOSSIM_CMAKE} ${VORBIS_IOSSIM_RELEASE} ${FLAC_IOSSIM} ${OPENAL})
IOSSIM_XCODE(${OPENAL_NAME} OpenAL)


LINUX_DEBUG_DKSETPATH(${OPENAL}/${OS}/${DEBUG_DIR})
LINUX_DEBUG_DKQCOMMAND(${DKCMAKE_BUILD} -DLIBTYPE=STATIC -DEXAMPLES=OFF ${OGG_LINUX_CMAKE} ${VORBIS_LINUX_DEBUG} ${FLAC_LINUX_DEBUG} ${OPENAL})
LINUX_DEBUG_DKQCOMMAND(make)
LINUX_RELEASE_DKSETPATH(${OPENAL}/${OS}/${RELEASE_DIR})
LINUX_RELEASE_DKQCOMMAND(${DKCMAKE_BUILD} -DLIBTYPE=STATIC -DEXAMPLES=OFF ${OGG_LINUX_CMAKE} ${VORBIS_LINUX_RELEASE} ${FLAC_LINUX_RELEASE} ${OPENAL})
LINUX_RELEASE_DKQCOMMAND(make)


RASPBERRY_DEBUG_DKSETPATH(${OPENAL}/${OS}/${DEBUG_DIR})
RASPBERRY_DEBUG_DKQCOMMAND(${DKCMAKE_BUILD} -DLIBTYPE=STATIC -DEXAMPLES=OFF ${OGG_RASPBERRY_CMAKE} ${VORBIS_RASPBERRY_DEBUG} ${FLAC_RASPBERRY_DEBUG} ${OPENAL})
RASPBERRY_DEBUG_DKQCOMMAND(make)
RASPBERRY_RELEASE_DKSETPATH(${OPENAL}/${OS}/${RELEASE_DIR})
RASPBERRY_RELEASE_DKQCOMMAND(${DKCMAKE_BUILD} -DLIBTYPE=STATIC -DEXAMPLES=OFF ${OGG_RASPBERRY_CMAKE} ${VORBIS_RASPBERRY_RELEASE} ${FLAC_RASPBERRY_RELEASE} ${OPENAL})
RASPBERRY_RELEASE_DKQCOMMAND(make)


ANDROID_PATH(${OPENAL}/${OS})
ANDROID32_DKQCOMMAND(${DKCMAKE_BUILD} -DLIBTYPE=STATIC -DEXAMPLES=OFF ${OGG_ANDROID_CMAKE} ${VORBIS_ANDROID_DEBUG} ${FLAC_ANDROID} ${OPENAL})
ANDROID364_DKQCOMMAND(${DKCMAKE_BUILD} -DLIBTYPE=STATIC -DEXAMPLES=OFF ${OGG_ANDROID_CMAKE} ${VORBIS_ANDROID_RELEASE} ${FLAC_ANDROID} ${OPENAL})
ANDROID_VS(${OPENAL_NAME} OpenAL.sln OpenAL)
