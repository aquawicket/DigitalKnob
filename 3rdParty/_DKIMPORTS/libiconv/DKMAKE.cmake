### VERSION ###
DKSET(ICONV_VERSION 1.14)



### INSTALL ###
DKINSTALL(https://ftp.gnu.org/gnu/libiconv/libiconv-${ICONV_VERSION}.tar.gz libiconv libiconv-${ICONV_VERSION})
DKSET(ICONV ${3RDPARTY}/libiconv-${ICONV_VERSION})



### LINK ###
DKINCLUDE(${ICONV})
DKINCLUDE(${ICONV}/include)
DKINCLUDE(${ICONV}/${OS})
DKINCLUDE(${ICONV}/${OS}/${RELEASE})
ANDROID_INCLUDE(${ICONV}/${OS}/$(BUILD_TYPE)/jni)
WIN_DEBUG_LIB(${ICONV}/${OS}/${DEBUG}/iconv.lib)
WIN_RELEASE_LIB(${ICONV}/${OS}/${RELEASE}/iconv.lib)
WIN_DEBUG_LIB(${ICONV}/${OS}/${DEBUG}/charset.lib)
WIN_RELEASE_LIB(${ICONV}/${OS}/${RELEASE}/charset.lib)
APPLE_DEBUG_LIB(${ICONV}/${OS}/${DEBUG}/libiconv.a)
APPLE_RELEASE_LIB(${ICONV}/${OS}/${RELEASE}/libiconv.a)
LINUX_DEBUG_LIB(${ICONV}/${OS}/${DEBUG}/libiconv.a)
LINUX_RELEASE_LIB(${ICONV}/${OS}/${RELEASE}/libiconv.a)
ANDROID_DEBUG_LIB(${ICONV}/${OS}/${DEBUG}/obj/local/armeabi-v7a/libiconv.a)
ANDROID_RELEASE_LIB(${ICONV}/${OS}/${RELEASE}/obj/local/armeabi-v7a/libiconv.a)
RASPBERRY_DEBUG_LIB(${ICONV}/${OS}/${DEBUG}/libiconv.a)
RASPBERRY_RELEASE_LIB(${ICONV}/${OS}/${RELEASE}/libiconv.a)



### COMPILE ###
WIN32_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A Win32 "-DCMAKE_C_FLAGS=/DWIN32 /D_WINDOWS /W3 /nologo" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" -S ${ICONV} -B ${ICONV}/${OS})
WIN32_VS_DEBUG(libiconv-${ICONV_VERSION} libiconv.sln iconv)
WIN32_VS_RELEASE(libiconv-${ICONV_VERSION} libiconv.sln iconv)


WIN64_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A x64 "-DCMAKE_C_FLAGS=/DWIN32 /DWIN64 /D_WINDOWS /W3 /nologo" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" -S ${ICONV} -B ${ICONV}/${OS})
WIN64_VS_DEBUG(libiconv-${ICONV_VERSION} libiconv.sln iconv)
WIN64_VS_RELEASE(libiconv-${ICONV_VERSION} libiconv.sln iconv)


MAC_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_OSX_ARCHITECTURES=x86_64 -S ${ICONV} -B ${ICONV}/${OS})
MAC_XCODE_DEBUG(libiconv-${ICONV_VERSION} iconv)
MAC_XCODE_RELEASE(libiconv-${ICONV_VERSION} iconv)


IOS_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=OS -S ${ICONV} -B ${ICONV}/${OS})
IOS_XCODE_DEBUG(libiconv-${ICONV_VERSION} iconv)
IOS_XCODE_RELEASE(libiconv-${ICONV_VERSION} iconv)


IOSSIM_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=SIMULATOR64 -S ${ICONV} -B ${ICONV}/${OS})
IOSSIM_XCODE_DEBUG(libiconv-${ICONV_VERSION} iconv)
IOSSIM_XCODE_RELEASE(libiconv-${ICONV_VERSION} iconv)


LINUX_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG -S ${ICONV} -B ${ICONV}/${OS}/${DEBUG})
LINUX_DEBUG_COMMAND(make iconv)
LINUX_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE -S ${ICONV} -B ${ICONV}/${OS}/${RELEASE})
LINUX_RELEASE_COMMAND(make iconv)


RASPBERRY_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG -S ${ICONV} -B ${ICONV}/${OS}/${DEBUG})
RASPBERRY_DEBUG_COMMAND(make iconv)
RASPBERRY_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE -S ${ICONV} -B ${ICONV}/${OS}/${RELEASE})
RASPBERRY_RELEASE_COMMAND(make iconv)


ANDROID_NDK_DEBUG(libiconv-${ICONV_VERSION}b)
ANDROID_NDK_RELEASE(libiconv-${ICONV_VERSION})
