### VERSION ###
DKSET(ICONV_VERSION libiconv-1.14)


### INSTALL ###
DKINSTALL(https://ftp.gnu.org/gnu/libiconv/${ICONV_VERSION}.tar.gz libiconv ${ICONV_VERSION})
DKSET(ICONV ${3RDPARTY}/${ICONV_VERSION})


### LINK ###
DKINCLUDE(${ICONV})
DKINCLUDE(${ICONV}/include)
DKINCLUDE(${ICONV}/${OS})
DKINCLUDE(${ICONV}/${OS}/Release)
ANDROID_INCLUDE(${ICONV}/${OS}/$(BUILD_TYPE)/jni)
WIN_DEBUG_LIB(${ICONV}/${OS}/Debug/iconv.lib)
WIN_RELEASE_LIB(${ICONV}/${OS}/Release/iconv.lib)
WIN_DEBUG_LIB(${ICONV}/${OS}/Debug/charset.lib)
WIN_RELEASE_LIB(${ICONV}/${OS}/Release/charset.lib)
APPLE_DEBUG_LIB(${ICONV}/${OS}/${DEBUG}/libiconv.a)
APPLE_RELEASE_LIB(${ICONV}/${OS}/${RELEASE}/libiconv.a)
LINUX_DEBUG_LIB(${ICONV}/${OS}/Debug/libiconv.a)
LINUX_RELEASE_LIB(${ICONV}/${OS}/Release/libiconv.a)
ANDROID_DEBUG_LIB(${ICONV}/${OS}/Debug/obj/local/armeabi-v7a/libiconv.a)
ANDROID_RELEASE_LIB(${ICONV}/${OS}/Release/obj/local/armeabi-v7a/libiconv.a)
RASPBERRY_DEBUG_LIB(${ICONV}/${OS}/Debug/libiconv.a)
RASPBERRY_RELEASE_LIB(${ICONV}/${OS}/Release/libiconv.a)


### COMPILE ###
DKSETPATH(${ICONV}/${OS})
WIN32_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A Win32 "-DCMAKE_C_FLAGS=/DWIN32 /D_WINDOWS /W3 /nologo" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" ${ICONV})
WIN32_VS_DEBUG(${ICONV_VERSION} libiconv.sln iconv)
WIN32_VS_RELEASE(${ICONV_VERSION} libiconv.sln iconv)

DKSETPATH(${ICONV}/${OS})
WIN64_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A x64 "-DCMAKE_C_FLAGS=/DWIN32 /DWIN64 /D_WINDOWS /W3 /nologo" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" ${ICONV})
WIN64_VS_DEBUG(${ICONV_VERSION} libiconv.sln iconv)
WIN64_VS_RELEASE(${ICONV_VERSION} libiconv.sln iconv)

DKSETPATH(${ICONV}/${OS})
MAC_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_OSX_ARCHITECTURES=x86_64 ${ICONV})
MAC_XCODE_DEBUG(${ICONV_VERSION} iconv)
MAC_XCODE_RELEASE(${ICONV_VERSION} iconv)

DKSETPATH(${ICONV}/${OS})
IOS_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=OS ${ICONV})
IOS_XCODE_DEBUG(${ICONV_VERSION} iconv)
IOS_XCODE_RELEASE(${ICONV_VERSION} iconv)

DKSETPATH(${ICONV}/${OS})
IOSSIM_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=SIMULATOR64 ${ICONV})
IOSSIM_XCODE_DEBUG(${ICONV_VERSION} iconv)
IOSSIM_XCODE_RELEASE(${ICONV_VERSION} iconv)

DKSETPATH(${ICONV}/${OS}/Debug)
LINUX_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG ${ICONV})
LINUX_DEBUG_COMMAND(make iconv)

DKSETPATH(${ICONV}/${OS}/Release)
LINUX_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE ${ICONV})
LINUX_RELEASE_COMMAND(make iconv)

ANDROID_NDK_DEBUG(${ICONV_VERSION}b)
ANDROID_NDK_RELEASE(${ICONV_VERSION})


DKSETPATH(${ICONV}/${OS}/Debug)
RASPBERRY_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG ${ICONV})
RASPBERRY_DEBUG_COMMAND(make iconv)

DKSETPATH(${ICONV}/${OS}/Release)
RASPBERRY_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE ${ICONV})
RASPBERRY_RELEASE_COMMAND(make iconv)
