### DEPENDS ###
DKDEPEND(freetype)
DKDEPEND(glew)
DKDEPEND(SDL2)
DKDEPEND(SDL2_image)
DKDEPEND(SFML)


### VERSION ###
DKSET(RMLUI_VERSION RmlUi-master)

DKSET(RMLUI ${3RDPARTY}/${RMLUI_VERSION})


### INSTALL ###
DKINSTALL(https://codeload.github.com/mikke89/RmlUi/zip/master RmlUi ${RMLUI_VERSION})
DKRENAME(${DKDOWNLOAD}/master ${DKDOWNLOAD}/${RMLUI_VERSION}.zip) ##FIXME: Only do this after install


### LINK ###
DKDEFINE(RMLUI_STATIC_LIB)
DKINCLUDE(${RMLUI}/Include)
WIN_DEBUG_LIB(${RMLUI}/${OS}/Debug/RmlDebugger.lib)
WIN_DEBUG_LIB(${RMLUI}/${OS}/Debug/RmlDebugger.lib)
WIN_RELEASE_LIB(${RMLUI}/${OS}/Release/RmlDebugger.lib)
MAC_DEBUG_LIB(${RMLUI}/${OS}/${DEBUG}/libRmlDebugger.a)
MAC_RELEASE_LIB(${RMLUI}/${OS}/${RELEASE}/libRmlDebugger.a)
IOSSIM_DEBUG_LIB(${RMLUI}/${OS}/${DEBUG}/libRmlDebugger_d.a)
IOSSIM_RELEASE_LIB(${RMLUI}/${OS}/${RELEASE}/libRmlDebugger.a)
##LINUX_DEBUG_LIB(${RMLUI}/${OS}/Debug/libRmlDebugger.a) ##FIXME
##LINUX_RELEASE_LIB(${RMLUI}/${OS}/Release/libRmlDebugger.a) ##FIXME
ANDROID_DEBUG_LIB(${RMLUI}/${OS}/Debug/obj/local/armeabi-v7a/libRmlDebugger.a)
ANDROID_RELEASE_LIB(${RMLUI}/${OS}/Release/obj/local/armeabi-v7a/libRmlDebugger.a)
##RASPBERRY_DEBUG_LIB(${RMLUI}/${OS}/Debug/libRmlDebugger.a) ##FIXME
##RASPBERRY_RELEASE_LIB(${RMLUI}/${OS}/Release/libRmlDebugger.a) ##FIXME

WIN_DEBUG_LIB(${RMLUI}/${OS}/Debug/RmlCore.lib)
WIN_RELEASE_LIB(${RMLUI}/${OS}/Release/RmlCore.lib)
MAC_DEBUG_LIB(${RMLUI}/${OS}/${DEBUG}/libRmlCore.a)
MAC_RELEASE_LIB(${RMLUI}/${OS}/${RELEASE}/libRmlCore.a)
IOSSIM_DEBUG_LIB(${RMLUI}/${OS}/${DEBUG}/libRmlCore_d.a)
IOSSIM_RELEASE_LIB(${RMLUI}/${OS}/${RELEASE}/libRmlCore.a)
LINUX_DEBUG_LIB(${RMLUI}/${OS}/Debug/libRmlCore.a)
LINUX_RELEASE_LIB(${RMLUI}/${OS}/Release/libRmlCore.a)
ANDROID_DEBUG_LIB(${RMLUI}/${OS}/Debug/obj/local/armeabi-v7a/libRmlCore.a)
ANDROID_RELEASE_LIB(${RMLUI}/${OS}/Release/obj/local/armeabi-v7a/libRmlCore.a)
RASPBERRY_DEBUG_LIB(${RMLUI}/${OS}/Debug/libRmlCore.a)
RASPBERRY_RELEASE_LIB(${RMLUI}/${OS}/Release/libRmlCore.a)

### The RmlUi SDL example needs these libraries
#${GLEW}\${OS}\lib\Debug\glew32d.lib
#${JPEG}\${OS}\Debug\turbojpeg-static.lib
#${PNG}\${OS}\Debug\libpng17_staticd.lib
#${TIFF}\${OS}\Debug\tiff-static.lib
#${ZLIB}\${OS}\Debug\zlibstaticd.lib
#winmm.lib
#Setupapi.lib
#version.lib
#imm32.lib

#### DEBUG COMPILE #####
DKSETPATH(${RMLUI}/${OS})
WIN32_COMMAND(${CMAKE_COMMAND} -G "Visual Studio 16 2019" -A Win32 "-DCMAKE_CXX_FLAGS=/DWIN32 /D_WINDOWS /W3 /nologo /GR /EHsc -DRMLUI_STATIC_LIB /I${3RDPARTY}/${RMLUI_VERSION}/Include /I${SDL}/include /I${GLEW}/include" "-DCMAKE_CXX_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_CXX_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" -DBUILD_SHARED_LIBS=OFF -DBUILD_SAMPLES=ON ${FREETYPE_WIN32} ${SDL2_WIN32} -S ${3RDPARTY}/${RMLUI_VERSION} -B ${3RDPARTY}/${RMLUI_VERSION}/${OS})

##WIN32_COMMAND(${CMAKE_COMMAND} -G "Visual Studio 16 2019" -A Win32 "-DCMAKE_CXX_FLAGS=/DWIN32 /D_WINDOWS /W3 /nologo /GR /EHsc -DRMLUI_STATIC_LIB /I${3RDPARTY}/${RMLUI_VERSION}/Include /I${SDL}/include /I${GLEW}/include" "-DCMAKE_CXX_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_CXX_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" -DBUILD_SHARED_LIBS=OFF -DBUILD_SAMPLES=ON ${FREETYPE_WIN32} ${SDL2_WIN32} -DSDL2_IMAGE_LIBRARY_TEMP=${SDLIMAGE}/${OS}/lib/Release/SDL_image.lib -DSDL2_IMAGE_INCLUDE_DIR=${SDLIMAGE} -DGLEW_DIR=${GLEW}/build/cmake -DGLEW_INCLUDE_DIR=${GLEW} -DGLEW_SHARED_LIBRARY_DEBUG=${GLEW}/${OS}/lib/Debug/libglew32d.lib -DGLEW_SHARED_LIBRARY_RELEASE=${GLEW}/${OS}/lib/Release/libglew32.lib -DGLEW_STATIC_LIBRARY_DEBUG=${GLEW}/${OS}/lib/Debug/glew32d.lib -DGLEW_STATIC_LIBRARY_RELEASE=${GLEW}/${OS}/lib/Release/glew32.lib -DCMAKE_PREFIX_PATH=${GLEW} -DSFML_INCLUDE_DIR=${SFML}/include -DSFML_MAIN_LIBRARY_DEBUG=${SFML}/${OS}/lib/Debug/sfml-main-d.lib -DSFML_MAIN_LIBRARY_RELEASE=${SFML}/${OS}/lib/Release/sfml-main.lib -DSFML_SYSTEM_LIBRARY_DEBUG=${SFML}/${OS}/lib/Debug/sfml-system-s-d.lib -DSFML_SYSTEM_LIBRARY_RELEASE=${SFML}/${OS}/lib/Debug/sfml-system-s.lib -DSFML_WINDOW_LIBRARY_DEBUG=${SFML}/${OS}/lib/Debug/sfml-window-s-d.lib -DSFML_WINDOW_LIBRARY_RELEASE=${SFML}/${OS}/lib/Release/sfml-window-s.lib -DSFML_GRAPHICS_LIBRARY_DEBUG=${SFML}/${OS}/lib/Debug/sfml-graphics-s-d.lib -DSFML_GRAPHICS_LIBRARY_RELEASE=${SFML}/${OS}/lib/Release/sfml-graphics-s.lib -S ${3RDPARTY}/${RMLUI_VERSION} -B ${3RDPARTY}/${RMLUI_VERSION}/${OS})
WIN32_VS_DEBUG(${RMLUI_VERSION} RmlUi.sln)
WIN32_VS_RELEASE(${RMLUI_VERSION} RmlUi.sln)

### COMPILE ###
#DKSETPATH(${RMLUI}/${OS})
#WIN32_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A Win32 "-DCMAKE_CXX_FLAGS=/DWIN32 /D_WINDOWS /W3 /nologo /GR /EHsc /I${RMLUI}/Include /I${SDL}/include" "-DCMAKE_CXX_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_CXX_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" -DBUILD_SHARED_LIBS=OFF -DBUILD_SAMPLES=ON -DFREETYPE_INCLUDE_DIR_freetype2=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_ft2build=${FREETYPE}/include -DFREETYPE_LIBRARY=${FREETYPE}/${OS}/Release/freetype.lib -DFREETYPE_LIBRARY_DEBUG=${FREETYPE}/${OS}/Debug/freetype.lib -DFREETYPE_LIBRARY_RELEASE=${FREETYPE}/${OS}/Release/freetype.lib -DSDL2_INCLUDE_DIR=${SDL} -DSDL2_LIBRARY=${SDL}/${OS}/Release/SDL2.lib -DSDL2_LIBRARY_TEMP=${SDL}/${OS}/Release/SDL2.lib -DSDL2_IMAGE_INCLUDE_DIR=${SDLIMAGE} -DSDL2_IMAGE_LIBRARY_TEMP=${SDLIMAGE}/${OS}/lib/Release/SDL_image.lib -DGLEW_INCLUDE_DIR=${GLEW} -DGLEW_STATIC_LIBRARY_DEBUG=${GLEW}/${OS}/lib/Debug/glew32d.lib -DGLEW_STATIC_LIBRARY_RELEASE=${GLEW}/${OS}/lib/Release/glew32.lib ${RMLUI})
#WIN32_VS_DEBUG(${RMLUI_VERSION} RmlUi.sln)
#WIN32_VS_RELEASE(${RMLUI_VERSION} RmlUi.sln)

## Test Building with Msys/Mingw
##WIN32_COMMAND(${CMAKE_COMMAND} -G "MSYS Makefiles" -DCMAKE_MAKE_PROGRAM=${MSYS}/bin/make.exe -DENABLE_PRECOMPILED_HEADERS=OFF -DDISABLE_RTTI_AND_EXCEPTIONS=ON -DBUILD_SHARED_LIBS=OFF -DFREETYPE_INCLUDE_DIR_freetype2=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_ft2build=${FREETYPE}/include -DFREETYPE_LIBRARY_DEBUG=${FREETYPE}/${OS}/Debug/freetype.lib -DFREETYPE_LIBRARY_RELEASE=${FREETYPE}/${OS}/Release/freetype.lib ${RMLUI})
##WIN32_BASH("#!/bin/bash\;
##cd ${RMLUI}/${OS}\;
##export PATH=/c/mingw32/bin:$PATH\;
##export PATH=/c/msys/bin:$PATH\;
##make\;
##exit\;")


DKSETPATH(${RMLUI}/${OS})
WIN64_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A x64 "-DCMAKE_CXX_FLAGS=/DWIN32 /D_WINDOWS /W3 /nologo /GR /EHsc /I${RMLUI}/Include" "-DCMAKE_CXX_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_CXX_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" -DBUILD_SHARED_LIBS=OFF -DFREETYPE_INCLUDE_DIR_freetype2=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_ft2build=${FREETYPE}/include -DFREETYPE_LIBRARY=${FREETYPE}/${OS}/Release/freetype.lib ${RMLUI})
WIN64_VS_DEBUG(${RMLUI_VERSION} RmlUi.sln)
WIN64_VS_RELEASE(${RMLUI_VERSION} RmlUi.sln)

DKSETPATH(${RMLUI}/${OS})
MAC_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_OSX_ARCHITECTURES=x86_64 -DBUILD_SHARED_LIBS=OFF -DFREETYPE_INCLUDE_DIR_freetype2=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_ft2build=${FREETYPE}/include -DFREETYPE_LIBRARY=${FREETYPE}/mac/Release/libfreetype.a ${RMLUI})
MAC_XCODE_DEBUG(${RMLUI_VERSION})
MAC_XCODE_RELEASE(${RMLUI_VERSION})

DKSETPATH(${RMLUI}/${OS})
IOS_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=OS -DBUILD_SHARED_LIBS=OFF -DFREETYPE_INCLUDE_DIR_freetype2=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_ft2build=${FREETYPE}/include -DFREETYPE_LIBRARY=${FREETYPE}/${OS}/${RELEASE}/libfreetype.a ${RMLUI})
IOS_XCODE_DEBUG(${RMLUI_VERSION})
IOS_XCODE_RELEASE(${RMLUI_VERSION})

DKSETPATH(${RMLUI}/${OS})
IOSSIM_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=SIMULATOR64 -DBUILD_SHARED_LIBS=OFF -DFREETYPE_INCLUDE_DIR_freetype2=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_ft2build=${FREETYPE}/include -DFREETYPE_LIBRARY=${FREETYPE}/${OS}/${RELEASE}/libfreetype.a ${RMLUI})
IOSSIM_XCODE_DEBUG(${RMLUI_VERSION})
IOSSIM_XCODE_RELEASE(${RMLUI_VERSION})


DKSETPATH(${RMLUI}/${OS}/Debug)
LINUX_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=DEBUG -DFREETYPE_INCLUDE_DIR_freetype2=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_ft2build=${FREETYPE}/include -DFREETYPE_LIBRARY=${FREETYPE}/${OS}/Debug/libfreetype.a ${RMLUI})
LINUX_DEBUG_COMMAND(make)

DKSETPATH(${RMLUI}/${OS}/Release)
LINUX_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=RELEASE -DFREETYPE_INCLUDE_DIR_freetype2=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_ft2build=${FREETYPE}/include -DFREETYPE_LIBRARY=${FREETYPE}/${OS}/Release/libfreetype.a ${RMLUI})
LINUX_RELEASE_COMMAND(make)

ANDROID_NDK_DEBUG(${RMLUI_VERSION})
ANDROID_NDK_RELEASE(${RMLUI_VERSION})


DKSETPATH(${RMLUI}/${OS}/Debug)
RASPBERRY_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=DEBUG -DFREETYPE_INCLUDE_DIR_freetype2=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_ft2build=${FREETYPE}/include -DFREETYPE_LIBRARY=${FREETYPE}/${OS}/Debug/libfreetype.a ${RMLUI})
RASPBERRY_DEBUG_COMMAND(make)

DKSETPATH(${RMLUI}/${OS}/Release)
RASPBERRY_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=RELEASE -DFREETYPE_INCLUDE_DIR_freetype2=${FREETYPE}/include -DFREETYPE_INCLUDE_DIR_ft2build=${FREETYPE}/include -DFREETYPE_LIBRARY=${FREETYPE}/${OS}/Release/libfreetype.a ${RMLUI})
RASPBERRY_RELEASE_COMMAND(make)

