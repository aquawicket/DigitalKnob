### VERSION ###
DKSET(UV_VERSION libuv-v1.37.0)
DKSET(UV_MAJOR_VERSION 1)
DKSET(UV_MINOR_VERSION 37)
DKSET(UV_BUILD_VERSION 0)

### INSTALL ###
DKINSTALL(https://dist.libuv.org/dist/v${UV_MAJOR_VERSION}.${UV_MINOR_VERSION}.${UV_BUILD_VERSION}/${UV_VERSION}.tar.gz libuv ${UV_VERSION})
DKSET(UV ${3RDPARTY}/${UV_VERSION})


### LINK ###
LIST(APPEND WIN_LIBS Iphlpapi.lib)
LIST(APPEND WIN_LIBS Userenv.lib)
DKINCLUDE(${UV}/include)
DKINCLUDE(${UV}/${OS})
WIN_DEBUG_LIB(${UV}/${OS}/Debug/uv_a.lib)
WIN_RELEASE_LIB(${UV}/${OS}/Release/uv_a.lib)
MAC_DEBUG_LIB(${UV}/${OS}/lib/${DEBUG}/uv_a.a)
MAC_RELEASE_LIB(${UV}/${OS}/lib/${RELEASE}/uv_a.a)
IOSSIM_DEBUG_LIB(${UV}/${OS}/${DEBUG}/lib/.libs/uv_a.a)
IOSSIM_RELEASE_LIB(${UV}/${OS}/${RELEASE}/lib/.libs/uv_a.a)
## LINUX_DEBUG_LIB(${UV}/${OS}/Debug/uv_a.a)
## LINUX_RELEASE_LIB(${UV}/${OS}/Release/uv_a.a)
## ANDROID_DEBUG_LIB(${UV}/${OS}/Debug/obj/local/armeabi-v7a/uv_a.a)
## ANDROID_RELEASE_LIB(${UV}/${OS}/Release/obj/local/armeabi-v7a/uv_a.a)


### COMPILE ###
DKSETPATH(${UV}/${OS})
WIN32_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A Win32 "-DCMAKE_C_FLAGS=/DTEST /DWIN32 /D_WINDOWS /W3 /nologo" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" ${UV})
WIN32_VS_DEBUG(${UV_VERSION} libuv.sln uv_a)
WIN32_VS_RELEASE(${UV_VERSION} libuv.sln uv_a)

DKSETPATH(${UV}/${OS})
WIN64_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A x64 "-DCMAKE_C_FLAGS=/DWIN32 /D_WINDOWS /W3 /nologo" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" ${UV})
WIN64_VS_DEBUG(${UV_VERSION} libuv.sln uv_a)
WIN64_VS_RELEASE(${UV_VERSION} libuv.sln uv_a)

DKSETPATH(${UV}/${OS})
MAC64_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_OSX_ARCHITECTURES=x86_64 ${UV})
MAC64_XCODE_DEBUG(${UV_VERSION} libuv)
MAC64_XCODE_RELEASE(${UV_VERSION} libuv)

DKSETPATH(${UV}/${OS})
IOS_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=OS ${UV})
IOS_XCODE_DEBUG(${UV_VERSION} libuv)
IOS_XCODE_RELEASE(${UV_VERSION} libuv)

DKSETPATH(${UV}/${OS})
IOSSIM_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=SIMULATOR ${UV})
IOSSIM_XCODE_DEBUG(${UV_VERSION} libuv)
IOSSIM_XCODE_RELEASE(${UV_VERSION} libuv)

## DKSETPATH(${UV}/${OS}/${DEBUG})
## LINUX_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG -DCMAKE_C_FLAGS=-fPIC ${UV})
## LINUX_DEBUG_COMMAND(make uv)

## DKSETPATH(${UV}/${OS}/${RELEASE})
## LINUX_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_C_FLAGS=-fPIC ${UV})
## LINUX_RELEASE_COMMAND(make uv)

## ANDROID_NDK_DEBUG(${UV_VERSION})
## ANDROID_NDK_RELEASE(${UV_VERSION})