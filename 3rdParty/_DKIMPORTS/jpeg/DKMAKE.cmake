### VERSION ###
DKSET(JPEG_VERSION 6b)
DKSET(JPEG ${3RDPARTY}/jpeg-${JPEG_VERSION})



### INSTALL ###
## https://www.sac.sk/download/graph/jpegsr6b.zip
DKINSTALL(https://www.sac.sk/download/graph/jpegsr${JPEG_VERSION}.zip jpeg jpeg-${JPEG_VERSION})



### LINK ###
DKINCLUDE(${JPEG})
DKINCLUDE(${JPEG}/${OS})
DKINCLUDE(${JPEG}/${OS}/${RELEASE_DIR})
ANDROID_INCLUDE(${JPEG}/${OS}/$(BUILD_TYPE)/jni)
WIN_DEBUG_LIB(${JPEG}/${OS}/${DEBUG_DIR}/jpeg-static.lib)
WIN_RELEASE_LIB(${JPEG}/${OS}/${RELEASE_DIR}/jpeg-static.lib)
APPLE_DEBUG_LIB(${JPEG}/${OS}/${DEBUG_DIR}/libjpeg-static.a)
APPLE_RELEASE_LIB(${JPEG}/${OS}/${RELEASE_DIR}/libjpeg-static.a)
LINUX_DEBUG_LIB(${JPEG}/${OS}/${DEBUG_DIR}/libjpeg-static.a)
LINUX_RELEASE_LIB(${JPEG}/${OS}/${RELEASE_DIR}/libjpeg-static.a)
ANDROID_DEBUG_LIB(${JPEG}/${OS}/${DEBUG_DIR}/obj/local/armeabi-v7a/libjpeg.a)
ANDROID_RELEASE_LIB(${JPEG}/${OS}/${RELEASE_DIR}/obj/local/armeabi-v7a/libjpeg.a)



### 3RDPARTY LINK ###
DKSET(JPEG_WIN -DJPEG_INCLUDE_DIR=${JPEG} -DJPEG_INCLUDE_DIR2=${JPEG}/${OS} -DJPEG_LIBRARY=${JPEG}/${OS}/${RELEASE_DIR}/jpeg-static.lib)
DKSET(JPEG_APPLE -DJPEG_INCLUDE_DIR=${JPEG} -DJPEG_INCLUDE_DIR2=${JPEG}/${OS} -DJPEG_LIBRARY=${JPEG}/${OS}/${RELEASE_DIR}/libjpeg-static.a)
DKSET(JPEG_LINUX -DJPEG_INCLUDE_DIR=${JPEG} -DJPEG_INCLUDE_DIR2=${JPEG}/${OS} -DJPEG_LIBRARY=${JPEG}/${OS}/${RELEASE_DIR}/libjpeg-static.a)
DKSET(JPEG_RASPBERRY -DJPEG_INCLUDE_DIR=${JPEG} -DJPEG_INCLUDE_DIR2=${JPEG}/${OS} -DJPEG_LIBRARY=${JPEG}/${OS}/${RELEASE_DIR}/libjpeg-static.a)



### COMPILE ###
WIN_PATH(${JPEG}/${OS})
WIN32_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A Win32 "-DCMAKE_C_FLAGS=/DWIN32 /D_WINDOWS /W3 /nologo" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" ${JPEG})
WIN64_COMMAND(${CMAKE_COMMAND} -G ${GENERATOR} -A x64 "-DCMAKE_C_FLAGS=/DWIN32 /DWIN64 /D_WINDOWS /W3 /nologo" "-DCMAKE_C_FLAGS_DEBUG=/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG" "-DCMAKE_C_FLAGS_RELEASE=/MT /O2 /Ob2 /DNDEBUG" ${JPEG})
WIN_VS(jpeg-${JPEG_VERSION} jpeg.sln jpeg-static)


MAC_PATH(${JPEG}/${OS})
MAC64_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_OSX_ARCHITECTURES=x86_64 ${JPEG})
MAC_XCODE_DEBUG(jpeg-${JPEG_VERSION} jpeg-static)
MAC_XCODE_RELEASE(jpeg-${JPEG_VERSION} jpeg-static)


IOS_PATH(${JPEG}/${OS})
IOS_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=OS ${JPEG})
IOS_XCODE_DEBUG(jpeg-${JPEG_VERSION} jpeg-static)
IOS_XCODE_RELEASE(jpeg-${JPEG_VERSION} jpeg-static)


IOSSIM_PATH(${JPEG}/${OS})
IOSSIM64_COMMAND(${CMAKE_COMMAND} -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/iOS.cmake -DIOS_PLATFORM=SIMULATOR64 ${JPEG})
IOSSIM_XCODE_DEBUG(jpeg-${JPEG_VERSION} jpeg-static)
IOSSIM_XCODE_RELEASE(jpeg-${JPEG_VERSION} jpeg-static)


LINUX_DEBUG_PATH(${JPEG}/${OS}/${DEBUG_DIR})
LINUX_DEBUG_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=DEBUG ${JPEG})
LINUX_DEBUG_COMMAND(make jpeg-static)

LINUX_RELEASE_PATH(${JPEG}/${OS}/${RELEASE_DIR})
LINUX_RELEASE_COMMAND(${CMAKE_COMMAND} -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE ${JPEG})
LINUX_RELEASE_COMMAND(make jpeg-static)


ANDROID_NDK_DEBUG(jpeg-${JPEG_VERSION})
ANDROID_NDK_RELEASE(jpeg-${JPEG_VERSION})