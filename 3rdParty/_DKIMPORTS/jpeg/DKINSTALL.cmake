#!/usr/bin/cmake -P
if(NOT EXISTS "$ENV{DKCMAKE_FUNCTIONS_DIR_}")
	set(ENV{DKCMAKE_FUNCTIONS_DIR_} "../../../DKCMake/functions/")
endif()
include("$ENV{DKCMAKE_FUNCTIONS_DIR_}DK.cmake")


############ jpeg ############
# http://www.ijg.org/
# https://www.ijg.org/files/jpegsr9d.zip
#
dk_load(dk_builder)



### IMPORT ###
dk_import(https://www.ijg.org/files/jpegsr9d.zip)


### LINK ###
dk_include			(${JPEG}										JPEG_INCLUDE_DIR)
dk_include			(${JPEG}/${Target_Tuple}									JPEG_INCLUDE_DIR2)
dk_include			(${JPEG_RELEASE_DIR})
ANDROID_dk_include	(${JPEG}/${Target_Tuple}/${Target_Type}/jni)
UNIX_dk_libDebug	(${JPEG_DEBUG_DIR}/libjpeg-static.a	JPEG_LIBRARY_DEBUG)
UNIX_dk_libRelease	(${JPEG_RELEASE_DIR}/libjpeg-static.a	JPEG_LIBRARY_RELEASE)
Windows_dk_libDebug		(${JPEG_DEBUG_DIR}/jpeg-static.lib		JPEG_LIBRARY_DEBUG)
Windows_dk_libRelease	(${JPEG_RELEASE_DIR}/jpeg-static.lib	JPEG_LIBRARY_RELEASE)


### 3RDPARTY LINK ###
ANDROID_dk_set		(JPEG_CMAKE -DJPEG_INCLUDE_DIR=${JPEG_INCLUDE_DIR} -DJPEG_INCLUDE_DIR2=${JPEG_INCLUDE_DIR2} -DJPEG_LIBRARY_DEBUG=${JPEG_LIBRARY_DEBUG} -DJPEG_LIBRARY_RELEASE=${JPEG_LIBRARY_RELEASE})
Apple_dk_set		(JPEG_CMAKE -DJPEG_INCLUDE_DIR=${JPEG_INCLUDE_DIR} -DJPEG_INCLUDE_DIR2=${JPEG_INCLUDE_DIR2} -DJPEG_LIBRARY=${JPEG_LIBRARY_RELEASE})
EMSCRIPTEN_dk_set	(JPEG_CMAKE -DJPEG_INCLUDE_DIR=${JPEG_INCLUDE_DIR} -DJPEG_INCLUDE_DIR2=${JPEG_INCLUDE_DIR2} -DJPEG_LIBRARY=${JPEG_LIBRARY_RELEASE})
LINUX_dk_set		(JPEG_CMAKE -DJPEG_INCLUDE_DIR=${JPEG_INCLUDE_DIR} -DJPEG_INCLUDE_DIR2=${JPEG_INCLUDE_DIR2} -DJPEG_LIBRARY=${JPEG_LIBRARY_RELEASE})
RASPBERRY_dk_set	(JPEG_CMAKE -DJPEG_INCLUDE_DIR=${JPEG_INCLUDE_DIR} -DJPEG_INCLUDE_DIR2=${JPEG_INCLUDE_DIR2} -DJPEG_LIBRARY=${JPEG_LIBRARY_RELEASE})
Windows_dk_set			(JPEG_CMAKE -DJPEG_INCLUDE_DIR=${JPEG_INCLUDE_DIR} -DJPEG_INCLUDE_DIR2=${JPEG_INCLUDE_DIR2} -DJPEG_LIBRARY_DEBUG=${JPEG_LIBRARY_DEBUG} -DJPEG_LIBRARY_RELEASE=${JPEG_LIBRARY_RELEASE})


### GENERATE ###
dk_configure		(${JPEG_DIR})


### COMPILE ###
dk_build			(${JPEG_DIR} jpeg-static)
