#!/bin/sh
#echo "$0($*)"
#[ -n "$include_dk_printVar" ] && exit || export readonly include_dk_printVar=1
[ -z "$DKINIT" ] && . ./DK


##################################################################################
# dk_printVar(<variable>)
#
#
dk_printVar() {
	dk_debugFunc
	[ $# -ne 1 ] && dk_error "dk_printVar($*): incorrect number of arguments"
	
	_name=$1
	exists=0
	
	if [ -n "${!_name+x}" ]; then	# is _name
		# _name is an array variable
		if $(declare -p $_name 2> /dev/null | grep -q '^declare \-a'); then	
			declare -n _array="$_name"
			for ((i=0; i < ${#_array[@]}; i++ )); do 
				#dk_debug "\$$_name:array[$i] = ${_array[$i]}";
				dk_debug "\$$_name[$i] = ${_array[$i]}";
			done
			
		# _name is a variable
		else
			#dk_debug "\$$_name:variable = $(!_name)"
			dk_debug "\$$_name = ${!_name}"
		fi
		exists=1
	fi
	
	# _name is a function
	if [ "$(type -t $_name)" = "function" ]; then
		_value=$(type $_name | sed '1,1d')
		#dk_debug "\$$_name:function = $_value"
		dk_debug "\$$_name = $_value"
		exists=1
	fi
	
	# _name is an alias
	if [ "$(type -t $_name)" = "alias" ]; then
		_value=$(alias $_name)
		_value=${_value#*=}
		#dk_debug "\$$_name:alias = $_value"
		dk_debug "\$$_name = $_value"
		exists=1
	fi
	
	[ $exists -ne 1 ] && dk_debug "\$$_name ${red}is not set${clr}"
}