#!/usr/bin/cmake -P
if(NOT DKCMAKE_FUNCTIONS_DIR_)
	set(DKCMAKE_FUNCTIONS_DIR_ ${CMAKE_SOURCE_DIR}/../../DKCMake/functions/)
endif()
include(${DKCMAKE_FUNCTIONS_DIR_}DK.cmake)

dk_clearCmakeCache()
dk_deleteTempFiles()


############ Application ############
set(APP_NAME "DKCore")
dk_load(dk_builder)

#dk_depend(zlib)   #use for testing
#dk_depend(DK)
#dk_depend(DKDebug)

#dk_generateCmake(${APP_NAME})
dk_validate(DKPLUGINS_DIR "dk_DKPLUGINS_DIR()")

dk_fileWrite(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt	"### This file is generated by DKCMake. Any Changes here, will be overwritten. ### \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt	"cmake_minimum_required(VERSION 3.10) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "include(\${DKCMAKE_FUNCTIONS_DIR}/DK.cmake) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "dk_set(APP_NAME 		${APP_NAME}) \n")	
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "dk_set(DK_PROJECT_DIR \${CMAKE_CURRENT_LIST_DIR}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "dk_depend(zlib)   #use for testing \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "dk_depend(DK) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")	
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "###### ${APP_NAME} ###### \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "project(\${APP_NAME}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "include_directories(\${DK_PROJECT_DIR}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "dk_validate(DKPLUGINS_DIR \"dk_DKPLUGINS_DIR()\") \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "include_directories(\${DKPLUGINS_DIR}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "file(GLOB App_SRC \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	\${DK_PROJECT_DIR}/*.h \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	\${DK_PROJECT_DIR}/*.c \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	\${DK_PROJECT_DIR}/*.hpp \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	\${DK_PROJECT_DIR}/*.cpp) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "list(FILTER App_SRC EXCLUDE REGEX \"${DK_PROJECT_DIR}/assets/*\") \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "dk_validate(triple \"dk_TARGET_TRIPLE()\") \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "list(FILTER App_SRC EXCLUDE REGEX \"${DK_PROJECT_DIR}/${triple}/*\") \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")	
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "####################### Create Executable Target ################### \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	if(HAVE_DK) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "		dk_copy(\${DKPLUGINS_DIR}/_DKIMPORT/win/resource.h \${DK_PROJECT_DIR}/resource.h) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "		dk_copy(\${DKPLUGINS_DIR}/_DKIMPORT/win/resource.rc \${DK_PROJECT_DIR}/resource.rc) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "		file(GLOB_RECURSE resources_SRC \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "			\${DK_PROJECT_DIR}/*.manifest \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "			\${DK_PROJECT_DIR}/*.rc \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "			\${DK_PROJECT_DIR}/icons/windows/*.rc) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "		list(APPEND App_SRC \${resources_SRC}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	endif() \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "if(MSVC) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	add_executable(\${APP_NAME} WIN32 \${App_SRC}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "else() \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	add_executable(\${APP_NAME} \${App_SRC}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "endif() \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")	
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")	
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "########################## Add Dependencies ######################## \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	if(PROJECT_INCLUDE_DKPLUGINS) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "		foreach(plugin \${dkdepend_list}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "			if(EXISTS \"\${DKPLUGINS_DIR}/\${plugin}/CMakeLists.txt\") \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "				add_dependencies(\${APP_NAME} \${plugin}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "			endif() \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "		endforeach() \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	endif() \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")	
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "############# Link Libraries, Set Startup Project ################# \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "if(MULTI_CONFIG) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	target_link_libraries(\${APP_NAME} \${DEBUG_LIBS} \${RELEASE_LIBS} \${LIBS}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "else() \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	if(DEBUG) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "		target_link_libraries(\${APP_NAME} \${DEBUG_LIBS} \${LIBS}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	elseif(RELEASE) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "		target_link_libraries(\${APP_NAME} \${RELEASE_LIBS} \${LIBS}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	endif() \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "endif() \n")
	
	
#dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt "target_link_libraries(\${APP_NAME} dbghelp.lib version.lib winmm.lib ws2_32.lib psapi.lib) \n")





dk_set(CURRENT_PLUGIN ${APP_NAME})
dk_set(${CURRENT_PLUGIN} ${CMAKE_SOURCE_DIR})
dk_set(${CURRENT_PLUGIN}_CONFIG_DIR ${CMAKE_SOURCE_DIR}/${CONFIG_PATH})
dk_printVar(${CURRENT_PLUGIN}_CONFIG_DIR)
dk_configure(${CMAKE_CURRENT_LIST_DIR} -DDKCMAKE_FUNCTIONS_DIR=${DKCMAKE_FUNCTIONS_DIR} -DTRIPLE=${TRIPLE})
dk_build(${CMAKE_CURRENT_LIST_DIR})
