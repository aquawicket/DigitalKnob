include(${DKCMAKE_FUNCTIONS_DIR}/DK.cmake)
# NOTE: HelloWorld requires no DK libs

set(APP_NAME "HelloWorld")

#dk_generateCmake(${APP_NAME})
dk_fileWrite(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt   "### This file is generated by DKCMake. Any Changes here, will be overwritten. ###\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "### ${APP_NAME} ###\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "cmake_minimum_required(VERSION 3.10)\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "cmake_policy(SET CMP0054 NEW)\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "include(${DKCMAKE_FUNCTIONS_DIR}/DK.cmake)\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "project(${APP_NAME})\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "include_directories(${CMAKE_CURRENT_LIST_DIR})\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "include_directories(${DKPLUGINS_DIR})\n")
	
## DEBUG ##
#dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "find_library(libcefD libcef.lib ${CEF_BINARY}/${DEBUG_DIR})\n")
#dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "list(APPEND CEF_BINARY_DEBUG_DKLIBS debug \${libcefD})\n")

## RELEASE ##
#dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "find_library(libcefR libcef.lib ${CEF_BINARY}/${RELEASE_DIR})\n")
#dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "list(APPEND CEF_BINARY_RELEASE_DKLIBS optimized \${libcefR})\n")


dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "file(GLOB ${APP_NAME}_SRC ${CMAKE_CURRENT_LIST_DIR}/*.cpp ${CMAKE_CURRENT_LIST_DIR}/*.manifest)\n")	
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "if(WIN_X86)\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	add_executable(${APP_NAME} WIN32 \${APP_NAME}_SRC)\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "endif()\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "if(WIN_X86_64)\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	add_executable(${APP_NAME} WIN64 \${APP_NAME}_SRC)\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "endif()\n")

#dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt "target_link_libraries(${APP_NAME} \${CEF_BINARY_DEBUG_DKLIBS} \${CEF_BINARY_RELEASE_DKLIBS} dbghelp.lib version.lib winmm.lib ws2_32.lib psapi.lib)\n")
#dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt "set_target_properties(${APP_NAME} PROPERTIES LINK_FLAGS_DEBUG \"/MANIFESTUAC:NO /SUBSYSTEM:CONSOLE /SAFESEH:NO\" LINK_FLAGS_RELEASE \"/INCREMENTAL:NO /OPT:NOREF /MANIFESTUAC:NO /SUBSYSTEM:CONSOLE /FORCE /SAFESEH:NO\")\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt "target_link_libraries(${APP_NAME} dbghelp.lib version.lib winmm.lib ws2_32.lib psapi.lib)\n")
#dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt "set_target_properties(${APP_NAME} PROPERTIES LINK_FLAGS_DEBUG \"/MANIFESTUAC:NO /SUBSYSTEM:CONSOLE /SAFESEH:NO\" LINK_FLAGS_RELEASE \"/INCREMENTAL:NO /OPT:NOREF /MANIFESTUAC:NO /SUBSYSTEM:CONSOLE /FORCE /SAFESEH:NO\")\n")

dk_build(${CMAKE_CURRENT_LIST_DIR})
