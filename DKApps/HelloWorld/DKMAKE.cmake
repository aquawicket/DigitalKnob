#!/usr/bin/cmake -P
include(${DKCMAKE_FUNCTIONS_DIR_}DK.cmake)
dk_load(dk_builder)

return()
# NOTE: HelloWorld requires no DK libs
dk_validate(host_triple "dk_host_triple()")
dk_validate(TRIPLE "dk_TARGET_TRIPLE()")


set(APP_NAME "HelloWorld")

#dk_generateCmake(${APP_NAME})
dk_fileWrite(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt   "include(\${DKCMAKE_FUNCTIONS_DIR}/DK.cmake) \n\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt   "### This file is generated by DKCMake. Any Changes here, will be overwritten. ### \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "### ${APP_NAME} ### \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "cmake_minimum_required(VERSION 3.10) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "cmake_policy(SET CMP0054 NEW) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "project(${APP_NAME}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "include_directories(${CMAKE_CURRENT_LIST_DIR}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "include_directories(${DKPLUGINS_DIR}) \n")
	
## DEBUG ##
#dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "find_library(libcefD libcef.lib ${CEF_BINARY}/${DEBUG_DIR})\n")
#dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "list(APPEND CEF_BINARY_DEBUG_DKLIBS debug \${libcefD})\n")

## RELEASE ##
#dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "find_library(libcefR libcef.lib ${CEF_BINARY}/${RELEASE_DIR})\n")
#dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "list(APPEND CEF_BINARY_RELEASE_DKLIBS optimized \${libcefR})\n")


dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "file(GLOB App_SRC \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	${DK_PROJECT_DIR}/*.h \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	${DK_PROJECT_DIR}/*.c \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	${DK_PROJECT_DIR}/*.hpp \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	${DK_PROJECT_DIR}/*.cpp) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "list(FILTER App_SRC EXCLUDE REGEX \"${DK_PROJECT_DIR}/assets/*\") \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "list(FILTER App_SRC EXCLUDE REGEX \"${DK_PROJECT_DIR}/${triple}/*\") \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "if(WIN AND MSVC AND X86) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	add_executable(${APP_NAME} WIN32 ${App_SRC}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "elseif(WIN AND MSVC AND X86_64) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	add_executable(${APP_NAME} WIN64 ${App_SRC}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "endif() \n")


#dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt "target_link_libraries(${APP_NAME} \${CEF_BINARY_DEBUG_DKLIBS} \${CEF_BINARY_RELEASE_DKLIBS} dbghelp.lib version.lib winmm.lib ws2_32.lib psapi.lib)\n")
#dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt "set_target_properties(${APP_NAME} PROPERTIES LINK_FLAGS_DEBUG \"/MANIFESTUAC:NO /SUBSYSTEM:CONSOLE /SAFESEH:NO\" LINK_FLAGS_RELEASE \"/INCREMENTAL:NO /OPT:NOREF /MANIFESTUAC:NO /SUBSYSTEM:CONSOLE /FORCE /SAFESEH:NO\")\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt "target_link_libraries(${APP_NAME} dbghelp.lib version.lib winmm.lib ws2_32.lib psapi.lib) \n")
#dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt "set_target_properties(${APP_NAME} PROPERTIES LINK_FLAGS_DEBUG \"/MANIFESTUAC:NO /SUBSYSTEM:CONSOLE /SAFESEH:NO\" LINK_FLAGS_RELEASE \"/INCREMENTAL:NO /OPT:NOREF /MANIFESTUAC:NO /SUBSYSTEM:CONSOLE /FORCE /SAFESEH:NO\")\n")

dk_clearCmakeCache()
dk_deleteTempFiles()
dk_configure(${CMAKE_CURRENT_LIST_DIR} -DDKCMAKE_FUNCTIONS_DIR=${DKCMAKE_FUNCTIONS_DIR} -DTRIPLE=${TRIPLE})
