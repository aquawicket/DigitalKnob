#pragma once
#ifndef DKKEYCODES_H
#define DKKEYCODES_H

// https://www.w3.org/TR/uievents-key/
// https://code.woboq.org/qt5/qtbase/src/corelib/global/qnamespace.h.html




// https://www.w3.org/TR/uievents-key/
//  *****  select an appropriate key attribute value  *****
inline bool Input(KeyboardEvent event) {

    //To select an appropriate key attribute value to store in a KeyboardEvent's key attribute, run these steps:
    // 1. Let key be a DOMString initially set to "Unidentified".
    event.key = "undefined";

    // 2. If there exists an appropriate named key attribute value for this key event, then
    if (GetNamedAttribute(event.keycode)) {
        // 1. Set key to that named key attribute value.
        event.key = GetNamedAttribute(event.keycode);
    }
    // 3. Else, if the key event generates a valid key string, then
    else if (GetKeyString(event.keycode)) { 
        // 1. Set key to that key string value.
        event.key = GetKeyString(event.keycode);
    }
    // 4. Else, if the key event has any modifier keys other than glyph modifier keys, then
    else { 
        //Set key to the key string that would have been generated by this event if it had been typed with all modifer keys removed...
        // except for glyph modifier keys.
        event.key = GetUnalteredKeyString(event.keycode);
    }
    //Return key as the key attribute value for this key event.
    return event.key; 
}

bool GetNamedAttribute(unsigned int keycode) {
    //Translator here .keycode to .key  
}

bool GetKeyString(unsigned int keycode) {
    //Translator here .keycode to .key  
}

bool GetUnalteredKeyString(unsigned int keycode) {
    //Translator here .keycode to .key 
}


enum DK_KeyModifier {
        NoModifier           = 0x00000000,
        ShiftModifier        = 0x02000000,
        ControlModifier      = 0x04000000,
        AltModifier          = 0x08000000,
        MetaModifier         = 0x10000000,
        KeypadModifier       = 0x20000000,
        GroupSwitchModifier  = 0x40000000,
        // Do not extend the mask to include 0x01000000
        KeyboardModifierMask = 0xfe000000
};

 //shorter names for shortcuts
    // The use of all-caps identifiers has the potential for clashing with
    // user-defined or third-party macros. More so when the identifiers are not
    // "namespace"-prefixed. This is considered bad practice and is why
    // KeypadModifier was not added to the Modifier enum.
	// https://code.woboq.org/qt5/qtbase/src/corelib/global/qnamespace.h.html
enum DK_Modifier {
        META          = MetaModifier,
        SHIFT         = ShiftModifier,
        CTRL          = ControlModifier,
        ALT           = AltModifier,
        MODIFIER_MASK = KeyboardModifierMask,
        UNICODE_ACCEL = 0x00000000
};

// https://code.woboq.org/qt5/qtbase/src/corelib/global/qnamespace.h.html
enum DK_Key {
        Key_Escape = 0x01000000,                // misc keys
        Key_Tab = 0x01000001,
        Key_Backtab = 0x01000002,
        Key_Backspace = 0x01000003,
        Key_Return = 0x01000004,
        Key_Enter = 0x01000005,
        Key_Insert = 0x01000006,
        Key_Delete = 0x01000007,
        Key_Pause = 0x01000008,
        Key_Print = 0x01000009,               // print screen
        Key_SysReq = 0x0100000a,
        Key_Clear = 0x0100000b,
        Key_Home = 0x01000010,                // cursor movement
        Key_End = 0x01000011,
        Key_Left = 0x01000012,
        Key_Up = 0x01000013,
        Key_Right = 0x01000014,
        Key_Down = 0x01000015,
        Key_PageUp = 0x01000016,
        Key_PageDown = 0x01000017,
        Key_Shift = 0x01000020,                // modifiers
        Key_Control = 0x01000021,
        Key_Meta = 0x01000022,
        Key_Alt = 0x01000023,
        Key_CapsLock = 0x01000024,
        Key_NumLock = 0x01000025,
        Key_ScrollLock = 0x01000026,
        Key_F1 = 0x01000030,                // function keys
        Key_F2 = 0x01000031,
        Key_F3 = 0x01000032,
        Key_F4 = 0x01000033,
        Key_F5 = 0x01000034,
        Key_F6 = 0x01000035,
        Key_F7 = 0x01000036,
        Key_F8 = 0x01000037,
        Key_F9 = 0x01000038,
        Key_F10 = 0x01000039,
        Key_F11 = 0x0100003a,
        Key_F12 = 0x0100003b,
        Key_F13 = 0x0100003c,
        Key_F14 = 0x0100003d,
        Key_F15 = 0x0100003e,
        Key_F16 = 0x0100003f,
        Key_F17 = 0x01000040,
        Key_F18 = 0x01000041,
        Key_F19 = 0x01000042,
        Key_F20 = 0x01000043,
        Key_F21 = 0x01000044,
        Key_F22 = 0x01000045,
        Key_F23 = 0x01000046,
        Key_F24 = 0x01000047,
        Key_F25 = 0x01000048,                // F25 .. F35 only on X11
        Key_F26 = 0x01000049,
        Key_F27 = 0x0100004a,
        Key_F28 = 0x0100004b,
        Key_F29 = 0x0100004c,
        Key_F30 = 0x0100004d,
        Key_F31 = 0x0100004e,
        Key_F32 = 0x0100004f,
        Key_F33 = 0x01000050,
        Key_F34 = 0x01000051,
        Key_F35 = 0x01000052,
        Key_Super_L = 0x01000053,                 // extra keys
        Key_Super_R = 0x01000054,
        Key_Menu = 0x01000055,
        Key_Hyper_L = 0x01000056,
        Key_Hyper_R = 0x01000057,
        Key_Help = 0x01000058,
        Key_Direction_L = 0x01000059,
        Key_Direction_R = 0x01000060,
        Key_Space = 0x20,                // 7 bit printable ASCII
        Key_Any = Key_Space,
        Key_Exclam = 0x21,
        Key_QuoteDbl = 0x22,
        Key_NumberSign = 0x23,
        Key_Dollar = 0x24,
        Key_Percent = 0x25,
        Key_Ampersand = 0x26,
        Key_Apostrophe = 0x27,
        Key_ParenLeft = 0x28,
        Key_ParenRight = 0x29,
        Key_Asterisk = 0x2a,
        Key_Plus = 0x2b,
        Key_Comma = 0x2c,
        Key_Minus = 0x2d,
        Key_Period = 0x2e,
        Key_Slash = 0x2f,
        Key_0 = 0x30,
        Key_1 = 0x31,
        Key_2 = 0x32,
        Key_3 = 0x33,
        Key_4 = 0x34,
        Key_5 = 0x35,
        Key_6 = 0x36,
        Key_7 = 0x37,
        Key_8 = 0x38,
        Key_9 = 0x39,
        Key_Colon = 0x3a,
        Key_Semicolon = 0x3b,
        Key_Less = 0x3c,
        Key_Equal = 0x3d,
        Key_Greater = 0x3e,
        Key_Question = 0x3f,
        Key_At = 0x40,
        Key_A = 0x41,
        Key_B = 0x42,
        Key_C = 0x43,
        Key_D = 0x44,
        Key_E = 0x45,
        Key_F = 0x46,
        Key_G = 0x47,
        Key_H = 0x48,
        Key_I = 0x49,
        Key_J = 0x4a,
        Key_K = 0x4b,
        Key_L = 0x4c,
        Key_M = 0x4d,
        Key_N = 0x4e,
        Key_O = 0x4f,
        Key_P = 0x50,
        Key_Q = 0x51,
        Key_R = 0x52,
        Key_S = 0x53,
        Key_T = 0x54,
        Key_U = 0x55,
        Key_V = 0x56,
        Key_W = 0x57,
        Key_X = 0x58,
        Key_Y = 0x59,
        Key_Z = 0x5a,
        Key_BracketLeft = 0x5b,
        Key_Backslash = 0x5c,
        Key_BracketRight = 0x5d,
        Key_AsciiCircum = 0x5e,
        Key_Underscore = 0x5f,
        Key_QuoteLeft = 0x60,
        Key_BraceLeft = 0x7b,
        Key_Bar = 0x7c,
        Key_BraceRight = 0x7d,
        Key_AsciiTilde = 0x7e,
        Key_nobreakspace = 0x0a0,
        Key_exclamdown = 0x0a1,
        Key_cent = 0x0a2,
        Key_sterling = 0x0a3,
        Key_currency = 0x0a4,
        Key_yen = 0x0a5,
        Key_brokenbar = 0x0a6,
        Key_section = 0x0a7,
        Key_diaeresis = 0x0a8,
        Key_copyright = 0x0a9,
        Key_ordfeminine = 0x0aa,
        Key_guillemotleft = 0x0ab,        // left angle quotation mark
        Key_notsign = 0x0ac,
        Key_hyphen = 0x0ad,
        Key_registered = 0x0ae,
        Key_macron = 0x0af,
        Key_degree = 0x0b0,
        Key_plusminus = 0x0b1,
        Key_twosuperior = 0x0b2,
        Key_threesuperior = 0x0b3,
        Key_acute = 0x0b4,
        Key_mu = 0x0b5,
        Key_paragraph = 0x0b6,
        Key_periodcentered = 0x0b7,
        Key_cedilla = 0x0b8,
        Key_onesuperior = 0x0b9,
        Key_masculine = 0x0ba,
        Key_guillemotright = 0x0bb,        // right angle quotation mark
        Key_onequarter = 0x0bc,
        Key_onehalf = 0x0bd,
        Key_threequarters = 0x0be,
        Key_questiondown = 0x0bf,
        Key_Agrave = 0x0c0,
        Key_Aacute = 0x0c1,
        Key_Acircumflex = 0x0c2,
        Key_Atilde = 0x0c3,
        Key_Adiaeresis = 0x0c4,
        Key_Aring = 0x0c5,
        Key_AE = 0x0c6,
        Key_Ccedilla = 0x0c7,
        Key_Egrave = 0x0c8,
        Key_Eacute = 0x0c9,
        Key_Ecircumflex = 0x0ca,
        Key_Ediaeresis = 0x0cb,
        Key_Igrave = 0x0cc,
        Key_Iacute = 0x0cd,
        Key_Icircumflex = 0x0ce,
        Key_Idiaeresis = 0x0cf,
        Key_ETH = 0x0d0,
        Key_Ntilde = 0x0d1,
        Key_Ograve = 0x0d2,
        Key_Oacute = 0x0d3,
        Key_Ocircumflex = 0x0d4,
        Key_Otilde = 0x0d5,
        Key_Odiaeresis = 0x0d6,
        Key_multiply = 0x0d7,
        Key_Ooblique = 0x0d8,
        Key_Ugrave = 0x0d9,
        Key_Uacute = 0x0da,
        Key_Ucircumflex = 0x0db,
        Key_Udiaeresis = 0x0dc,
        Key_Yacute = 0x0dd,
        Key_THORN = 0x0de,
        Key_ssharp = 0x0df,
        Key_division = 0x0f7,
        Key_ydiaeresis = 0x0ff,
        // International input method support (X keycode - 0xEE00, the
        // definition follows Qt/Embedded 2.3.7) Only interesting if
        // you are writing your own input method
        // International & multi-key character composition
        Key_AltGr               = 0x01001103,
        Key_Multi_key           = 0x01001120,  // Multi-key character compose
        Key_Codeinput           = 0x01001137,
        Key_SingleCandidate     = 0x0100113c,
        Key_MultipleCandidate   = 0x0100113d,
        Key_PreviousCandidate   = 0x0100113e,
        // Misc Functions
        Key_Mode_switch         = 0x0100117e,  // Character set switch
        //Key_script_switch       = 0x0100117e,  // Alias for mode_switch
        // Japanese keyboard support
        Key_Kanji               = 0x01001121,  // Kanji, Kanji convert
        Key_Muhenkan            = 0x01001122,  // Cancel Conversion
        //Key_Henkan_Mode         = 0x01001123,  // Start/Stop Conversion
        Key_Henkan              = 0x01001123,  // Alias for Henkan_Mode
        Key_Romaji              = 0x01001124,  // to Romaji
        Key_Hiragana            = 0x01001125,  // to Hiragana
        Key_Katakana            = 0x01001126,  // to Katakana
        Key_Hiragana_Katakana   = 0x01001127,  // Hiragana/Katakana toggle
        Key_Zenkaku             = 0x01001128,  // to Zenkaku
        Key_Hankaku             = 0x01001129,  // to Hankaku
        Key_Zenkaku_Hankaku     = 0x0100112a,  // Zenkaku/Hankaku toggle
        Key_Touroku             = 0x0100112b,  // Add to Dictionary
        Key_Massyo              = 0x0100112c,  // Delete from Dictionary
        Key_Kana_Lock           = 0x0100112d,  // Kana Lock
        Key_Kana_Shift          = 0x0100112e,  // Kana Shift
        Key_Eisu_Shift          = 0x0100112f,  // Alphanumeric Shift
        Key_Eisu_toggle         = 0x01001130,  // Alphanumeric toggle
        //Key_Kanji_Bangou        = 0x01001137,  // Codeinput
        //Key_Zen_Koho            = 0x0100113d,  // Multiple/All Candidate(s)
        //Key_Mae_Koho            = 0x0100113e,  // Previous Candidate
        // Korean keyboard support
        //
        // In fact, many Korean users need only 2 keys, Key_Hangul and
        // Key_Hangul_Hanja. But rest of the keys are good for future.
        Key_Hangul              = 0x01001131,  // Hangul start/stop(toggle)
        Key_Hangul_Start        = 0x01001132,  // Hangul start
        Key_Hangul_End          = 0x01001133,  // Hangul end, English start
        Key_Hangul_Hanja        = 0x01001134,  // Start Hangul->Hanja Conversion
        Key_Hangul_Jamo         = 0x01001135,  // Hangul Jamo mode
        Key_Hangul_Romaja       = 0x01001136,  // Hangul Romaja mode
        //Key_Hangul_Codeinput    = 0x01001137,  // Hangul code input mode
        Key_Hangul_Jeonja       = 0x01001138,  // Jeonja mode
        Key_Hangul_Banja        = 0x01001139,  // Banja mode
        Key_Hangul_PreHanja     = 0x0100113a,  // Pre Hanja conversion
        Key_Hangul_PostHanja    = 0x0100113b,  // Post Hanja conversion
        //Key_Hangul_SingleCandidate   = 0x0100113c,  // Single candidate
        //Key_Hangul_MultipleCandidate = 0x0100113d,  // Multiple candidate
        //Key_Hangul_PreviousCandidate = 0x0100113e,  // Previous candidate
        Key_Hangul_Special      = 0x0100113f,  // Special symbols
        //Key_Hangul_switch       = 0x0100117e,  // Alias for mode_switch
        // dead keys (X keycode - 0xED00 to avoid the conflict)
        Key_Dead_Grave          = 0x01001250,
        Key_Dead_Acute          = 0x01001251,
        Key_Dead_Circumflex     = 0x01001252,
        Key_Dead_Tilde          = 0x01001253,
        Key_Dead_Macron         = 0x01001254,
        Key_Dead_Breve          = 0x01001255,
        Key_Dead_Abovedot       = 0x01001256,
        Key_Dead_Diaeresis      = 0x01001257,
        Key_Dead_Abovering      = 0x01001258,
        Key_Dead_Doubleacute    = 0x01001259,
        Key_Dead_Caron          = 0x0100125a,
        Key_Dead_Cedilla        = 0x0100125b,
        Key_Dead_Ogonek         = 0x0100125c,
        Key_Dead_Iota           = 0x0100125d,
        Key_Dead_Voiced_Sound   = 0x0100125e,
        Key_Dead_Semivoiced_Sound = 0x0100125f,
        Key_Dead_Belowdot       = 0x01001260,
        Key_Dead_Hook           = 0x01001261,
        Key_Dead_Horn           = 0x01001262,
        Key_Dead_Stroke         = 0x01001263,
        Key_Dead_Abovecomma     = 0x01001264,
        Key_Dead_Abovereversedcomma = 0x01001265,
        Key_Dead_Doublegrave    = 0x01001266,
        Key_Dead_Belowring      = 0x01001267,
        Key_Dead_Belowmacron    = 0x01001268,
        Key_Dead_Belowcircumflex = 0x01001269,
        Key_Dead_Belowtilde     = 0x0100126a,
        Key_Dead_Belowbreve     = 0x0100126b,
        Key_Dead_Belowdiaeresis = 0x0100126c,
        Key_Dead_Invertedbreve  = 0x0100126d,
        Key_Dead_Belowcomma     = 0x0100126e,
        Key_Dead_Currency       = 0x0100126f,
        Key_Dead_a              = 0x01001280,
        Key_Dead_A              = 0x01001281,
        Key_Dead_e              = 0x01001282,
        Key_Dead_E              = 0x01001283,
        Key_Dead_i              = 0x01001284,
        Key_Dead_I              = 0x01001285,
        Key_Dead_o              = 0x01001286,
        Key_Dead_O              = 0x01001287,
        Key_Dead_u              = 0x01001288,
        Key_Dead_U              = 0x01001289,
        Key_Dead_Small_Schwa    = 0x0100128a,
        Key_Dead_Capital_Schwa  = 0x0100128b,
        Key_Dead_Greek          = 0x0100128c,
        Key_Dead_Lowline        = 0x01001290,
        Key_Dead_Aboveverticalline = 0x01001291,
        Key_Dead_Belowverticalline = 0x01001292,
        Key_Dead_Longsolidusoverlay = 0x01001293,
        // multimedia/internet keys - ignored by default - see QKeyEvent c'tor
        Key_Back  = 0x01000061,
        Key_Forward  = 0x01000062,
        Key_Stop  = 0x01000063,
        Key_Refresh  = 0x01000064,
        Key_VolumeDown = 0x01000070,
        Key_VolumeMute  = 0x01000071,
        Key_VolumeUp = 0x01000072,
        Key_BassBoost = 0x01000073,
        Key_BassUp = 0x01000074,
        Key_BassDown = 0x01000075,
        Key_TrebleUp = 0x01000076,
        Key_TrebleDown = 0x01000077,
        Key_MediaPlay  = 0x01000080,
        Key_MediaStop  = 0x01000081,
        Key_MediaPrevious  = 0x01000082,
        Key_MediaNext  = 0x01000083,
        Key_MediaRecord = 0x01000084,
        Key_MediaPause = 0x1000085,
        Key_MediaTogglePlayPause = 0x1000086,
        Key_HomePage  = 0x01000090,
        Key_Favorites  = 0x01000091,
        Key_Search  = 0x01000092,
        Key_Standby = 0x01000093,
        Key_OpenUrl = 0x01000094,
        Key_LaunchMail  = 0x010000a0,
        Key_LaunchMedia = 0x010000a1,
        Key_Launch0  = 0x010000a2,
        Key_Launch1  = 0x010000a3,
        Key_Launch2  = 0x010000a4,
        Key_Launch3  = 0x010000a5,
        Key_Launch4  = 0x010000a6,
        Key_Launch5  = 0x010000a7,
        Key_Launch6  = 0x010000a8,
        Key_Launch7  = 0x010000a9,
        Key_Launch8  = 0x010000aa,
        Key_Launch9  = 0x010000ab,
        Key_LaunchA  = 0x010000ac,
        Key_LaunchB  = 0x010000ad,
        Key_LaunchC  = 0x010000ae,
        Key_LaunchD  = 0x010000af,
        Key_LaunchE  = 0x010000b0,
        Key_LaunchF  = 0x010000b1,
        Key_MonBrightnessUp = 0x010000b2,
        Key_MonBrightnessDown = 0x010000b3,
        Key_KeyboardLightOnOff = 0x010000b4,
        Key_KeyboardBrightnessUp = 0x010000b5,
        Key_KeyboardBrightnessDown = 0x010000b6,
        Key_PowerOff = 0x010000b7,
        Key_WakeUp = 0x010000b8,
        Key_Eject = 0x010000b9,
        Key_ScreenSaver = 0x010000ba,
        Key_WWW = 0x010000bb,
        Key_Memo = 0x010000bc,
        Key_LightBulb = 0x010000bd,
        Key_Shop = 0x010000be,
        Key_History = 0x010000bf,
        Key_AddFavorite = 0x010000c0,
        Key_HotLinks = 0x010000c1,
        Key_BrightnessAdjust = 0x010000c2,
        Key_Finance = 0x010000c3,
        Key_Community = 0x010000c4,
        Key_AudioRewind = 0x010000c5, // Media rewind
        Key_BackForward = 0x010000c6,
        Key_ApplicationLeft = 0x010000c7,
        Key_ApplicationRight = 0x010000c8,
        Key_Book = 0x010000c9,
        Key_CD = 0x010000ca,
        Key_Calculator = 0x010000cb,
        Key_ToDoList = 0x010000cc,
        Key_ClearGrab = 0x010000cd,
        Key_Close = 0x010000ce,
        Key_Copy = 0x010000cf,
        Key_Cut = 0x010000d0,
        Key_Display = 0x010000d1, // Output switch key
        Key_DOS = 0x010000d2,
        Key_Documents = 0x010000d3,
        Key_Excel = 0x010000d4,
        Key_Explorer = 0x010000d5,
        Key_Game = 0x010000d6,
        Key_Go = 0x010000d7,
        Key_iTouch = 0x010000d8,
        Key_LogOff = 0x010000d9,
        Key_Market = 0x010000da,
        Key_Meeting = 0x010000db,
        Key_MenuKB = 0x010000dc,
        Key_MenuPB = 0x010000dd,
        Key_MySites = 0x010000de,
        Key_News = 0x010000df,
        Key_OfficeHome = 0x010000e0,
        Key_Option = 0x010000e1,
        Key_Paste = 0x010000e2,
        Key_Phone = 0x010000e3,
        Key_Calendar = 0x010000e4,
        Key_Reply = 0x010000e5,
        Key_Reload = 0x010000e6,
        Key_RotateWindows = 0x010000e7,
        Key_RotationPB = 0x010000e8,
        Key_RotationKB = 0x010000e9,
        Key_Save = 0x010000ea,
        Key_Send = 0x010000eb,
        Key_Spell = 0x010000ec,
        Key_SplitScreen = 0x010000ed,
        Key_Support = 0x010000ee,
        Key_TaskPane = 0x010000ef,
        Key_Terminal = 0x010000f0,
        Key_Tools = 0x010000f1,
        Key_Travel = 0x010000f2,
        Key_Video = 0x010000f3,
        Key_Word = 0x010000f4,
        Key_Xfer = 0x010000f5,
        Key_ZoomIn = 0x010000f6,
        Key_ZoomOut = 0x010000f7,
        Key_Away = 0x010000f8,
        Key_Messenger = 0x010000f9,
        Key_WebCam = 0x010000fa,
        Key_MailForward = 0x010000fb,
        Key_Pictures = 0x010000fc,
        Key_Music = 0x010000fd,
        Key_Battery = 0x010000fe,
        Key_Bluetooth = 0x010000ff,
        Key_WLAN = 0x01000100,
        Key_UWB = 0x01000101,
        Key_AudioForward = 0x01000102, // Media fast-forward
        Key_AudioRepeat = 0x01000103, // Toggle repeat mode
        Key_AudioRandomPlay = 0x01000104, // Toggle shuffle mode
        Key_Subtitle = 0x01000105,
        Key_AudioCycleTrack = 0x01000106,
        Key_Time = 0x01000107,
        Key_Hibernate = 0x01000108,
        Key_View = 0x01000109,
        Key_TopMenu = 0x0100010a,
        Key_PowerDown = 0x0100010b,
        Key_Suspend = 0x0100010c,
        Key_ContrastAdjust = 0x0100010d,
        Key_LaunchG  = 0x0100010e,
        Key_LaunchH  = 0x0100010f,
        Key_TouchpadToggle = 0x01000110,
        Key_TouchpadOn = 0x01000111,
        Key_TouchpadOff = 0x01000112,
        Key_MicMute = 0x01000113,
        Key_Red = 0x01000114,
        Key_Green = 0x01000115,
        Key_Yellow = 0x01000116,
        Key_Blue = 0x01000117,
        Key_ChannelUp = 0x01000118,
        Key_ChannelDown = 0x01000119,
        Key_Guide    = 0x0100011a,
        Key_Info     = 0x0100011b,
        Key_Settings = 0x0100011c,
        Key_MicVolumeUp   = 0x0100011d,
        Key_MicVolumeDown = 0x0100011e,
        Key_New      = 0x01000120,
        Key_Open     = 0x01000121,
        Key_Find     = 0x01000122,
        Key_Undo     = 0x01000123,
        Key_Redo     = 0x01000124,
        Key_MediaLast = 0x0100ffff,
        // Keypad navigation keys
        Key_Select = 0x01010000,
        Key_Yes = 0x01010001,
        Key_No = 0x01010002,
        // Newer misc keys
        Key_Cancel  = 0x01020001,
        Key_Printer = 0x01020002,
        Key_Execute = 0x01020003,
        Key_Sleep   = 0x01020004,
        Key_Play    = 0x01020005, // Not the same as Key_MediaPlay
        Key_Zoom    = 0x01020006,
        //Key_Jisho   = 0x01020007, // IME: Dictionary key
        //Key_Oyayubi_Left = 0x01020008, // IME: Left Oyayubi key
        //Key_Oyayubi_Right = 0x01020009, // IME: Right Oyayubi key
        Key_Exit    = 0x0102000a,
        // Device keys
        Key_Context1 = 0x01100000,
        Key_Context2 = 0x01100001,
        Key_Context3 = 0x01100002,
        Key_Context4 = 0x01100003,
        Key_Call = 0x01100004,      // set absolute state to in a call (do not toggle state)
        Key_Hangup = 0x01100005,    // set absolute state to hang up (do not toggle state)
        Key_Flip = 0x01100006,
        Key_ToggleCallHangup = 0x01100007, // a toggle key for answering, or hanging up, based on current call state
        Key_VoiceDial = 0x01100008,
        Key_LastNumberRedial = 0x01100009,
        Key_Camera = 0x01100020,
        Key_CameraFocus = 0x01100021,
        Key_unknown = 0x01ffffff
};


// Key recorder ------------------------------------------------------------------------[ start ] --
struct KeyRecord {
    KeyRecord(int c, int a, int s, const DKString &t) : code(c), ascii(a), state(s), text(t) {}
    KeyRecord() {}
    int code;
    int ascii;
    int state;
    DKString text;
};

// We need to record the pressed keys in order to decide, whether the key event is an autorepeat
// event. As soon as its state changes, the chain of autorepeat events will be broken.
static const int DK_MAX_KEY_RECORDINGS = 64; // User has LOTS of fingers...
struct KeyRecorder{
    inline KeyRecord *findKey(int code, bool remove);
    inline void storeKey(int code, int ascii, int state, const DKString& text);
    inline void clearKeys();
    int nrecs = 0;
    KeyRecord deleted_record; // A copy of last entry removed from records[]
    KeyRecord records[DK_MAX_KEY_RECORDINGS];
};
static KeyRecorder key_recorder;

static void clearKeyRecorderOnApplicationInActive(int state){
    if (state == -1)
        key_recorder.clearKeys();
}

KeyRecord *KeyRecorder::findKey(int code, bool remove){
    KeyRecord *result = nullptr;
    for (int i = 0; i < nrecs; ++i) {
        if (records[i].code == code) {
            if (remove) {
                deleted_record = records[i];
                // Move rest down, and decrease count
                while (i + 1 < nrecs) {
                    records[i] = records[i + 1];
                    ++i;
                }
                --nrecs;
                result = &deleted_record;
            } else {
                result = &records[i];
            }
            break;
        }
    }
    return result;
}

void KeyRecorder::storeKey(int code, int ascii, int state, const DKString& text){
    if(nrecs != DK_MAX_KEY_RECORDINGS){
			DKERROR("Internal KeyRecorder");
			DKERROR("Keyboard recorder buffer overflow, consider increasing QT_MAX_KEY_RECORDINGS");
	}
    if (nrecs == DK_MAX_KEY_RECORDINGS) {
        DKWARN("Qt: Internal keyboard buffer overflow");
        return;
    }
    records[nrecs++] = KeyRecord(code,ascii,state,text);
}
void KeyRecorder::clearKeys(){
    nrecs = 0;
}

// https://code.woboq.org/qt5/qtbase/src/testlib/qasciikey.cpp.html
inline DK_Key asciiToKey(char ascii){
    switch ((unsigned char)ascii) {
		case 0x08: return Key_Backspace;
		case 0x09: return Key_Tab;
		case 0x0b: return Key_Backtab;
		case 0x0d: return Key_Return;
		case 0x1b: return Key_Escape;
		case 0x13: return Key_Up;
		case 0x15: return Key_Down;
		case 0x20: return Key_Space;
		case 0x21: return Key_Exclam;
		case 0x22: return Key_QuoteDbl;
		case 0x23: return Key_NumberSign;
		case 0x24: return Key_Dollar;
		case 0x25: return Key_Percent;
		case 0x26: return Key_Ampersand;
		case 0x27: return Key_Apostrophe;
		case 0x28: return Key_ParenLeft;
		case 0x29: return Key_ParenRight;
		case 0x2a: return Key_Asterisk;
		case 0x2b: return Key_Plus;
		case 0x2c: return Key_Comma;
		case 0x2d: return Key_Minus;
		case 0x2e: return Key_Period;
		case 0x2f: return Key_Slash;
		case 0x30: return Key_0;
		case 0x31: return Key_1;
		case 0x32: return Key_2;
		case 0x33: return Key_3;
		case 0x34: return Key_4;
		case 0x35: return Key_5;
		case 0x36: return Key_6;
		case 0x37: return Key_7;
		case 0x38: return Key_8;
		case 0x39: return Key_9;
		case 0x3a: return Key_Colon;
		case 0x3b: return Key_Semicolon;
		case 0x3c: return Key_Less;
		case 0x3d: return Key_Equal;
		case 0x3e: return Key_Greater;
		case 0x3f: return Key_Question;
		case 0x40: return Key_At;
		case 0x41: return Key_A;
		case 0x42: return Key_B;
		case 0x43: return Key_C;
		case 0x44: return Key_D;
		case 0x45: return Key_E;
		case 0x46: return Key_F;
		case 0x47: return Key_G;
		case 0x48: return Key_H;
		case 0x49: return Key_I;
		case 0x4a: return Key_J;
		case 0x4b: return Key_K;
		case 0x4c: return Key_L;
		case 0x4d: return Key_M;
		case 0x4e: return Key_N;
		case 0x4f: return Key_O;
		case 0x50: return Key_P;
		case 0x51: return Key_Q;
		case 0x52: return Key_R;
		case 0x53: return Key_S;
		case 0x54: return Key_T;
		case 0x55: return Key_U;
		case 0x56: return Key_V;
		case 0x57: return Key_W;
		case 0x58: return Key_X;
		case 0x59: return Key_Y;
		case 0x5a: return Key_Z;
		case 0x5b: return Key_BracketLeft;
		case 0x5c: return Key_Backslash;
		case 0x5d: return Key_BracketRight;
		case 0x5e: return Key_AsciiCircum;
		case 0x5f: return Key_Underscore;
		case 0x60: return Key_QuoteLeft;
		case 0x61: return Key_A;
		case 0x62: return Key_B;
		case 0x63: return Key_C;
		case 0x64: return Key_D;
		case 0x65: return Key_E;
		case 0x66: return Key_F;
		case 0x67: return Key_G;
		case 0x68: return Key_H;
		case 0x69: return Key_I;
		case 0x6a: return Key_J;
		case 0x6b: return Key_K;
		case 0x6c: return Key_L;
		case 0x6d: return Key_M;
		case 0x6e: return Key_N;
		case 0x6f: return Key_O;
		case 0x70: return Key_P;
		case 0x71: return Key_Q;
		case 0x72: return Key_R;
		case 0x73: return Key_S;
		case 0x74: return Key_T;
		case 0x75: return Key_U;
		case 0x76: return Key_V;
		case 0x77: return Key_W;
		case 0x78: return Key_X;
		case 0x79: return Key_Y;
		case 0x7a: return Key_Z;
		case 0x7b: return Key_BraceLeft;
		case 0x7c: return Key_Bar;
		case 0x7d: return Key_BraceRight;
		case 0x7e: return Key_AsciiTilde;
		// Latin 1 codes adapted from X: keysymdef.h,v 1.21 94/08/28 16:17:06
		case 0xa0: return Key_nobreakspace;
		case 0xa1: return Key_exclamdown;
		case 0xa2: return Key_cent;
		case 0xa3: return Key_sterling;
		case 0xa4: return Key_currency;
		case 0xa5: return Key_yen;
		case 0xa6: return Key_brokenbar;
		case 0xa7: return Key_section;
		case 0xa8: return Key_diaeresis;
		case 0xa9: return Key_copyright;
		case 0xaa: return Key_ordfeminine;
		case 0xab: return Key_guillemotleft;
		case 0xac: return Key_notsign;
		case 0xad: return Key_hyphen;
		case 0xae: return Key_registered;
		case 0xaf: return Key_macron;
		case 0xb0: return Key_degree;
		case 0xb1: return Key_plusminus;
		case 0xb2: return Key_twosuperior;
		case 0xb3: return Key_threesuperior;
		case 0xb4: return Key_acute;
		case 0xb5: return Key_mu;
		case 0xb6: return Key_paragraph;
		case 0xb7: return Key_periodcentered;
		case 0xb8: return Key_cedilla;
		case 0xb9: return Key_onesuperior;
		case 0xba: return Key_masculine;
		case 0xbb: return Key_guillemotright;
		case 0xbc: return Key_onequarter;
		case 0xbd: return Key_onehalf;
		case 0xbe: return Key_threequarters;
		case 0xbf: return Key_questiondown;
		case 0xc0: return Key_Agrave;
		case 0xc1: return Key_Aacute;
		case 0xc2: return Key_Acircumflex;
		case 0xc3: return Key_Atilde;
		case 0xc4: return Key_Adiaeresis;
		case 0xc5: return Key_Aring;
		case 0xc6: return Key_AE;
		case 0xc7: return Key_Ccedilla;
		case 0xc8: return Key_Egrave;
		case 0xc9: return Key_Eacute;
		case 0xca: return Key_Ecircumflex;
		case 0xcb: return Key_Ediaeresis;
		case 0xcc: return Key_Igrave;
		case 0xcd: return Key_Iacute;
		case 0xce: return Key_Icircumflex;
		case 0xcf: return Key_Idiaeresis;
		case 0xd0: return Key_ETH;
		case 0xd1: return Key_Ntilde;
		case 0xd2: return Key_Ograve;
		case 0xd3: return Key_Oacute;
		case 0xd4: return Key_Ocircumflex;
		case 0xd5: return Key_Otilde;
		case 0xd6: return Key_Odiaeresis;
		case 0xd7: return Key_multiply;
		case 0xd8: return Key_Ooblique;
		case 0xd9: return Key_Ugrave;
		case 0xda: return Key_Uacute;
		case 0xdb: return Key_Ucircumflex;
		case 0xdc: return Key_Udiaeresis;
		case 0xdd: return Key_Yacute;
		case 0xde: return Key_THORN;
		case 0xdf: return Key_ssharp;
		case 0xe5: return Key_Aring;
		case 0xe6: return Key_AE;
		case 0xf7: return Key_division;
		case 0xf8: return Key_Ooblique;
		case 0xff: return Key_ydiaeresis;
		default: 
			DKERROR("DK_Key asciiToKey(): character not mapped");
			return DK_Key(0);
    }
};

// https://code.woboq.org/qt5/qtbase/src/testlib/qasciikey.cpp.html
inline unsigned char keyToAscii(DK_Key key){
    switch (key) {
		case Key_Backspace: return 0x8; //BS
		case Key_Tab: return 0x09; // HT
		case Key_Backtab: return 0x0b; // VT
		case Key_Enter:
		case Key_Return: return 0x0d; // CR
		case Key_Escape: return 0x1b; // ESC
		case Key_Space: return 0x20;        // 7 bit printable ASCII
		case Key_Exclam: return 0x21;
		case Key_QuoteDbl: return 0x22;
		case Key_NumberSign: return 0x23;
		case Key_Dollar: return 0x24;
		case Key_Percent: return 0x25;
		case Key_Ampersand: return 0x26;
		case Key_Apostrophe: return 0x27;
		case Key_ParenLeft: return 0x28;
		case Key_ParenRight: return 0x29;
		case Key_Asterisk: return 0x2a;
		case Key_Plus: return 0x2b;
		case Key_Comma: return 0x2c;
		case Key_Minus: return 0x2d;
		case Key_Period: return 0x2e;
		case Key_Slash: return 0x2f;
		case Key_0: return 0x30;
		case Key_1: return 0x31;
		case Key_2: return 0x32;
		case Key_3: return 0x33;
		case Key_4: return 0x34;
		case Key_5: return 0x35;
		case Key_6: return 0x36;
		case Key_7: return 0x37;
		case Key_8: return 0x38;
		case Key_9: return 0x39;
		case Key_Colon: return 0x3a;
		case Key_Semicolon: return 0x3b;
		case Key_Less: return 0x3c;
		case Key_Equal: return 0x3d;
		case Key_Greater: return 0x3e;
		case Key_Question: return 0x3f;
		case Key_At: return 0x40;
		case Key_A: return 0x61; // 0x41 == 'A', 0x61 == 'a'
		case Key_B: return 0x62;
		case Key_C: return 0x63;
		case Key_D: return 0x64;
		case Key_E: return 0x65;
		case Key_F: return 0x66;
		case Key_G: return 0x67;
		case Key_H: return 0x68;
		case Key_I: return 0x69;
		case Key_J: return 0x6a;
		case Key_K: return 0x6b;
		case Key_L: return 0x6c;
		case Key_M: return 0x6d;
		case Key_N: return 0x6e;
		case Key_O: return 0x6f;
		case Key_P: return 0x70;
		case Key_Q: return 0x71;
		case Key_R: return 0x72;
		case Key_S: return 0x73;
		case Key_T: return 0x74;
		case Key_U: return 0x75;
		case Key_V: return 0x76;
		case Key_W: return 0x77;
		case Key_X: return 0x78;
		case Key_Y: return 0x79;
		case Key_Z: return 0x7a;
		case Key_BracketLeft: return 0x5b;
		case Key_Backslash: return 0x5c;
		case Key_BracketRight: return 0x5d;
		case Key_AsciiCircum: return 0x5e;
		case Key_Underscore: return 0x5f;
		case Key_QuoteLeft: return 0x60;
		case Key_BraceLeft: return 0x7b;
		case Key_Bar: return 0x7c;
		case Key_BraceRight: return 0x7d;
		case Key_AsciiTilde: return 0x7e;
		case Key_Delete: return 0;
		case Key_Insert: return 0; // = 0x1006,
		case Key_Pause: return 0; // = 0x1008,
		case Key_Print: return 0; // = 0x1009,
		case Key_SysReq: return 0; // = 0x100a,
		case Key_Clear: return 0; // = 0x100b,
		case Key_Home: return 0; // = 0x1010,        // cursor movement
		case Key_End: return 0; // = 0x1011,
		case Key_Left: return 0; // = 0x1012,
		case Key_Up: return 0; // = 0x1013,
		case Key_Right: return 0; // = 0x1014,
		case Key_Down: return 0; // = 0x1015,
		case Key_PageUp: return 0; // = 0x1016,
		case Key_PageDown: return 0; // = 0x1017,
		case Key_Shift: return 0; // = 0x1020,        // modifiers
		case Key_Control: return 0; // = 0x1021,
		case Key_Meta: return 0; // = 0x1022,
		case Key_Alt: return 0; // = 0x1023,
		case Key_CapsLock: return 0; // = 0x1024,
		case Key_NumLock: return 0; // = 0x1025,
		case Key_ScrollLock: return 0; // = 0x1026,
		case Key_F1: return 0; // = 0x1030,        // function keys
		case Key_F2: return 0; // = 0x1031,
		case Key_F3: return 0; // = 0x1032,
		case Key_F4: return 0; // = 0x1033,
		case Key_F5: return 0; // = 0x1034,
		case Key_F6: return 0; // = 0x1035,
		case Key_F7: return 0; // = 0x1036,
		case Key_F8: return 0; // = 0x1037,
		case Key_F9: return 0; // = 0x1038,
		case Key_F10: return 0; // = 0x1039,
		case Key_F11: return 0; // = 0x103a,
		case Key_F12: return 0; // = 0x103b,
		case Key_F13: return 0; // = 0x103c,
		case Key_F14: return 0; // = 0x103d,
		case Key_F15: return 0; // = 0x103e,
		case Key_F16: return 0; // = 0x103f,
		case Key_F17: return 0; // = 0x1040,
		case Key_F18: return 0; // = 0x1041,
		case Key_F19: return 0; // = 0x1042,
		case Key_F20: return 0; // = 0x1043,
		case Key_F21: return 0; // = 0x1044,
		case Key_F22: return 0; // = 0x1045,
		case Key_F23: return 0; // = 0x1046,
		case Key_F24: return 0; // = 0x1047,
		case Key_F25: return 0; // = 0x1048,        // F25 .. F35 only on X11
		case Key_F26: return 0; // = 0x1049,
		case Key_F27: return 0; // = 0x104a,
		case Key_F28: return 0; // = 0x104b,
		case Key_F29: return 0; // = 0x104c,
		case Key_F30: return 0; // = 0x104d,
		case Key_F31: return 0; // = 0x104e,
		case Key_F32: return 0; // = 0x104f,
		case Key_F33: return 0; // = 0x1050,
		case Key_F34: return 0; // = 0x1051,
		case Key_F35: return 0; // = 0x1052,
		case Key_Super_L: return 0; // = 0x1053,        // extra keys
		case Key_Super_R: return 0; // = 0x1054,
		case Key_Menu: return 0; // = 0x1055,
		case Key_Hyper_L: return 0; // = 0x1056,
		case Key_Hyper_R: return 0; // = 0x1057,
		case Key_Help: return 0; // = 0x1058,
		case Key_Direction_L: return 0; // = 0x1059,
		case Key_Direction_R: return 0; // = 0x1060,
		// Latin 1 codes adapted from X: keysymdef.h,v 1.21 94/08/28 16:17:06
		case Key_nobreakspace: return char(0xa0);
		case Key_exclamdown: return char(0xa1);
		case Key_cent: return char(0xa2);
		case Key_sterling: return char(0xa3);
		case Key_currency: return char(0xa4);
		case Key_yen: return char(0xa5);
		case Key_brokenbar: return char(0xa6);
		case Key_section: return char(0xa7);
		case Key_diaeresis: return char(0xa8);
		case Key_copyright: return char(0xa9);
		case Key_ordfeminine: return char(0xaa);
		case Key_guillemotleft: return char(0xab); // left angle quotation mar
		case Key_notsign: return char(0xac);
		case Key_hyphen: return char(0xad);
		case Key_registered: return char(0xae);
		case Key_macron: return char(0xaf);
		case Key_degree: return char(0xb0);
		case Key_plusminus: return char(0xb1);
		case Key_twosuperior: return char(0xb2);
		case Key_threesuperior: return char(0xb3);
		case Key_acute: return char(0xb4);
		case Key_mu: return char(0xb5);
		case Key_paragraph: return char(0xb6);
		case Key_periodcentered: return char(0xb7);
		case Key_cedilla: return char(0xb8);
		case Key_onesuperior: return char(0xb9);
		case Key_masculine: return char(0xba);
		case Key_guillemotright: return char(0xbb); // right angle quotation mar
		case Key_onequarter: return char(0xbc);
		case Key_onehalf: return char(0xbd);
		case Key_threequarters: return char(0xbe);
		case Key_questiondown: return char(0xbf);
		case Key_Agrave: return char(0xc0);
		case Key_Aacute: return char(0xc1);
		case Key_Acircumflex: return char(0xc2);
		case Key_Atilde: return char(0xc3);
		case Key_Adiaeresis: return char(0xc4);
		case Key_Aring: return char(0xe5);
		case Key_AE: return char(0xe6);
		case Key_Ccedilla: return char(0xc7);
		case Key_Egrave: return char(0xc8);
		case Key_Eacute: return char(0xc9);
		case Key_Ecircumflex: return char(0xca);
		case Key_Ediaeresis: return char(0xcb);
		case Key_Igrave: return char(0xcc);
		case Key_Iacute: return char(0xcd);
		case Key_Icircumflex: return char(0xce);
		case Key_Idiaeresis: return char(0xcf);
		case Key_ETH: return char(0xd0);
		case Key_Ntilde: return char(0xd1);
		case Key_Ograve: return char(0xd2);
		case Key_Oacute: return char(0xd3);
		case Key_Ocircumflex: return char(0xd4);
		case Key_Otilde: return char(0xd5);
		case Key_Odiaeresis: return char(0xd6);
		case Key_multiply: return char(0xd7);
		case Key_Ooblique: return char(0xf8);
		case Key_Ugrave: return char(0xd9);
		case Key_Uacute: return char(0xda);
		case Key_Ucircumflex: return char(0xdb);
		case Key_Udiaeresis: return char(0xdc);
		case Key_Yacute: return char(0xdd);
		case Key_THORN: return char(0xde);
		case Key_ssharp: return char(0xdf);
		case Key_division: return char(0xf7);
		case Key_ydiaeresis: return char(0xff);
		// multimedia/internet keys - ignored by default - see QKeyEvent c'tor
		case Key_Back : return 0; // = 0x1061,
		case Key_Forward : return 0; // = 0x1062,
		case Key_Stop : return 0; // = 0x1063,
		case Key_Refresh : return 0; // = 0x1064,
		case Key_VolumeDown: return 0; // = 0x1070,
		case Key_VolumeMute : return 0; // = 0x1071,
		case Key_VolumeUp: return 0; // = 0x1072,
		case Key_BassBoost: return 0; // = 0x1073,
		case Key_BassUp: return 0; // = 0x1074,
		case Key_BassDown: return 0; // = 0x1075,
		case Key_TrebleUp: return 0; // = 0x1076,
		case Key_TrebleDown: return 0; // = 0x1077,
		case Key_MediaPlay : return 0; // = 0x1080,
		case Key_MediaStop : return 0; // = 0x1081,
		case Key_MediaPrevious : return 0; // = 0x1082,
		case Key_MediaNext : return 0; // = 0x1083,
		case Key_MediaRecord: return 0; // = 0x1084,
		case Key_HomePage : return 0; // = 0x1090,
		case Key_Favorites : return 0; // = 0x1091,
		case Key_Search : return 0; // = 0x1092,
		case Key_Standby: return 0; // = 0x1093,
		case Key_OpenUrl: return 0; // = 0x1094,
		case Key_LaunchMail : return 0; // = 0x10a0,
		case Key_LaunchMedia: return 0; // = 0x10a1,
		case Key_Launch0 : return 0; // = 0x10a2,
		case Key_Launch1 : return 0; // = 0x10a3,
		case Key_Launch2 : return 0; // = 0x10a4,
		case Key_Launch3 : return 0; // = 0x10a5,
		case Key_Launch4 : return 0; // = 0x10a6,
		case Key_Launch5 : return 0; // = 0x10a7,
		case Key_Launch6 : return 0; // = 0x10a8,
		case Key_Launch7 : return 0; // = 0x10a9,
		case Key_Launch8 : return 0; // = 0x10aa,
		case Key_Launch9 : return 0; // = 0x10ab,
		case Key_LaunchA : return 0; // = 0x10ac,
		case Key_LaunchB : return 0; // = 0x10ad,
		case Key_LaunchC : return 0; // = 0x10ae,
		case Key_LaunchD : return 0; // = 0x10af,
		case Key_LaunchE : return 0; // = 0x10b0,
		case Key_LaunchF : return 0; // = 0x10b1,
		default: 
			DKERROR("char keyToAscii(): key not recognised");
			return 0;
    }
};

// https://code.woboq.org/qt5/qtbase/src/plugins/platforms/windows/qwindowskeymapper.cpp.html
#ifdef WIN32


enum DK_keyTypes {
    dec = 0,
    hex = 1,
	code = 3,
	osName = 2
};

static const unsigned int WinKeyTbl[] = { 
					// Keyboard mapping table
                    // Dec |  Hex | Windows Virtual key
    Key_unknown,    //   0   0x00
    Key_unknown,    //   1   0x01   VK_LBUTTON          | Left mouse button
    Key_unknown,    //   2   0x02   VK_RBUTTON          | Right mouse button
    Key_Cancel,     //   3   0x03   VK_CANCEL           | Control-Break processing
    Key_unknown,    //   4   0x04   VK_MBUTTON          | Middle mouse button
    Key_unknown,    //   5   0x05   VK_XBUTTON1         | X1 mouse button
    Key_unknown,    //   6   0x06   VK_XBUTTON2         | X2 mouse button
    Key_unknown,    //   7   0x07   -- unassigned --
    Key_Backspace,  //   8   0x08   VK_BACK             | BackSpace key
    Key_Tab,        //   9   0x09   VK_TAB              | Tab key
    Key_unknown,    //  10   0x0A   -- reserved --
    Key_unknown,    //  11   0x0B   -- reserved --
    Key_Clear,      //  12   0x0C   VK_CLEAR            | Clear key
    Key_Return,     //  13   0x0D   VK_RETURN           | Enter key
    Key_unknown,    //  14   0x0E   -- unassigned --
    Key_unknown,    //  15   0x0F   -- unassigned --
    Key_Shift,      //  16   0x10   VK_SHIFT            | Shift key
    Key_Control,    //  17   0x11   VK_CONTROL          | Ctrl key
    Key_Alt,        //  18   0x12   VK_MENU             | Alt key
    Key_Pause,      //  19   0x13   VK_PAUSE            | Pause key
    Key_CapsLock,   //  20   0x14   VK_CAPITAL          | Caps-Lock
    Key_unknown,    //  21   0x15   VK_KANA / VK_HANGUL | IME Kana or Hangul mode
    Key_unknown,    //  22   0x16   -- unassigned --
    Key_unknown,    //  23   0x17   VK_JUNJA            | IME Junja mode
    Key_unknown,    //  24   0x18   VK_FINAL            | IME final mode
    Key_unknown,    //  25   0x19   VK_HANJA / VK_KANJI | IME Hanja or Kanji mode
    Key_unknown,    //  26   0x1A   -- unassigned --
    Key_Escape,     //  27   0x1B   VK_ESCAPE           | Esc key
    Key_unknown,    //  28   0x1C   VK_CONVERT          | IME convert
    Key_unknown,    //  29   0x1D   VK_NONCONVERT       | IME non-convert
    Key_unknown,    //  30   0x1E   VK_ACCEPT           | IME accept
    Key_Mode_switch,//  31   0x1F   VK_MODECHANGE       | IME mode change request
    Key_Space,      //  32   0x20   VK_SPACE            | Spacebar
    Key_PageUp,     //  33   0x21   VK_PRIOR            | Page Up key
    Key_PageDown,   //  34   0x22   VK_NEXT             | Page Down key
    Key_End,        //  35   0x23   VK_END              | End key
    Key_Home,       //  36   0x24   VK_HOME             | Home key
    Key_Left,       //  37   0x25   VK_LEFT             | Left arrow key
    Key_Up,         //  38   0x26   VK_UP               | Up arrow key
    Key_Right,      //  39   0x27   VK_RIGHT            | Right arrow key
    Key_Down,       //  40   0x28   VK_DOWN             | Down arrow key
    Key_Select,     //  41   0x29   VK_SELECT           | Select key
    Key_Printer,    //  42   0x2A   VK_PRINT            | Print key
    Key_Execute,    //  43   0x2B   VK_EXECUTE          | Execute key
    Key_Print,      //  44   0x2C   VK_SNAPSHOT         | Print Screen key
    Key_Insert,     //  45   0x2D   VK_INSERT           | Ins key
    Key_Delete,     //  46   0x2E   VK_DELETE           | Del key
    Key_Help,       //  47   0x2F   VK_HELP             | Help key
    0,              //  48   0x30   (VK_0)              | 0 key
    0,              //  49   0x31   (VK_1)              | 1 key
    0,              //  50   0x32   (VK_2)              | 2 key
    0,              //  51   0x33   (VK_3)              | 3 key
    0,              //  52   0x34   (VK_4)              | 4 key
    0,              //  53   0x35   (VK_5)              | 5 key
    0,              //  54   0x36   (VK_6)              | 6 key
    0,              //  55   0x37   (VK_7)              | 7 key
    0,              //  56   0x38   (VK_8)              | 8 key
    0,              //  57   0x39   (VK_9)              | 9 key
    Key_unknown,    //  58   0x3A   -- unassigned --
    Key_unknown,    //  59   0x3B   -- unassigned --
    Key_unknown,    //  60   0x3C   -- unassigned --
    Key_unknown,    //  61   0x3D   -- unassigned --
    Key_unknown,    //  62   0x3E   -- unassigned --
    Key_unknown,    //  63   0x3F   -- unassigned --
    Key_unknown,    //  64   0x40   -- unassigned --
    0,              //  65   0x41   (VK_A)              | A key
    0,              //  66   0x42   (VK_B)              | B key
    0,              //  67   0x43   (VK_C)              | C key
    0,              //  68   0x44   (VK_D)              | D key
    0,              //  69   0x45   (VK_E)              | E key
    0,              //  70   0x46   (VK_F)              | F key
    0,              //  71   0x47   (VK_G)              | G key
    0,              //  72   0x48   (VK_H)              | H key
    0,              //  73   0x49   (VK_I)              | I key
    0,              //  74   0x4A   (VK_J)              | J key
    0,              //  75   0x4B   (VK_K)              | K key
    0,              //  76   0x4C   (VK_L)              | L key
    0,              //  77   0x4D   (VK_M)              | M key
    0,              //  78   0x4E   (VK_N)              | N key
    0,              //  79   0x4F   (VK_O)              | O key
    0,              //  80   0x50   (VK_P)              | P key
    0,              //  81   0x51   (VK_Q)              | Q key
    0,              //  82   0x52   (VK_R)              | R key
    0,              //  83   0x53   (VK_S)              | S key
    0,              //  84   0x54   (VK_T)              | T key
    0,              //  85   0x55   (VK_U)              | U key
    0,              //  86   0x56   (VK_V)              | V key
    0,              //  87   0x57   (VK_W)              | W key
    0,              //  88   0x58   (VK_X)              | X key
    0,              //  89   0x59   (VK_Y)              | Y key
    0,              //  90   0x5A   (VK_Z)              | Z key
    Key_Meta,       //  91   0x5B   VK_LWIN             | Left Windows  - MS Natural kbd
    Key_Meta,       //  92   0x5C   VK_RWIN             | Right Windows - MS Natural kbd
    Key_Menu,       //  93   0x5D   VK_APPS             | Application key-MS Natural kbd
    Key_unknown,    //  94   0x5E   -- reserved --
    Key_Sleep,      //  95   0x5F   VK_SLEEP
    Key_0,          //  96   0x60   VK_NUMPAD0          | Numeric keypad 0 key
    Key_1,          //  97   0x61   VK_NUMPAD1          | Numeric keypad 1 key
    Key_2,          //  98   0x62   VK_NUMPAD2          | Numeric keypad 2 key
    Key_3,          //  99   0x63   VK_NUMPAD3          | Numeric keypad 3 key
    Key_4,          // 100   0x64   VK_NUMPAD4          | Numeric keypad 4 key
    Key_5,          // 101   0x65   VK_NUMPAD5          | Numeric keypad 5 key
    Key_6,          // 102   0x66   VK_NUMPAD6          | Numeric keypad 6 key
    Key_7,          // 103   0x67   VK_NUMPAD7          | Numeric keypad 7 key
    Key_8,          // 104   0x68   VK_NUMPAD8          | Numeric keypad 8 key
    Key_9,          // 105   0x69   VK_NUMPAD9          | Numeric keypad 9 key
    Key_Asterisk,   // 106   0x6A   VK_MULTIPLY         | Multiply key
    Key_Plus,       // 107   0x6B   VK_ADD              | Add key
    Key_unknown,    // 108   0x6C   VK_SEPARATOR        | Separator key (locale-dependent)
    Key_Minus,      // 109   0x6D   VK_SUBTRACT         | Subtract key
    Key_unknown,    // 110   0x6E   VK_DECIMAL          | Decimal key (locale-dependent)
    Key_Slash,      // 111   0x6F   VK_DIVIDE           | Divide key
    Key_F1,         // 112   0x70   VK_F1               | F1 key
    Key_F2,         // 113   0x71   VK_F2               | F2 key
    Key_F3,         // 114   0x72   VK_F3               | F3 key
    Key_F4,         // 115   0x73   VK_F4               | F4 key
    Key_F5,         // 116   0x74   VK_F5               | F5 key
    Key_F6,         // 117   0x75   VK_F6               | F6 key
    Key_F7,         // 118   0x76   VK_F7               | F7 key
    Key_F8,         // 119   0x77   VK_F8               | F8 key
    Key_F9,         // 120   0x78   VK_F9               | F9 key
    Key_F10,        // 121   0x79   VK_F10              | F10 key
    Key_F11,        // 122   0x7A   VK_F11              | F11 key
    Key_F12,        // 123   0x7B   VK_F12              | F12 key
    Key_F13,        // 124   0x7C   VK_F13              | F13 key
    Key_F14,        // 125   0x7D   VK_F14              | F14 key
    Key_F15,        // 126   0x7E   VK_F15              | F15 key
    Key_F16,        // 127   0x7F   VK_F16              | F16 key
    Key_F17,        // 128   0x80   VK_F17              | F17 key
    Key_F18,        // 129   0x81   VK_F18              | F18 key
    Key_F19,        // 130   0x82   VK_F19              | F19 key
    Key_F20,        // 131   0x83   VK_F20              | F20 key
    Key_F21,        // 132   0x84   VK_F21              | F21 key
    Key_F22,        // 133   0x85   VK_F22              | F22 key
    Key_F23,        // 134   0x86   VK_F23              | F23 key
    Key_F24,        // 135   0x87   VK_F24              | F24 key
    Key_unknown,    // 136   0x88   -- unassigned --
    Key_unknown,    // 137   0x89   -- unassigned --
    Key_unknown,    // 138   0x8A   -- unassigned --
    Key_unknown,    // 139   0x8B   -- unassigned --
    Key_unknown,    // 140   0x8C   -- unassigned --
    Key_unknown,    // 141   0x8D   -- unassigned --
    Key_unknown,    // 142   0x8E   -- unassigned --
    Key_unknown,    // 143   0x8F   -- unassigned --
    Key_NumLock,    // 144   0x90   VK_NUMLOCK          | Num Lock key
    Key_ScrollLock, // 145   0x91   VK_SCROLL           | Scroll Lock key
                    // Fujitsu/OASYS kbd --------------------
    0, //Key_Jisho, // 146   0x92   VK_OEM_FJ_JISHO     | 'Dictionary' key /
                    //              VK_OEM_NEC_EQUAL  = key on numpad on NEC PC-9800 kbd
    Key_Massyo,     // 147   0x93   VK_OEM_FJ_MASSHOU   | 'Unregister word' key
    Key_Touroku,    // 148   0x94   VK_OEM_FJ_TOUROKU   | 'Register word' key
    0, //Key_Oyayubi_Left,  //149   0x95  VK_OEM_FJ_LOYA  | 'Left OYAYUBI' key
    0, //Key_Oyayubi_Right, //150  0x96  VK_OEM_FJ_ROYA  | 'Right OYAYUBI' key
    Key_unknown,    // 151   0x97   -- unassigned --
    Key_unknown,    // 152   0x98   -- unassigned --
    Key_unknown,    // 153   0x99   -- unassigned --
    Key_unknown,    // 154   0x9A   -- unassigned --
    Key_unknown,    // 155   0x9B   -- unassigned --
    Key_unknown,    // 156   0x9C   -- unassigned --
    Key_unknown,    // 157   0x9D   -- unassigned --
    Key_unknown,    // 158   0x9E   -- unassigned --
    Key_unknown,    // 159   0x9F   -- unassigned --
    Key_Shift,      // 160   0xA0   VK_LSHIFT           | Left Shift key
    Key_Shift,      // 161   0xA1   VK_RSHIFT           | Right Shift key
    Key_Control,    // 162   0xA2   VK_LCONTROL         | Left Ctrl key
    Key_Control,    // 163   0xA3   VK_RCONTROL         | Right Ctrl key
    Key_Alt,        // 164   0xA4   VK_LMENU            | Left Menu key
    Key_Alt,        // 165   0xA5   VK_RMENU            | Right Menu key
    Key_Back,       // 166   0xA6   VK_BROWSER_BACK     | Browser Back key
    Key_Forward,    // 167   0xA7   VK_BROWSER_FORWARD  | Browser Forward key
    Key_Refresh,    // 168   0xA8   VK_BROWSER_REFRESH  | Browser Refresh key
    Key_Stop,       // 169   0xA9   VK_BROWSER_STOP     | Browser Stop key
    Key_Search,     // 170   0xAA   VK_BROWSER_SEARCH   | Browser Search key
    Key_Favorites,  // 171   0xAB   VK_BROWSER_FAVORITES| Browser Favorites key
    Key_HomePage,   // 172   0xAC   VK_BROWSER_HOME     | Browser Start and Home key
    Key_VolumeMute, // 173   0xAD   VK_VOLUME_MUTE      | Volume Mute key
    Key_VolumeDown, // 174   0xAE   VK_VOLUME_DOWN      | Volume Down key
    Key_VolumeUp,   // 175   0xAF   VK_VOLUME_UP        | Volume Up key
    Key_MediaNext,  // 176   0xB0   VK_MEDIA_NEXT_TRACK | Next Track key
    Key_MediaPrevious, //177 0xB1   VK_MEDIA_PREV_TRACK | Previous Track key
    Key_MediaStop,  // 178   0xB2   VK_MEDIA_STOP       | Stop Media key
    Key_MediaPlay,  // 179   0xB3   VK_MEDIA_PLAY_PAUSE | Play/Pause Media key
    Key_LaunchMail, // 180   0xB4   VK_LAUNCH_MAIL      | Start Mail key
    Key_LaunchMedia,// 181   0xB5   VK_LAUNCH_MEDIA_SELECT Select Media key
    Key_Launch0,    // 182   0xB6   VK_LAUNCH_APP1      | Start Application 1 key
    Key_Launch1,    // 183   0xB7   VK_LAUNCH_APP2      | Start Application 2 key
    Key_unknown,    // 184   0xB8   -- reserved --
    Key_unknown,    // 185   0xB9   -- reserved --
    0,              // 186   0xBA   VK_OEM_1            | ';:' for US
    0,              // 187   0xBB   VK_OEM_PLUS         | '+' any country
    0,              // 188   0xBC   VK_OEM_COMMA        | ',' any country
    0,              // 189   0xBD   VK_OEM_MINUS        | '-' any country
    0,              // 190   0xBE   VK_OEM_PERIOD       | '.' any country
    0,              // 191   0xBF   VK_OEM_2            | '/?' for US
    0,              // 192   0xC0   VK_OEM_3            | '`~' for US
    Key_unknown,    // 193   0xC1   -- reserved --
    Key_unknown,    // 194   0xC2   -- reserved --
    Key_unknown,    // 195   0xC3   -- reserved --
    Key_unknown,    // 196   0xC4   -- reserved --
    Key_unknown,    // 197   0xC5   -- reserved --
    Key_unknown,    // 198   0xC6   -- reserved --
    Key_unknown,    // 199   0xC7   -- reserved --
    Key_unknown,    // 200   0xC8   -- reserved --
    Key_unknown,    // 201   0xC9   -- reserved --
    Key_unknown,    // 202   0xCA   -- reserved --
    Key_unknown,    // 203   0xCB   -- reserved --
    Key_unknown,    // 204   0xCC   -- reserved --
    Key_unknown,    // 205   0xCD   -- reserved --
    Key_unknown,    // 206   0xCE   -- reserved --
    Key_unknown,    // 207   0xCF   -- reserved --
    Key_unknown,    // 208   0xD0   -- reserved --
    Key_unknown,    // 209   0xD1   -- reserved --
    Key_unknown,    // 210   0xD2   -- reserved --
    Key_unknown,    // 211   0xD3   -- reserved --
    Key_unknown,    // 212   0xD4   -- reserved --
    Key_unknown,    // 213   0xD5   -- reserved --
    Key_unknown,    // 214   0xD6   -- reserved --
    Key_unknown,    // 215   0xD7   -- reserved --
    Key_unknown,    // 216   0xD8   -- unassigned --
    Key_unknown,    // 217   0xD9   -- unassigned --
    Key_unknown,    // 218   0xDA   -- unassigned --
    0,              // 219   0xDB   VK_OEM_4            | '[{' for US
    0,              // 220   0xDC   VK_OEM_5            | '\|' for US
    0,              // 221   0xDD   VK_OEM_6            | ']}' for US
    0,              // 222   0xDE   VK_OEM_7            | ''"' for US
    0,              // 223   0xDF   VK_OEM_8
    Key_unknown,    // 224   0xE0   -- reserved --
    Key_unknown,    // 225   0xE1   VK_OEM_AX           | 'AX' key on Japanese AX kbd
    Key_unknown,    // 226   0xE2   VK_OEM_102          | "<>" or "\|" on RT 102-key kbd
    Key_unknown,    // 227   0xE3   VK_ICO_HELP         | Help key on ICO
    Key_unknown,    // 228   0xE4   VK_ICO_00           | 00 key on ICO
    Key_unknown,    // 229   0xE5   VK_PROCESSKEY       | IME Process key
    Key_unknown,    // 230   0xE6   VK_ICO_CLEAR        |
    Key_unknown,    // 231   0xE7   VK_PACKET           | Unicode char as keystrokes
    Key_unknown,    // 232   0xE8   -- unassigned --
                    // Nokia/Ericsson definitions ---------------
    Key_unknown,    // 233   0xE9   VK_OEM_RESET
    Key_unknown,    // 234   0xEA   VK_OEM_JUMP
    Key_unknown,    // 235   0xEB   VK_OEM_PA1
    Key_unknown,    // 236   0xEC   VK_OEM_PA2
    Key_unknown,    // 237   0xED   VK_OEM_PA3
    Key_unknown,    // 238   0xEE   VK_OEM_WSCTRL
    Key_unknown,    // 239   0xEF   VK_OEM_CUSEL
    Key_unknown,    // 240   0xF0   VK_OEM_ATTN
    Key_unknown,    // 241   0xF1   VK_OEM_FINISH
    Key_unknown,    // 242   0xF2   VK_OEM_COPY
    Key_unknown,    // 243   0xF3   VK_OEM_AUTO
    Key_unknown,    // 244   0xF4   VK_OEM_ENLW
    Key_unknown,    // 245   0xF5   VK_OEM_BACKTAB
    Key_unknown,    // 246   0xF6   VK_ATTN             | Attn key
    Key_unknown,    // 247   0xF7   VK_CRSEL            | CrSel key
    Key_unknown,    // 248   0xF8   VK_EXSEL            | ExSel key
    Key_unknown,    // 249   0xF9   VK_EREOF            | Erase EOF key
    Key_Play,       // 250   0xFA   VK_PLAY             | Play key
    Key_Zoom,       // 251   0xFB   VK_ZOOM             | Zoom key
    Key_unknown,    // 252   0xFC   VK_NONAME           | Reserved
    Key_unknown,    // 253   0xFD   VK_PA1              | PA1 key
    Key_Clear,      // 254   0xFE   VK_OEM_CLEAR        | Clear key
    0
};

// https://code.woboq.org/qt5/qtbase/src/plugins/platforms/windows/qwindowskeymapper.cpp.html
static const unsigned int WinMKeyTbl[] = { // Multimedia keys mapping table
                        // Dec |  Hex | AppCommand
    Key_unknown,        //   0   0x00
    Key_Back,           //   1   0x01   APPCOMMAND_BROWSER_BACKWARD
    Key_Forward,        //   2   0x02   APPCOMMAND_BROWSER_FORWARD
    Key_Refresh,        //   3   0x03   APPCOMMAND_BROWSER_REFRESH
    Key_Stop,           //   4   0x04   APPCOMMAND_BROWSER_STOP
    Key_Search,         //   5   0x05   APPCOMMAND_BROWSER_SEARCH
    Key_Favorites,      //   6   0x06   APPCOMMAND_BROWSER_FAVORITES
    Key_Home,           //   7   0x07   APPCOMMAND_BROWSER_HOME
    Key_VolumeMute,     //   8   0x08   APPCOMMAND_VOLUME_MUTE
    Key_VolumeDown,     //   9   0x09   APPCOMMAND_VOLUME_DOWN
    Key_VolumeUp,       //  10   0x0a   APPCOMMAND_VOLUME_UP
    Key_MediaNext,      //  11   0x0b   APPCOMMAND_MEDIA_NEXTTRACK
    Key_MediaPrevious,  //  12   0x0c   APPCOMMAND_MEDIA_PREVIOUSTRACK
    Key_MediaStop,      //  13   0x0d   APPCOMMAND_MEDIA_STOP
    Key_MediaTogglePlayPause,   //  14   0x0e   APPCOMMAND_MEDIA_PLAYPAUSE
    Key_LaunchMail,     //  15   0x0f   APPCOMMAND_LAUNCH_MAIL
    Key_LaunchMedia,    //  16   0x10   APPCOMMAND_LAUNCH_MEDIA_SELECT
    Key_Launch0,        //  17   0x11   APPCOMMAND_LAUNCH_APP1
    Key_Launch1,        //  18   0x12   APPCOMMAND_LAUNCH_APP2
    Key_BassDown,       //  19   0x13   APPCOMMAND_BASS_DOWN
    Key_BassBoost,      //  20   0x14   APPCOMMAND_BASS_BOOST
    Key_BassUp,         //  21   0x15   APPCOMMAND_BASS_UP
    Key_TrebleDown,     //  22   0x16   APPCOMMAND_TREBLE_DOWN
    Key_TrebleUp,       //  23   0x17   APPCOMMAND_TREBLE_UP
    Key_MicMute,        //  24   0x18   APPCOMMAND_MICROPHONE_VOLUME_MUTE
    Key_MicVolumeDown,  //  25   0x19   APPCOMMAND_MICROPHONE_VOLUME_DOWN
    Key_MicVolumeUp,    //  26   0x1a   APPCOMMAND_MICROPHONE_VOLUME_UP
    Key_Help,           //  27   0x1b   APPCOMMAND_HELP
    Key_Find,           //  28   0x1c   APPCOMMAND_FIND
    Key_New,            //  29   0x1d   APPCOMMAND_NEW
    Key_Open,           //  30   0x1e   APPCOMMAND_OPEN
    Key_Close,          //  31   0x1f   APPCOMMAND_CLOSE
    Key_Save,           //  32   0x20   APPCOMMAND_SAVE
    Key_Printer,        //  33   0x21   APPCOMMAND_PRINT
    Key_Undo,           //  34   0x22   APPCOMMAND_UNDO
    Key_Redo,           //  35   0x23   APPCOMMAND_REDO
    Key_Copy,           //  36   0x24   APPCOMMAND_COPY
    Key_Cut,            //  37   0x25   APPCOMMAND_CUT
    Key_Paste,          //  38   0x26   APPCOMMAND_PASTE
    Key_Reply,          //  39   0x27   APPCOMMAND_REPLY_TO_MAIL
    Key_MailForward,    //  40   0x28   APPCOMMAND_FORWARD_MAIL
    Key_Send,           //  41   0x29   APPCOMMAND_SEND_MAIL
    Key_Spell,          //  42   0x2a   APPCOMMAND_SPELL_CHECK
    Key_unknown,        //  43   0x2b   APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE
    Key_unknown,        //  44   0x2c   APPCOMMAND_MIC_ON_OFF_TOGGLE
    Key_unknown,        //  45   0x2d   APPCOMMAND_CORRECTION_LIST
    Key_MediaPlay,      //  46   0x2e   APPCOMMAND_MEDIA_PLAY
    Key_MediaPause,     //  47   0x2f   APPCOMMAND_MEDIA_PAUSE
    Key_MediaRecord,    //  48   0x30   APPCOMMAND_MEDIA_RECORD
    Key_AudioForward,   //  49   0x31   APPCOMMAND_MEDIA_FAST_FORWARD
    Key_AudioRewind,    //  50   0x32   APPCOMMAND_MEDIA_REWIND
    Key_ChannelDown,    //  51   0x33   APPCOMMAND_MEDIA_CHANNEL_DOWN
    Key_ChannelUp       //  52   0x34   APPCOMMAND_MEDIA_CHANNEL_UP
};
#endif // WIN32


// TODO
// https://dreamswork.github.io/qt4/qkeymapper__mac_8cpp_source.html
// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode 

#endif //DKKEYCODES_H