
def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion 26
	ndkVersion "22.1.7171670"
	ndkPath 'C:/Users/Administrator/digitalknob/DK/3rdParty/android-sdk/ndk/22.1.7171670'
    defaultConfig {
		packagingOptions {
			doNotStrip '**.so'
		}		
        if (buildAsApplication) {
			applicationId "com.digitalknob.dk"
        }
        minSdkVersion 26
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            cmake {
				if (project.hasProperty("armeabi-v7a")) {
					arguments "-DANDROID_APP_PLATFORM=android-26", "-DANDROID_STL=c++_static", "-DCMAKE_ANDROID_ARCH_ABI=armeabi-v7a"
                    abiFilters 'armeabi-v7a'
                } else if (project.hasProperty("arm64-v8a")) {
					arguments "-DANDROID_APP_PLATFORM=android-26", "-DANDROID_STL=c++_static", "-DCMAKE_ANDROID_ARCH_ABI=arm64-v8a"
                    abiFilters 'arm64-v8a'
                } else if (project.hasProperty("x86")) {
					arguments "-DANDROID_APP_PLATFORM=android-26", "-DANDROID_STL=c++_static", "-DCMAKE_ANDROID_ARCH_ABI=x86"
                    abiFilters 'x86'
                } else if (project.hasProperty("x86_64")) {
					arguments "-DANDROID_APP_PLATFORM=android-26", "-DANDROID_STL=c++_static", "-DCMAKE_ANDROID_ARCH_ABI=x86_64"
                    abiFilters 'x86_64'
                } else {
					arguments "-DANDROID_APP_PLATFORM=android-26", "-DANDROID_STL=c++_static"
                    abiFilters 'armeabi-v7a', 'arm64-v8a'
					//, 'x86', 'x86_64'
                }
            }
        }
    }
    aaptOptions {
        noCompress ''
    }
	sourceSets {
        main {
			if (!project.hasProperty('BUILD_LIBS')) {
				jniLibs.srcDirs = ['src/main/jniLibs']
			}
			assets.srcDirs = ['src/main/assets']
        }
    }
    buildTypes {
		debug {
            debuggable true
			minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
			//ndk {
            //    debugSymbolLevel 'full'
            //}
			debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    if (project.hasProperty('BUILD_LIBS')) {
		project.logger.lifecycle('##############################  NOT USING jniLibs #######################################')
        externalNativeBuild {
			cmake {
				path 'src/main/cpp/CMakeLists.txt'
            }
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
