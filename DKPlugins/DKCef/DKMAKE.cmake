#!/usr/bin/cmake -P
if(NOT DKCMAKE_FUNCTIONS_DIR_)
	set(DKCMAKE_FUNCTIONS_DIR_ ${CMAKE_SOURCE_DIR}/../../DKCMake/functions/)
endif()
include(${DKCMAKE_FUNCTIONS_DIR_}DK.cmake)


############ DKCef ############
#NOTE: Use ${CMAKE_PROJECT_NAME} to reference the root parent project if needed
dk_load(dk_builder)
#if(ANDROID OR IOS OR IOSSIM OR (WIN AND (NOT MSVC)))
	dk_disable(DKCef)
	dk_return()
#endif()


if(LINUX)
	#dk_depend(libglib2.0-dev)
	#dk_depend(libgtk2.0-dev)
elseif(MAC)
	#dk_depend(appkit)
	#dk_depend(foundation)
elseif(RASPBERRY)
	dk_depend(libglib2.0-dev)
	dk_depend(libgtk2.0-dev)
elseif(WIN)
	dk_depend(winmm)
endif()
dk_depend(cef_binary)
dk_depend(DK)
dk_depend(DKDuktape)


dk_generateCmake(DKCef)
dk_assets(DKCef)


if(WIN_X86 AND MSVC)
	dk_copy(${CEF_BINARY}/Resources/ ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
	if(DEBUG)
		dk_copy(${CEF_BINARY}/Debug/ ${DK_PROJECT_DIR}/assets/DKCef/win_x86_Debug OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/assets/DKCef/win_x86_Debug OVERWRITE)
		FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/win_x86_Debug/cef_sandbox.lib)
		FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/win_x86_Debug/libcef.lib)
		FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/win_x86_Debug/wow_helper.exe)
	endif()
	if(RELEASE)
		##UPX_COMPRESS(${CEF_BINARY}/Release/libcef.dll)
		dk_copy(${CEF_BINARY}/Release/ ${DK_PROJECT_DIR}/assets/DKCef/win_x86_Release OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/assets/DKCef/win_x86_Release OVERWRITE)
		FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/win_x86_Release/cef_sandbox.lib)
		FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/win_x86_Release/libcef.lib)
		FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/win_x86_Release/wow_helper.exe)
	endif()
	FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/icudtl.dat)
	LIST(APPEND DEBUG_LINK_FLAGS /DELAYLOAD:libcef.dll)
	LIST(APPEND RELEASE_LINK_FLAGS /DELAYLOAD:libcef.dll)
	LIST(APPEND DEBUG_LINK_FLAGS /DELAYLOAD:chrome_elf.dll)
	LIST(APPEND RELEASE_LINK_FLAGS /DELAYLOAD:chrome_elf.dll)
endif()

if(WIN_X86_64 AND MSVC)
	dk_copy(${CEF_BINARY}/Resources/ ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
	if(DEBUG)
		dk_copy(${CEF_BINARY}/Debug/ ${DK_PROJECT_DIR}/assets/DKCef/win_x86_64_Debug OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/assets/DKCef/win_x86_64_Debug OVERWRITE)
		FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/win_x86_64_Debug/cef_sandbox.lib)
		FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/win_x86_64_Debug/libcef.lib)
		FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/win_x86_64_Debug/wow_helper.exe)
	endif()
	if(RELEASE)
		#UPX_COMPRESS(${CEF_BINARY}/Release/libcef.dll)
		dk_copy(${CEF_BINARY}/Release/ ${DK_PROJECT_DIR}/assets/DKCef/win_x86_64_Release OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/assets/DKCef/win_x86_64_Release OVERWRITE)
		FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/win_x86_64_Release/cef_sandbox.lib)
		FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/win_x86_64_Release/libcef.lib)
		FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/win_x86_64_Release/wow_helper.exe)
	endif()
	FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/icudtl.dat)
	LIST(APPEND DEBUG_LINK_FLAGS /DELAYLOAD:libcef.dll)
	LIST(APPEND RELEASE_LINK_FLAGS /DELAYLOAD:libcef.dll)
	LIST(APPEND DEBUG_LINK_FLAGS /DELAYLOAD:chrome_elf.dll)
	LIST(APPEND RELEASE_LINK_FLAGS /DELAYLOAD:chrome_elf.dll)
endif()

#https://bitbucket.org/chromiumembedded/cef/wiki/Tutorial#markdown-header-mac-os-x-build-steps
if(MAC_X86_64)
	#dk_info("Adding Chromium Embedded Framework.framework to bundle . . .")
	#add_custom_command(
	#	TARGET DKCef
	#	POST_BUILD
	#	COMMAND ${CMAKE_COMMAND} -E copy_directory
	#		"${CEF_BINARY}/$<CONFIG>/Chromium Embedded Framework.framework"
	#		"$<TARGET_FILE_DIR:${CMAKE_PROJECT_NAME}>/../Frameworks/Chromium Embedded Framework.framework"
	#)
endif()

if(LINUX_X86)
if(NOT RASPBERRY)
	if(DEBUG)
		dk_copy(${CEF_BINARY}/Debug ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Debug ${DK_PROJECT_DIR}/linux_x86/Debug OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/linux_x86/Debug OVERWRITE)
	endif()
	if(RELEASE)
		dk_copy(${CEF_BINARY}/Release ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Release ${DK_PROJECT_DIR}/linux_x86/Release OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/linux_x86/Release OVERWRITE)
	endif()
	FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/cef_sandbox.a)
	FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/libcef.a)
	FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/wow_helper.exe)
endif()
endif()
if(LINUX_X86_64)
if(NOT RASPBERRY)
	if(DEBUG)
		dk_copy(${CEF_BINARY}/Debug ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Debug ${DK_PROJECT_DIR}/linux_x86_64/Debug OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/linux_x86_64/Debug OVERWRITE)
	endif()
	if(RELEASE)
		dk_copy(${CEF_BINARY}/Release ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Release ${DK_PROJECT_DIR}/linux_x86_64/Release OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/linux_x86_64/Release OVERWRITE)
	endif()
	FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/cef_sandbox.a)
	FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/libcef.a)
	FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/wow_helper.exe)
endif()
endif()

if(RASPBERRY_ARM32)
	if(DEBUG)
		dk_copy(${CEF_BINARY}/Debug ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Debug ${DK_PROJECT_DIR}/raspberry_arm32/Debug OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/raspberry_arm32/Debug OVERWRITE)
	endif()
	if(RELEASE)
		dk_copy(${CEF_BINARY}/Release ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Release ${DK_PROJECT_DIR}/raspberry_arm32/Release OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/raspberry_arm32/Release OVERWRITE)
	endif()
	FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/cef_sandbox.a)
	FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/libcef.a)
	FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/wow_helper.exe)
endif()
if(RASPBERRY_ARM64)
	if(DEBUG)
		dk_copy(${CEF_BINARY}/Debug ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Debug ${DK_PROJECT_DIR}/raspberry_arm64/Debug OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/raspberry_arm64/Debug OVERWRITE)
	endif()
	if(RELEASE)
		dk_copy(${CEF_BINARY}/Release ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources ${DK_PROJECT_DIR}/assets/DKCef OVERWRITE)
		dk_copy(${CEF_BINARY}/Release ${DK_PROJECT_DIR}/raspberry_arm64/Release OVERWRITE)
		dk_copy(${CEF_BINARY}/Resources/icudtl.dat ${DK_PROJECT_DIR}/raspberry_arm64/Release OVERWRITE)
	endif()
	FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/cef_sandbox.a)
	FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/libcef.a)
	FILE(REMOVE ${DK_PROJECT_DIR}/assets/DKCef/wow_helper.exe)
endif()
