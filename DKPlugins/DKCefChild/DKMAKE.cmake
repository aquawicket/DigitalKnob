#NOTE: Use ${CMAKE_PROJECT_NAME} to reference the root parent project if needed

dk_depend(DKCef)
dk_assets(DKCefChild)

#dk_set(QUEUE_BUILD ON)
dk_addToPluginList(DKCefChild)
#dk_executable(DKCefChild)


if(WIN)
	# Copy the DKCefChild into the app bundle
	if(DEBUG)
		dk_copy(${DKPLUGINS}/DKCefChild/${OS}/${DEBUG_DIR}/DKCefChild.exe ${DKPROJECT}/assets/DKCef/${OS}Debug TRUE)
	endif()
	if(RELEASE)
		dk_copy(${DKPLUGINS}/DKCefChild/${OS}/${RELEASE_DIR}/DKCefChild.exe ${DKPROJECT}/assets/DKCef/${OS}Release TRUE)
	endif()
endif()

if(MAC_64)
#	if(DEBUG)
#		dk_copy(${DKPLUGINS}/DKCefChild/${OS}/${DEBUG_DIR}/DKCefChild.app "${DKPROJECT}/assets/DKCef/${OS}Debug/${AppName} Helper.app" TRUE)
#		dk_rename(${DKPROJECT}/${OS}/${DEBUG_DIR}/${AppName}.app/Contents/Frameworks/DKCefChild.app/Contents/MacOS/DKCefChild "${DKPROJECT}/${OS}/${DEBUG_DIR}/${AppName}.app/Contents/Frameworks/DKCefChild.app/Contents/MacOS/${AppName} Helper")
#		dk_rename(${DKPROJECT}/${OS}/${DEBUG_DIR}/${AppName}.app/Contents/Frameworks/DKCefChild.app "${DKPROJECT}/${OS}/${DEBUG_DIR}/${AppName}.app/Contents/Frameworks/${AppName} Helper.app")
#	endif()
#	if(RELEASE)
#		dk_copy(${DKPLUGINS}/DKCefChild/${OS}/${RELEASE_DIR}/DKCefChild.app "${DKPROJECT}/assets/DKCef/${OS}Release/${AppName} Helper.app" TRUE)
#		dk_rename(${DKPROJECT}/${OS}/${RELEASE_DIR}/${AppName}.app/Contents/Frameworks/DKCefChild.app/Contents/MacOS/DKCefChild "${DKPROJECT}/${OS}/${RELEASE_DIR}/${AppName}.app/Contents/Frameworks/DKCefChild.app/Contents/MacOS/${AppName} Helper")
#		dk_rename(${DKPROJECT}/${OS}/${RELEASE_DIR}/${AppName}.app/Contents/Frameworks/DKCefChild.app "${DKPROJECT}/${OS}/${RELEASE_DIR}/${AppName}.app/Contents/Frameworks/${AppName} Helper.app")
#	endif()
#	MAC_dk_queueCommand(install_name_tool -change "@executable_path/Chromium Embedded Framework" "@executable_path/../../../../Frameworks/Chromium Embedded Framework.framework/Chromium Embedded Framework" "${DKPROJECT}/${OS}/${DEBUG_DIR}/${AppName}.app/Contents/Frameworks/${AppName} Helper.app/Contents/MacOS/${AppName} Helper")
#	
#	FIXME - command does not work because app does not exist yet
#	MAC_dk_queueCommand(install_name_tool -change "@executable_path/Chromium Embedded Framework" "@executable_path/../Frameworks/Chromium Embedded Framework.framework/Chromium Embedded Framework" "${DKPROJECT}/${OS}/${DEBUG_DIR}/${AppName}.app/Contents/MacOS/${AppName}")
endif()

if(LINUX)
	dk_remove(${DKPROJECT}/assets/DKCef/DKCefChild)
	if(DEBUG)
		dk_copy(${DKPLUGINS}/DKCefChild/${OS}/${DEBUG_DIR}/DKCefChild ${DKPROJECT}/assets/DKCef TRUE)
	endif()
	if(RELEASE)
		dk_copy(${DKPLUGINS}/DKCefChild/${OS}/${RELEASE_DIR}/DKCefChild ${DKPROJECT}/assets/DKCef TRUE)
	endif()
endif()

if(RASPBERRY)
	dk_remove(${DKPROJECT}/assets/DKCef/DKCefChild)
	if(DEBUG)
		dk_copy(${DKPLUGINS}/DKCefChild/${OS}/${DEBUG_DIR}/DKCefChild ${DKPROJECT}/assets/DKCef TRUE)
	endif()
	if(RELEASE)
		dk_copy(${DKPLUGINS}/DKCefChild/${OS}/${RELEASE_DIR}/DKCefChild ${DKPROJECT}/assets/DKCef TRUE)
	endif()
endif()




## DKCefChild win
if(WIN)
	file(WRITE ${plugin_path}/CMakeLists.txt "### This file is generated by DKCMake. Any Changes here, will be overwritten. ###\n")
	dk_appendCmake("### ${name} ###\n")
	dk_appendCmake("cmake_minimum_required(VERSION 3.10)\n")
	dk_appendCmake("cmake_policy(SET CMP0054 NEW)\n")
	dk_appendCmake("include(${DKCMAKE}/DK.cmake)\n")
	dk_appendCmake("project(DKCefChild)\n")
	dk_appendCmake("include_directories(${CEF_BINARY})\n")
	dk_appendCmake("include_directories(${DKPLUGINS})\n")
	
	## DEBUG ##
	dk_appendCmake("find_library(libcefD libcef.lib ${CEF_BINARY}/${DEBUG_DIR})\n")
	dk_appendCmake("list(APPEND CEF_BINARY_DEBUG_DKLIBS debug \${libcefD})\n")
	dk_appendCmake("find_library(libcef_dll_wrapperD libcef_dll_wrapper.lib ${CEF_BINARY}/${OS}/libcef_dll_wrapper/${DEBUG_DIR})\n")
	dk_appendCmake("list(APPEND CEF_BINARY_DEBUG_DKLIBS debug \${libcef_dll_wrapperD})\n")
	#dk_appendCmake("find_library(libcef_sandboxD cef_sandbox.lib ${CEF_BINARY}/${DEBUG_DIR})\n")
	#dk_appendCmake("list(APPEND CEF_BINARY_DEBUG_DKLIBS debug \${libcef_sandboxD})\n")

	## RELEASE ##
	dk_appendCmake("find_library(libcefR libcef.lib ${CEF_BINARY}/${RELEASE_DIR})\n")
	dk_appendCmake("list(APPEND CEF_BINARY_RELEASE_DKLIBS optimized \${libcefR})\n")
	dk_appendCmake("find_library(libcef_dll_wrapperR libcef_dll_wrapper.lib ${CEF_BINARY}/${OS}/libcef_dll_wrapper/${RELEASE_DIR})\n")
	dk_appendCmake("list(APPEND CEF_BINARY_RELEASE_DKLIBS optimized \${libcef_dll_wrapperR})\n")
	##dk_appendCmake("find_library(libcef_sandboxR cef_sandbox.lib ${CEF_BINARY}/${RELEASE_DIR})\n")
	#dk_appendCmake("list(APPEND CEF_BINARY_RELEASE_DKLIBS optimized \${libcef_sandboxR})\n")

	dk_appendCmake("file(GLOB DKCefChild_SRC ${DKPLUGINS}/DKCefChild/*.cpp ${DKPLUGINS}/DKCefChild/*.manifest)\n")	
	if(WIN_32)
		dk_appendCmake("add_executable(DKCefChild WIN32 \${DKCefChild_SRC})\n")
	endif()
	if(WIN_64)
		dk_appendCmake("add_executable(DKCefChild WIN64 \${DKCefChild_SRC})\n")
	endif()
	dk_appendCmake("target_link_libraries(DKCefChild \${CEF_BINARY_DEBUG_DKLIBS} \${CEF_BINARY_RELEASE_DKLIBS} dbghelp.lib version.lib winmm.lib ws2_32.lib psapi.lib)\n")
	dk_appendCmake("set_target_properties(DKCefChild PROPERTIES LINK_FLAGS_DEBUG \"/MANIFESTUAC:NO /SUBSYSTEM:CONSOLE /SAFESEH:NO\" LINK_FLAGS_RELEASE \"/INCREMENTAL:NO /OPT:NOREF /MANIFESTUAC:NO /SUBSYSTEM:CONSOLE /FORCE /SAFESEH:NO\")\n")
endif()


## DKCefChild mac
if(MAC)
	file(WRITE ${plugin_path}/CMakeLists.txt "### This file is generated by DKCMake. Any Changes here, will be overwritten. ###\n")
	dk_appendCmake("### ${name} ###\n")
	dk_appendCmake("cmake_minimum_required(VERSION 3.10)\n")
	dk_appendCmake("cmake_policy(SET CMP0054 NEW)\n")
	dk_appendCmake("cmake_policy(SET CMP0002 OLD)\n")
	dk_appendCmake("include(${DKCMAKE}/DK.cmake)\n")
	dk_appendCmake("project(DKCefChild)\n")
	dk_appendCmake("include_directories(${CEF_BINARY})\n")
	dk_appendCmake("include_directories(${DKPLUGINS})\n")
	
	#if(DEBUG)
		#dk_appendCmake("list(APPEND CEF_BINARY_DEBUG_DKLIBS debug \"${CEF_BINARY}/${DEBUG_DIR}/Chromium Embedded Framework.framework\")\n")
		dk_appendCmake("find_library(libcef_dll_wrapperD libcef_dll_wrapper.a ${CEF_BINARY}/${OS}/libcef_dll_wrapper/${DEBUG_DIR})\n")
		dk_appendCmake("list(APPEND CEF_BINARY_DEBUG_DKLIBS debug \${libcef_dll_wrapperD})\n")
		
		#dk_appendCmake("find_library(AK AppKit)\n")
		#dk_appendCmake("list(APPEND CEF_BINARY_DEBUG_DKLIBS ${AK})\n")
	#endif()
	#if(RELEASE)
		#dk_appendCmake("list(APPEND CEF_BINARY_RELEASE_DKLIBS optimized \"${CEF_BINARY}/${RELEASE_DIR}/Chromium Embedded Framework.framework\")\n")
		dk_appendCmake("find_library(libcef_dll_wrapperR libcef_dll_wrapper.a ${CEF_BINARY}/${OS}/libcef_dll_wrapper/${RELEASE_DIR})\n")
		dk_appendCmake("list(APPEND CEF_BINARY_RELEASE_DKLIBS optimized \${libcef_dll_wrapperR})\n")
		
		#dk_appendCmake("find_library(AK AppKit)\n")
		#dk_appendCmake("list(APPEND CEF_BINARY_RELEASE_DKLIBS ${AK})\n")
	#endif()
	
	dk_appendCmake("file(GLOB DKCefChild_SRC ${DKPLUGINS}/DKCefChild/*.cpp)\n")
	if(MAC_32)
		dk_appendCmake("SET(CMAKE_OSX_ARCHITECTURES \"i386\")\n")
	endif()
	if(MAC_64)
		dk_appendCmake("SET(CMAKE_OSX_ARCHITECTURES \"x86_64\")\n")
	endif()
	dk_appendCmake("add_executable(DKCefChild MACOSX_BUNDLE \${DKCefChild_SRC})\n")
	dk_appendCmake("target_link_libraries(DKCefChild \${CEF_BINARY_DEBUG_DKLIBS} \${CEF_BINARY_RELEASE_DKLIBS})\n")
endif()


## DKCefChild linux
if(LINUX)
	file(WRITE ${plugin_path}/CMakeLists.txt "### This file is generated by DKCMake. Any Changes here, will be overwritten. ###\n")
	dk_appendCmake("### ${name} ###\n")
	dk_appendCmake("cmake_minimum_required(VERSION 3.10)\n")
	dk_appendCmake("cmake_policy(SET CMP0054 NEW)\n")
	dk_appendCmake("CMAKE_POLICY(SET CMP0002 OLD)\n")
	dk_appendCmake("include(${DKCMAKE}/DK.cmake)\n")
	dk_appendCmake("project(DKCefChild)\n")
	dk_appendCmake("include_directories(${CEF_BINARY})\n")
	dk_appendCmake("include_directories(${DKPLUGINS})\n")
		
	if(DEBUG)
		dk_appendCmake("find_library(libcef_dll_wrapperD libcef_dll_wrapper.a ${CEF_BINARY}/${OS}/${DEBUG_DIR}/libcef_dll_wrapper)\n")
		dk_appendCmake("list(APPEND CEF_BINARY_DEBUG_DKLIBS debug \${libcef_dll_wrapperD})\n")
		
		dk_appendCmake("find_library(libcefD libcef.so ${CEF_BINARY}/${DEBUG_DIR})\n")
		dk_appendCmake("list(APPEND CEF_BINARY_DEBUG_DKLIBS debug \${libcefD})\n")
		
		dk_appendCmake("file(GLOB DKCefChild_SRC ${DKPLUGINS}/DKCefChild/*.cpp)\n")
		dk_appendCmake("add_executable(DKCefChild \${DKCefChild_SRC})\n")
		dk_appendCmake("target_link_libraries(DKCefChild  \${CEF_BINARY_DEBUG_DKLIBS})\n")
	elseif(RELEASE)
		dk_appendCmake("find_library(libcef_dll_wrapperR libcef_dll_wrapper.a ${CEF_BINARY}/${OS}/${RELEASE_DIR}/libcef_dll_wrapper)\n")
		dk_appendCmake("list(APPEND CEF_BINARY_RELEASE_DKLIBS optimized \${libcef_dll_wrapperR})\n")
		
		dk_appendCmake("find_library(libcefR libcef.so ${CEF_BINARY}/${RELEASE_DIR})\n")
		dk_appendCmake("list(APPEND CEF_BINARY_RELEASE_DKLIBS optimized \${libcefR})\n")
		
		dk_appendCmake("file(GLOB DKCefChild_SRC ${DKPLUGINS}/DKCefChild/*.cpp)\n")
		dk_appendCmake("add_executable(DKCefChild \${DKCefChild_SRC})\n")
		dk_appendCmake("target_link_libraries(DKCefChild  \${CEF_BINARY_RELEASE_DKLIBS})\n")
	endif()
endif()

## DKCefChild raspberry
if(RASPBERRY)
	file(WRITE ${plugin_path}/CMakeLists.txt "### This file is generated by DKCMake. Any Changes here, will be overwritten. ###\n")
	dk_appendCmake("### ${name} ###\n")
	dk_appendCmake("cmake_minimum_required(VERSION 3.10)\n")
	dk_appendCmake("cmake_policy(SET CMP0054 NEW)\n")
	dk_appendCmake("CMAKE_POLICY(SET CMP0002 OLD)\n")
	dk_appendCmake("include(${DKCMAKE}/DK.cmake)\n")
	dk_appendCmake("project(DKCefChild)\n")
	dk_appendCmake("include_directories(${CEF_BINARY})\n")
	dk_appendCmake("include_directories(${DKPLUGINS})\n")
		
	if(DEBUG)
		dk_appendCmake("find_library(libcef_dll_wrapperD libcef_dll_wrapper.a ${CEF_BINARY}/${OS}/${DEBUG_DIR}/libcef_dll_wrapper)\n")
		dk_appendCmake("list(APPEND CEF_BINARY_DEBUG_DKLIBS debug \${libcef_dll_wrapperD})\n")
		
		dk_appendCmake("find_library(libcefD libcef.so ${CEF_BINARY}/${DEBUG_DIR})\n")
		dk_appendCmake("list(APPEND CEF_BINARY_DEBUG_DKLIBS debug \${libcefD})\n")
		
		dk_appendCmake("file(GLOB DKCefChild_SRC ${DKPLUGINS}/DKCefChild/*.cpp)\n")
		dk_appendCmake("add_executable(DKCefChild \${DKCefChild_SRC})\n")
		dk_appendCmake("target_link_libraries(DKCefChild  \${CEF_BINARY_DEBUG_DKLIBS})\n")
	elseif(RELEASE)
		dk_appendCmake("find_library(libcef_dll_wrapperR libcef_dll_wrapper.a ${CEF_BINARY}/${OS}/${RELEASE_DIR}/libcef_dll_wrapper)\n")
		dk_appendCmake("list(APPEND CEF_BINARY_RELEASE_DKLIBS optimized \${libcef_dll_wrapperR})\n")
		
		dk_appendCmake("find_library(libcefR libcef.so ${CEF_BINARY}/${RELEASE_DIR})\n")
		dk_appendCmake("list(APPEND CEF_BINARY_RELEASE_DKLIBS optimized \${libcefR})\n")
		
		dk_appendCmake("file(GLOB DKCefChild_SRC ${DKPLUGINS}/DKCefChild/*.cpp)\n")
		dk_appendCmake("add_executable(DKCefChild \${DKCefChild_SRC})\n")
		dk_appendCmake("target_link_libraries(DKCefChild  \${CEF_BINARY_RELEASE_DKLIBS})\n")
	endif()
endif()
