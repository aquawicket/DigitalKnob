if(DKOPTIONS_INCLUDED)
  return()
endif(DKOPTIONS_INCLUDED)
set(DKOPTIONS_INCLUDED true)


if(COMMAND cmake_policy)
	cmake_policy(SET CMP0003 NEW) ##https://cmake.org/cmake/help/latest/policy/CMP0003.html
endif(COMMAND cmake_policy)

###############################################################
## Set variables for paths
###############################################################
dk_file_getDigitalknobPath(DIGITALKNOB)
DKSET(DKCMAKE ${DIGITALKNOB}/DK/DKCMake)
DKSET(DKPLUGINS ${DIGITALKNOB}/DK/DKPlugins)
DKSET(3RDPARTY ${DIGITALKNOB}/DK/3rdParty)
DKSET(DKIMPORTS ${3RDPARTY}/_DKIMPORTS)
DKSET(DKDOWNLOAD ${DIGITALKNOB}/Download)
DKSET(DKWEB "http://127.0.0.1")
DKSET(CURRENT_DIR ${DIGITALKNOB})


###########################################################################
## Bulid the TARGET passed from the command line
###########################################################################
if(TARGET)
	message(STATUS "Building ${TARGET}\n")
	dk_FindTarget(${TARGET} target_path)
	if(NOT target_path)
		message(STATUS "ERROR: Could not find target ${TARGET}")
		Wait("press any key to exit")
		dk_exit()
	endif()
	message("found ${TARGET} at ${target_path}")
	
	#file(WRITE ${DKCMAKE}/DKMAKE.cmake DKDEPEND(${TARGET}))
	set(CMAKE_BINARY_DIR "${CMAKE_BINARY_DIR}/win32")
	#message(STATUS "CMAKE_BINARY_DIR = ${CMAKE_BINARY_DIR}")
endif()


###########################################################################
## Get variables for Build Type
###########################################################################
option(DEBUG "Build Debug Output" OFF)
option(RELEASE "Build Release Output" OFF)
if(NOT DEBUG)
if(NOT RELEASE)
	message(STATUS No Build type selected. Defaulting to DEBUG)
	DKSET(DEBUG ON)
endif()
endif()

###########################################################################
## Get variables for Build Level
###########################################################################
option(BUILD "Simpily build the app or library" OFF)
option(REBUILD "Rebuild the app" OFF)
option(REBUILDALL "Rebuild the app and all dependencies" OFF)
if(NOT BUILD)
if(NOT REBUILD)
if(NOT REBUILDALL)
	message(STATUS No Build level selected, defaulting to REBUILDALL)
	DKSET(REBUILDALL ON)
endif()
endif()
endif()


###########################################################################
## Get variables for Library Build Type (STATIC or SHARED)
###########################################################################
option(STATIC "Build Static Libraries and Plugins" OFF)
option(SHARED "Build SHARED Libraries and Plugins" OFF)
if(NOT STATIC)
if(NOT SHARED)
	DKSET(STATIC ON)
endif()
endif()


###########################################################################
## Get variables for CEF
###########################################################################
option(DKCEF "Use Chromium Embeded Framework" OFF)
if(${DKCEF} STREQUAL "ON")
	add_definitions(-DHAVE_DKCef)
endif()


########### Determine if we are building a DKApp, DKPlugin or 3rdParty #############
#string(FIND "${CMAKE_BINARY_DIR}" "/DKApps/" index)
#if(${index} GREATER -1)
#	message(STATUS "Building DKApp . . .")
#	DKSET(DKAPP ON)
#	add_definitions(-DDKAPP)
#endif()
#string(FIND "${CMAKE_BINARY_DIR}" "/DKPlugin/" index)
#if(${index} GREATER -1)
#	message(STATUS "Building DKPlugin . . .")
#endif()
#string(FIND "${CMAKE_BINARY_DIR}" "/3rdParty/" index)
#if(${index} GREATER -1)
#	message(STATUS "Building 3rdParty . . .")
#endif()


########### Determine the OS we are building for ####################
string(FIND "${CMAKE_BINARY_DIR}" "/win32" index)
if(${index} GREATER -1)
	message(STATUS "Creating Windows x32 Project Files")
	DKSET(WIN ON)
	DKSET(WIN_32 ON)
	DKSET(OS "win32")
	DKSET(DEBUG_DIR Debug)
	DKSET(RELEASE_DIR Release)
	DKSET(CMAKE_SKIP_RPATH ON)
	string(REPLACE "/win32" "" DKPROJECT ${CMAKE_BINARY_DIR})
endif()
string(FIND "${CMAKE_BINARY_DIR}" "/win64" index)
if(${index} GREATER -1)
	message(STATUS "*** Creating Windows x64 Project Files ***")
	DKSET(WIN ON)
	DKSET(WIN_64 ON)
	DKSET(OS "win64")
	DKSET(DEBUG_DIR Debug)
	DKSET(RELEASE_DIR Release)
	DKSET(CMAKE_SKIP_RPATH ON)
	string(REPLACE "/win64" "" DKPROJECT ${CMAKE_BINARY_DIR})
endif()
string(FIND "${CMAKE_BINARY_DIR}" "/mac32" index)
if(${index} GREATER -1)
	message(STATUS "*** Creating Mac x32 Project Files ***")
	DKSET(MAC ON)
	DKSET(MAC_32 ON)
	DKSET(OS "mac32")
	DKSET(DEBUG_DIR Debug)
	DKSET(RELEASE_DIR Release)
	DKSET(CMAKE_SKIP_RPATH ON)
	string(REPLACE "/mac32" "" DKPROJECT ${CMAKE_BINARY_DIR})
endif()
string(FIND "${CMAKE_BINARY_DIR}" "/mac64" index)
if(${index} GREATER -1)
	message(STATUS "*** Creating Mac x64 Project Files ***")
	DKSET(MAC ON)
	DKSET(MAC_64 ON)
	DKSET(OS "mac64")
	DKSET(DEBUG_DIR Debug)
	DKSET(RELEASE_DIR Release)
	DKSET(CMAKE_SKIP_RPATH ON)
	string(REPLACE "/mac64" "" DKPROJECT ${CMAKE_BINARY_DIR})
endif()
string(FIND "${CMAKE_BINARY_DIR}" "/ios32" index)
if(${index} GREATER -1)
	message(STATUS "*** Creating iOS x32 Project Files ***")
	DKSET(IOS ON)
	DKSET(IOS_32 ON)
	DKSET(OS "ios32")
	DKSET(DEBUG_DIR Debug-iphoneos)
	DKSET(RELEASE_DIR Release-iphoneos)
	DKSET(CMAKE_SKIP_RPATH ON)
	string(REPLACE "/ios32" "" DKPROJECT ${CMAKE_BINARY_DIR})
endif()
string(FIND "${CMAKE_BINARY_DIR}" "/ios64" index)
if(${index} GREATER -1)
	message(STATUS "*** Creating iOS x64 Project Files ***")
	DKSET(IOS ON)
	DKSET(IOS_64 ON)
	DKSET(OS "ios64")
	DKSET(DEBUG_DIR Debug-iphoneos)
	DKSET(RELEASE_DIR Release-iphoneos)
	DKSET(CMAKE_SKIP_RPATH ON)
	string(REPLACE "/ios64" "" DKPROJECT ${CMAKE_BINARY_DIR})
endif()
string(FIND "${CMAKE_BINARY_DIR}" "/iossim32" index)
if(${index} GREATER -1)
	message(STATUS "*** Creating iOS-Simulator x32 Project Files ***")
	DKSET(IOSSIM ON)
	DKSET(IOSSIM_32 ON)
	DKSET(OS "iossim32")
	DKSET(DEBUG_DIR Debug-iphonesimulator)
	DKSET(RELEASE_DIR Release-iphonesimulator)
	DKSET(CMAKE_SKIP_RPATH ON)
	string(REPLACE "/iossim32" "" DKPROJECT ${CMAKE_BINARY_DIR})
endif()
string(FIND "${CMAKE_BINARY_DIR}" "/iossim64" index)
if(${index} GREATER -1)
	message(STATUS "*** Creating iOS-Simulator x64 Project Files ***")
	DKSET(IOSSIM ON)
	DKSET(IOSSIM_64 ON)
	DKSET(OS "iossim64")
	DKSET(DEBUG_DIR Debug-iphonesimulator)
	DKSET(RELEASE_DIR Release-iphonesimulator)
	DKSET(CMAKE_SKIP_RPATH ON)
	string(REPLACE "/iossim64" "" DKPROJECT ${CMAKE_BINARY_DIR})
endif()
string(FIND "${CMAKE_BINARY_DIR}" "/linux32" index)
if(${index} GREATER -1)
if(NOT RASPBERRY)
	message(STATUS "*** Creating Linux x32 Project Files ***")
	DKSET(LINUX ON)
	DKSET(LINUX_32 ON)
	DKSET(OS "linux32")
	DKSET(DEBUG_DIR Debug)
	DKSET(RELEASE_DIR Release)
	string(REPLACE "/linux32" "" DKPROJECT ${CMAKE_BINARY_DIR})
endif()
endif()
string(FIND "${CMAKE_BINARY_DIR}" "/linux64" index)
if(${index} GREATER -1)
if(NOT RASPBERRY)
	message(STATUS "*** Creating Linux x64 Project Files ***")
	DKSET(LINUX ON)
	DKSET(LINUX_64 ON)
	DKSET(OS "linux64")
	DKSET(DEBUG_DIR Debug)
	DKSET(RELEASE_DIR Release)
	string(REPLACE "/linux64" "" DKPROJECT ${CMAKE_BINARY_DIR})
endif()
endif()
string(FIND "${CMAKE_BINARY_DIR}" "/raspberry32" index)
if(${index} GREATER -1)
	message(STATUS "*** Creating RASPBERRY x32 Project Files ***")
	DKSET(RASPBERRY ON)
	DKSET(RASPBERRY_32 ON)
	DKSET(OS "raspberry32")
	DKSET(DEBUG_DIR Debug)
	DKSET(RELEASE_DIR Release)
	string(REPLACE "/raspberry32" "" DKPROJECT ${CMAKE_BINARY_DIR})
endif()
string(FIND "${CMAKE_BINARY_DIR}" "/raspberry64" index)
if(${index} GREATER -1)
	message(STATUS "*** Creating Raspberry x64 Project Files ***")
	DKSET(RASPBERRY ON)
	DKSET(RASPBERRY_64 ON)
	DKSET(OS "raspberry64")
	DKSET(DEBUG_DIR Debug)
	DKSET(RELEASE_DIR Release)
	string(REPLACE "/raspberry64" "" DKPROJECT ${CMAKE_BINARY_DIR})
endif()
string(FIND "${CMAKE_BINARY_DIR}" "/android32" index)
if(${index} GREATER -1)
	message(STATUS "*** Creating Android x32 Project Files ***")
	DKSET(ANDROID ON)
	DKSET(ANDROID_32 ON)
	DKSET(OS "android32")
	DKSET(DEBUG_DIR Debug)
	DKSET(RELEASE_DIR Release)
	DKSET(CMAKE_SKIP_RPATH ON)
	string(REPLACE "/android32" "" DKPROJECT ${CMAKE_BINARY_DIR})
endif()
string(FIND "${CMAKE_BINARY_DIR}" "/android64" index)
if(${index} GREATER -1)
	message(STATUS "*** Creating Android x64 Project Files ***")
	DKSET(ANDROID ON)
	DKSET(ANDROID_64 ON)
	DKSET(OS "android64")
	DKSET(DEBUG_DIR Debug)
	DKSET(RELEASE_DIR Release)
	DKSET(CMAKE_SKIP_RPATH ON)
	string(REPLACE "/android64" "" DKPROJECT ${CMAKE_BINARY_DIR})
endif()
if(NOT OS)
	message(STATUS "CMAKE_BINARY_DIR = ${CMAKE_BINARY_DIR}")
	message(FATAL_ERROR "The binary directory must contain an os folder. \n Valid folders are win32,win64,mac32,mac64,linux32,linux64,ios32,ios64,iossim32,iossim64,android32,android64,raspberry32 or raspberry64 \n EXAMPLE: digitalknob/DKApps/MyApp/win32")
	DKREMOVE(${CMAKE_BINARY_DIR})
endif()

## we use /Debug and /Release folders for Linux, Android and Raspberry
## if they are present, remove them and let DEBUG and RELEASE flags deal with that later.
string(REPLACE "/Debug" "" DKPROJECT ${DKPROJECT})
string(REPLACE "/Release" "" DKPROJECT ${DKPROJECT})



## NEW STYLE
#if(WIN) #OS
#	add_definitions(-DWIN) #OS
#	if(X32) #ARCH
#		add_definitions(-DWIN_X32) #OS_ARCH
#		if(DEBUG)
#			add_definitions(-DWIN_X32_DEBUG) #OS_ARCH_TYPE
#		endif()
#		if(RELEASE)
#			add_definitions(-DWIN_X32_RELEASE) #OS_ARCH_TYPE
#		endif()
#	endif()
#	if(X64) #ARCH
#		add_definitions(-DWIN_X64) #OS_ARCH
#		if(DEBUG)
#			add_definitions(-DWIN_X64_DEBUG) #OS_ARCH_TYPE
#		endif()
#		if(RELEASE)
#			add_definitions(-DWIN_X64_RELEASE) #OS_ARCH_TYPE
#		endif()
#	endif()
#	if(ARM32) #ARCH
#		add_definitions(-DWIN_ARM32) #OS_ARCH
#		if(DEBUG)
#			add_definitions(-DWIN_ARM32_DEBUG) #OS_ARCH_TYPE
#		endif()
#		if(RELEASE)
#			add_definitions(-DWIN_ARM32_RELEASE) #OS_ARCH_TYPE
#		endif()
#	endif()
#	if(ARM64) #ARCH
#		add_definitions(-DWIN_ARM64) #OS_ARCH
#		if(DEBUG)
#			add_definitions(-DWIN_ARM64_DEBUG) #OS_ARCH_TYPE
#		endif()
#		if(RELEASE)
#			add_definitions(-DWIN_ARM64_RELEASE) #OS_ARCH_TYPE
#		endif()
#	endif()
#endif()
