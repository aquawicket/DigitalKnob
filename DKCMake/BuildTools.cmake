if(DKBUILDTOOLS_INCLUDED)
  return()
endif(DKBUILDTOOLS_INCLUDED)
set(DKBUILDTOOLS_INCLUDED true)
 
### User Friendly Options ###
DKSET(WARNINGS_AS_ERRORS OFF)
DKSET(WARNING_LEVEL 3)
DKSET(WARNING_4244 ON)
#DKSET(STATIC ON)
#DKSET(SHARED OFF)








## Compiler Flags Notes
# /fsanitize=address      			                        when using this, turn off /RTC1, it is incompatable 
# /EHsc                                                     https://stackoverflow.com/a/4574319/688352
# /D_SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING
# /D__STDC_WANT_LIB_EXT1__                                  enable CRT Secure functions extension
# /D_CRT_SECURE_NO_WARNINGS                                 supress VC CRT Secure function warnings
# CXXFLAGS /Yustdafx.h                                      precompiled headers

# Windows 32
WIN32_DKSET(DKCMAKE_FLAGS  -DBUILD_SHARED_LIBS=OFF)
WIN32_DKSET(DKCMAKE_C_FLAGS           "/DWIN32 /D_WINDOWS /D_CRT_SECURE_NO_WARNINGS /nologo /std:c17")
WIN32_DKSET(DKCMAKE_C_FLAGS_DEBUG     "/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG")
WIN32_DKSET(DKCMAKE_C_FLAGS_RELEASE   "/MT /O2 /Ob2 /DNDEBUG")
WIN32_DKSET(DKCMAKE_CXX_FLAGS         "/DWIN32 /D_WINDOWS /D_CRT_SECURE_NO_WARNINGS /nologo /GR /EHsc /Zm500 /D_WIN32_WINNT=0x0600 /std:c++17 /D_USING_V110_SDK71_ /Zc:__cplusplus")
WIN32_DKSET(DKCMAKE_CXX_FLAGS_DEBUG   "/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG")
WIN32_DKSET(DKCMAKE_CXX_FLAGS_RELEASE "/MT /O2 /Ob2 /DNDEBUG")
WIN32_DKSET(DKCONFIGURE_FLAGS  --build=i686-w64-mingw32 --disable-shared --enable-static)
WIN32_DKSET(DKCONFIGURE_CFLAGS        "-march=i686")
WIN32_DKSET(DKCONFIGURE_CXXFLAGS      "-march=i686")
			
# Windows 64
WIN64_DKSET(DKCMAKE_FLAGS  -DBUILD_SHARED_LIBS=OFF)
WIN64_DKSET(DKCMAKE_C_FLAGS           "/DWIN64 /D_WINDOWS /D_CRT_SECURE_NO_WARNINGS /nologo /std:c17")
WIN64_DKSET(DKCMAKE_C_FLAGS_DEBUG     "/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG")
WIN64_DKSET(DKCMAKE_C_FLAGS_RELEASE   "/MT /O2 /Ob2 /DNDEBUG")
WIN64_DKSET(DKCMAKE_CXX_FLAGS         "/DWIN64 /D_WINDOWS /D_CRT_SECURE_NO_WARNINGS /nologo /GR /EHsc /Zm500 /D_WIN32_WINNT=0x0600 /std:c++17 /D_USING_V110_SDK71_ /Zc:__cplusplus /MACHINE:X64")
WIN64_DKSET(DKCMAKE_CXX_FLAGS_DEBUG   "/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG")
WIN64_DKSET(DKCMAKE_CXX_FLAGS_RELEASE "/MT /O2 /Ob2 /DNDEBUG")
WIN32_DKSET(DKCONFIGURE_FLAGS  --build=x86_64-w64-mingw32 --disable-shared --enable-static)
WIN64_DKSET(DKCONFIGURE_CFLAGS        "-march=x86-64")
WIN64_DKSET(DKCONFIGURE_CXXFLAGS      "-march=x86-64")

# Moc 32
MAC32_DKSET(DKCMAKE_FLAGS  -DCMAKE_OSX_ARCHITECTURES=x86 -DBUILD_SHARED_LIBS=OFF)
MAC32_DKSET(DKCMAKE_C_FLAGS    "-DMAC -DMAC32 -std=c17 -x objective-c")
MAC32_DKSET(DKCMAKE_CXX_FLAGS  "-DMAC -DMAC32 -std=c++17 -x objective-c++")
MAC32_DKSET(DKCONFIGURE_FLAGS  --disable-shared --enable-static)

# Moc 64
MAC64_DKSET(DKCMAKE_FLAGS  -DCMAKE_OSX_ARCHITECTURES=x86_64 -DBUILD_SHARED_LIBS=OFF)
MAC64_DKSET(DKCMAKE_C_FLAGS    "-DMAC -DMAC64 -std=c17 -x objective-c")
MAC64_DKSET(DKCMAKE_CXX_FLAGS  "-DMAC -DMAC64 -std=c++17 -x objective-c++")
MAC64_DKSET(DKCONFIGURE_FLAGS  --disable-shared --enable-static)

# iOS Variables
DKSET(IOS_DARWIN darwin20.6.0)
DKSET(IOS_MIN_SDK 13.0)
DKSET(XCODE_DEVROOT /Applications/Xcode.app/Contents/Developer)
DKSET(CLANG ${XCODE_DEVROOT}/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang)
DKSET(CLANGXX ${XCODE_DEVROOT}/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++)
DKSET(LIBTOOL ${XCODE_DEVROOT}/Toolchains/XcodeDefault.xctoolchain/usr/bin/libtool)
DKSET(IOS_SYSROOT ${XCODE_DEVROOT}/Platforms/iPhone.platform/Developer/SDKs/iPhone15.0.sdk)
DKSET(IOSSIM_SYSROOT ${XCODE_DEVROOT}/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.0.sdk)

# iOS 32
IOS32_DKSET(DKCMAKE_FLAGS  -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/ios.toolchain.cmake -DPLATFORM=OS -DSDK_VERSION=15.0 -DDEPLOYMENT_TARGET=${IOS_MIN_SDK} -DBUILD_SHARED_LIBS=OFF)
IOS32_DKSET(DKCMAKE_C_FLAGS           "-DIOS -DIOS32 -std=c17 -x objective-c")
IOS32_DKSET(DKCMAKE_C_FLAGS_DEBUG     "")
IOS32_DKSET(DKCMAKE_C_FLAGS_RELEASE   "")
IOS32_DKSET(DKCMAKE_CXX_FLAGS         "-DIOS -DIOS32 -std=c++17 -x objective-c++")
IOS32_DKSET(DKCMAKE_CXX_FLAGS_DEBUG   "")
IOS32_DKSET(DKCMAKE_CXX_FLAGS_RELEASE "")
IOS32_DKSET(DKCONFIGURE_FLAGS  --disable-shared --enable-static --host i686-apple-${IOS_DARWIN})
IOS32_DKSET(DKCONFIGURE_CC       ${CLANG})
IOS32_DKSET(DKCONFIGURE_CXX	     ${CLANGXX})
IOS32_DKSET(DKCONFIGURE_CFLAGS   "-arch i686 -mios-version-min=${IOS_MIN_SDK} -isysroot ${IOS_SYSROOT}")
IOS32_DKSET(DKCONFIGURE_CXXFLAGS "-arch i686 -mios-version-min=${IOS_MIN_SDK} -isysroot ${IOS_SYSROOT}")

# iOS 64
IOS64_DKSET(DKCMAKE_FLAGS  -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/ios.toolchain.cmake -DPLATFORM=OS64 -DSDK_VERSION=15.0 -DDEPLOYMENT_TARGET=${IOS_MIN_SDK} -DBUILD_SHARED_LIBS=OFF)
IOS64_DKSET(DKCMAKE_C_FLAGS           "-DIOS -DIOS64 -std=c17 -x objective-c")
IOS64_DKSET(DKCMAKE_C_FLAGS_DEBUG     "")
IOS64_DKSET(DKCMAKE_C_FLAGS_RELEASE   "")
IOS64_DKSET(DKCMAKE_CXX_FLAGS         "-DIOS -DIOS64 -std=c++17 -x objective-c++")
IOS64_DKSET(DKCMAKE_CXX_FLAGS_DEBUG   "")
IOS64_DKSET(DKCMAKE_CXX_FLAGS_RELEASE "")
IOS64_DKSET(DKCONFIGURE_FLAGS  --disable-shared --enable-static --host x86_64-apple-${IOS_DARWIN})
IOS64_DKSET(DKCONFIGURE_CC       ${CLANG})
IOS64_DKSET(DKCONFIGURE_CXX	     ${CLANGXX})
IOS64_DKSET(DKCONFIGURE_CFLAGS   "-arch x86_64 -mios-version-min=${IOS_MIN_SDK} -isysroot ${IOS_SYSROOT}")
IOS64_DKSET(DKCONFIGURE_CXXFLAGS "-arch x86_64 -mios-version-min=${IOS_MIN_SDK} -isysroot ${IOS_SYSROOT}")

# iOS Simulator 32
IOSSIM32_DKSET(DKCMAKE_FLAGS  -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DSDK_VERSION=15.0 -DDEPLOYMENT_TARGET=13.0 -DBUILD_SHARED_LIBS=OFF)
IOSSIM32_DKSET(DKCMAKE_C_FLAGS           "-DIOS -DIOS32 -DIOSSIM -DIOSSIM32 -std=c17 -x objective-c")
IOSSIM32_DKSET(DKCMAKE_C_FLAGS_DEBUG     "")
IOSSIM32_DKSET(DKCMAKE_C_FLAGS_RELEASE   "")
IOSSIM32_DKSET(DKCMAKE_CXX_FLAGS         "-DIOS -DIOS32 -DIOSSIM -DIOSSIM32 -std=c++17 -x objective-c++")
IOSSIM32_DKSET(DKCMAKE_CXX_FLAGS_DEBUG   "")
IOSSIM32_DKSET(DKCMAKE_CXX_FLAGS_RELEASE "")
IOSSIM32_DKSET(DKCONFIGURE_FLAGS  --disable-shared --enable-static --host i686-apple-${IOS_DARWIN})
IOSSIM32_DKSET(DKCONFIGURE_CC       ${CLANG})
IOSSIM32_DKSET(DKCONFIGURE_CXX	    ${CLANGXX})
IOSSIM32_DKSET(DKCONFIGURE_CFLAGS   "-arch i686 -mios-version-min=${IOS_MIN_SDK} -isysroot ${IOSSIM_SYSROOT}")
IOSSIM32_DKSET(DKCONFIGURE_CXXFLAGS "-arch i686 -mios-version-min=${IOS_MIN_SDK} -isysroot ${IOSSIM_SYSROOT}")

# iOS Simulator 64
IOSSIM64_DKSET(DKCMAKE_FLAGS  -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/ios.toolchain.cmake -DPLATFORM=SIMULATOR64 -DSDK_VERSION=15.0 -DDEPLOYMENT_TARGET=13.0 -DBUILD_SHARED_LIBS=OFF)
IOSSIM64_DKSET(DKCMAKE_C_FLAGS           "-DIOS -DIOS64 -DIOSSIM -DIOSSIM64 -std=c17 -x objective-c")
IOSSIM64_DKSET(DKCMAKE_C_FLAGS_DEBUG     "")
IOSSIM64_DKSET(DKCMAKE_C_FLAGS_RELEASE   "")
IOSSIM64_DKSET(DKCMAKE_CXX_FLAGS         "-DIOS -DIOS64 -DIOSSIM -DIOSSIM64 -std=c++17 -x objective-c++")
IOSSIM64_DKSET(DKCMAKE_CXX_FLAGS_DEBUG   "")
IOSSIM64_DKSET(DKCMAKE_CXX_FLAGS_RELEASE "")
IOSSIM64_DKSET(DKCONFIGURE_FLAGS  --disable-shared --enable-static --host x86_64-apple-${IOS_DARWIN})
IOSSIM64_DKSET(DKCONFIGURE_CC       ${CLANG})
IOSSIM64_DKSET(DKCONFIGURE_CXX	    ${CLANGXX})
IOSSIM64_DKSET(DKCONFIGURE_CFLAGS   "-arch x86_64 -mios-version-min=${IOS_MIN_SDK} -isysroot ${IOSSIM_SYSROOT}")
IOSSIM64_DKSET(DKCONFIGURE_CXXFLAGS "-arch x86_64 -mios-version-min=${IOS_MIN_SDK} -isysroot ${IOSSIM_SYSROOT}")

# Linux
LINUX_DKSET(DKCMAKE_FLAGS   -DBUILD_SHARED_LIBS=OFF)
LINUX_DKSET(DKCMAKE_C_FLAGS    "-DLINUX -std=gnu++17 -lstdc++fs -no-pie -fPIC")
LINUX_DKSET(DKCMAKE_CXX_FLAGS  "-DLINUX -std=gnu++17 -lstdc++fs -no-pie -fPIC")
LINUX_DKSET(DKCONFIGURE_FLAGS  --disable-shared --enable-static)

LINUX32_DKSET(DKCMAKE_FLAGS  -DBUILD_SHARED_LIBS=OFF)
LINUX32_DKSET(DKCMAKE_C_FLAGS    "-m32 -DLINUX -DLINUX32 -std=gnu++17 -lstdc++fs -no-pie -fPIC")
LINUX32_DKSET(DKCMAKE_CXX_FLAGS  "-m32 -DLINUX -DLINUX32 -std=gnu++17 -lstdc++fs -no-pie -fPIC")
LINUX32_DKSET(DKCONFIGURE_FLAGS  --disable-shared --enable-static)

LINUX64_DKSET(DKCMAKE_FLAGS  -DBUILD_SHARED_LIBS=OFF)
LINUX64_DKSET(DKCMAKE_C_FLAGS    "-m64 -DLINUX -DLINUX32 -std=gnu++17 -lstdc++fs -no-pie -fPIC")
LINUX64_DKSET(DKCMAKE_CXX_FLAGS  "-m64 -DLINUX -DLINUX32 -std=gnu++17 -lstdc++fs -no-pie -fPIC")
LINUX64_DKSET(DKCONFIGURE_FLAGS  --disable-shared --enable-static)

# Raspberyy
RASPBERRY_DKSET(DKCMAKE_FLAGS   -DBUILD_SHARED_LIBS=OFF)
RASPBERRY_DKSET(DKCMAKE_C_FLAGS    "-DLINUX -DRASPBERRY -std=gnu++17 -lstdc++fs -no-pie -fPIC")
RASPBERRY_DKSET(DKCMAKE_CXX_FLAGS  "-DLINUX -DRASPBERRY -std=gnu++17 -lstdc++fs -no-pie -fPIC")
RASPBERRY_DKSET(DKCONFIGURE_FLAGS  --disable-shared --enable-static)

RASPBERRY32_DKSET(DKCMAKE_FLAGS  -DBUILD_SHARED_LIBS=OFF)
RASPBERRY32_DKSET(DKCMAKE_C_FLAGS    "-m32 -DLINUX -DLINUX32 -DRASPBERRY -DRASPBERRY32 -std=gnu++17 -lstdc++fs -no-pie -fPIC")
RASPBERRY32_DKSET(DKCMAKE_CXX_FLAGS  "-m32 -DLINUX -DLINUX32 -DRASPBERRY -DRASPBERRY32 -std=gnu++17 -lstdc++fs -no-pie -fPIC")
RASPBERRY32_DKSET(DKCONFIGURE_FLAGS  --disable-shared --enable-static)

RASPBERRY64_DKSET(DKCMAKE_FLAGS  -DBUILD_SHARED_LIBS=OFF)
RASPBERRY64_DKSET(DKCMAKE_C_FLAGS    "-m64 -DLINUX -DLINUX64 -DRASPBERRY -DRASPBERRY32 -std=gnu++17 -lstdc++fs -no-pie -fPIC")
RASPBERRY64_DKSET(DKCMAKE_CXX_FLAGS  "-m64 -DLINUX -DLINUX64 -DRASPBERRY -DRASPBERRY32 -std=gnu++17 -lstdc++fs -no-pie -fPIC")
RASPBERRY64_DKSET(DKCONFIGURE_FLAGS  --disable-shared --enable-static)

# Android 32
ANDROID32_DKSET(DKCMAKE_FLAGS  
	-DBUILD_SHARED_LIBS=OFF 
	-DANDROID_NDK=${ANDROIDNDK}
	-DCMAKE_TOOLCHAIN_FILE=${ANDROIDNDK}/build/cmake/android.toolchain.cmake
	-DANDROID_TOOLCHAIN=clang
	-DANDROID_ABI=armeabi-v7a
	-DANDROID_PLATFORM=26
	-DANDROID_STL=c++_static)
ANDROID32_DKSET(DKCMAKE_C_FLAGS           "-DANDROID -DANDROID32")
ANDROID32_DKSET(DKCMAKE_C_FLAGS_DEBUG     "")
ANDROID32_DKSET(DKCMAKE_C_FLAGS_RELEASE   "")
ANDROID32_DKSET(DKCMAKE_CXX_FLAGS         "-DANDROID -DANDROID32")
ANDROID32_DKSET(DKCMAKE_CXX_FLAGS_DEBUG   "")
ANDROID32_DKSET(DKCMAKE_CXX_FLAGS_RELEASE "")
ANDROID32_DKSET(DKCONFIGURE_FLAGS         --disable-shared --enable-static)
ANDROID32_DKSET(DKCONFIGURE_CFLAGS        "-DANDROID -DANDROID32")
ANDROID32_DKSET(DKCONFIGURE_CXXFLAGS      "-DANDROID -DANDROID32")

# Android 64
ANDROID64_DKSET(DKCMAKE_FLAGS  
	-DBUILD_SHARED_LIBS=OFF 
	-DANDROID_NDK=${ANDROIDNDK}
	-DCMAKE_TOOLCHAIN_FILE=${ANDROIDNDK}/build/cmake/android.toolchain.cmake
	-DANDROID_TOOLCHAIN=clang
	-DANDROID_ABI=armeabi-v7a
	-DANDROID_PLATFORM=26
	-DANDROID_STL=c++_static)
ANDROID64_DKSET(DKCMAKE_C_FLAGS           "-DANDROID -DANDROID64")
ANDROID64_DKSET(DKCMAKE_C_FLAGS_DEBUG     "")
ANDROID64_DKSET(DKCMAKE_C_FLAGS_RELEASE   "")
ANDROID64_DKSET(DKCMAKE_CXX_FLAGS         "-DANDROID -DANDROID64")
ANDROID64_DKSET(DKCMAKE_CXX_FLAGS_DEBUG   "")
ANDROID64_DKSET(DKCMAKE_CXX_FLAGS_RELEASE "")
ANDROID64_DKSET(DKCONFIGURE_FLAGS         --disable-shared --enable-static)
ANDROID64_DKSET(DKCONFIGURE_CFLAGS        "-DANDROID -DANDROID64")
ANDROID64_DKSET(DKCONFIGURE_CXXFLAGS      "-DANDROID -DANDROID64")



if(WARNINGS_AS_ERRORS)
	DUMP(WARNINGS_AS_ERRORS)
	WIN_DKSET(DKCMAKE_C_FLAGS "${DKCMAKE_C_FLAGS} /WX")
	WIN_DKSET(DKCMAKE_CXX_FLAGS "${DKCMAKE_CXX_FLAGS} /WX")
endif()
if(WARNING_LEVEL)
	WIN_DKSET(DKCMAKE_C_FLAGS "${DKCMAKE_C_FLAGS} /W${WARNING_LEVEL}")
	WIN_DKSET(DKCMAKE_CXX_FLAGS "${DKCMAKE_CXX_FLAGS} /W${WARNING_LEVEL}")
endif()
if(WARNING_4244) # /wd4244 - Warning: possible loss of data 
	WIN_DKSET(DKCMAKE_C_FLAGS "${DKCMAKE_C_FLAGS} /wd4244")
	WIN_DKSET(DKCMAKE_CXX_FLAGS "${DKCMAKE_CXX_FLAGS} /wd4244")
endif()

WIN_DKSET(CMAKE_C_FLAGS           ${DKCMAKE_C_FLAGS})
WIN_DKSET(CMAKE_C_FLAGS_DEBUG     ${DKCMAKE_C_FLAGS_DEBUG})
WIN_DKSET(CMAKE_C_FLAGS_RELEASE   ${DKCMAKE_C_FLAGS_RELEASE})
WIN_DKSET(CMAKE_CXX_FLAGS         ${DKCMAKE_CXX_FLAGS})
WIN_DKSET(CMAKE_CXX_FLAGS_DEBUG   ${DKCMAKE_CXX_FLAGS_DEBUG})
WIN_DKSET(CMAKE_CXX_FLAGS_RELEASE ${DKCMAKE_CXX_FLAGS_RELEASE})
message(STATUS "CMAKE_C_FLAGS           = ${CMAKE_C_FLAGS}")
message(STATUS "CMAKE_C_FLAGS_DEBUG     = ${CMAKE_C_FLAGS_DEBUG}")
message(STATUS "CMAKE_C_FLAGS_RELEASE   = ${CMAKE_C_FLAGS_RELEASE}")
message(STATUS "CMAKE_CXX_FLAGS         = ${CMAKE_CXX_FLAGS}")
message(STATUS "CMAKE_CXX_FLAGS_DEBUG   = ${CMAKE_CXX_FLAGS_DEBUG}")
message(STATUS "CMAKE_CXX_FLAGS_RELEASE = ${CMAKE_CXX_FLAGS_RELEASE}")

DKSET(DKCMAKE_FLAGS ${DKCMAKE_FLAGS} 
"-DCMAKE_C_FLAGS=${DKCMAKE_C_FLAGS}"
"-DCMAKE_C_FLAGS_DEBUG=${DKCMAKE_C_FLAGS_DEBUG}"
"-DCMAKE_C_FLAGS_RELEASE=${DKCMAKE_C_FLAGS_RELEASE}"
"-DCMAKE_CXX_FLAGS=${DKCMAKE_CXX_FLAGS}"
"-DCMAKE_CXX_FLAGS_DEBUG=${DKCMAKE_CXX_FLAGS_DEBUG}"
"-DCMAKE_CXX_FLAGS_RELEASE=${DKCMAKE_CXX_FLAGS_RELEASE}")

DKSET(DKCONFIGURE_FLAGS ${DKCONFIGURE_FLAGS}
"CC=${DKCONFIGURE_CC}"
"CXX=${DKCONFIGURE_CXX}"
"CFLAGS=${DKCONFIGURE_CFLAGS}"
"CXXFLAGS=${DKCONFIGURE_CXXFLAGS}")

#Wait()


### DEPENDS ###
DKDEPEND(git)
DKDEPEND(cmake)

### WINDOWS ###	
if(CMAKE_HOST_WIN32 AND WIN)
	DKDEPEND(visualstudio)
	DKDEPEND(imagemagick)
	
	DKSET(DKCMAKE_WIN32 ${CMAKE_EXE} -G ${VS_GENERATOR} -A Win32 ${DKCMAKE_FLAGS})  # Windows 32
	DKSET(DKCONFIGURE_WIN32 ../../configure ${DKCONFIGURE_FLAGS})                   # Windows 32
	DKSET(DKCMAKE_WIN64 ${CMAKE_EXE} -G ${VS_GENERATOR} -A x64 ${DKCMAKE_FLAGS})    # Windows 64
	DKSET(DKCONFIGURE_WIN64 ../../configure ${DKCONFIGURE_FLAGS})                   # Windows 64
endif()

if(CMAKE_HOST_APPLE)
	DKDEPEND(xcode)
	
	DKSET(DKCMAKE_MAC32 ${CMAKE_EXE} -G "Xcode" ${DKCMAKE_FLAGS})     # Mac 32
	DKSET(DKCONFIGURE_MAC32 ../../configure ${DKCONFIGURE_FLAGS})     # Mac 32
	DKSET(DKCMAKE_MAC64 ${CMAKE_EXE} -G "Xcode" ${DKCMAKE_FLAGS})     # Mac 64
	DKSET(DKCONFIGURE_MAC64 ../../configure ${DKCONFIGURE_FLAGS})     # Mac 64
	DKSET(DKCMAKE_IOS32 ${CMAKE_EXE} -G "Xcode" ${DKCMAKE_FLAGS})     # iOS 32
	DKSET(DKCONFIGURE_IOS32 ../../configure ${DKCONFIGURE_FLAGS})     # iOS 32
	DKSET(DKCMAKE_IOS64 ${CMAKE_EXE} -G "Xcode"	${DKCMAKE_FLAGS})     # iOS 64
	DKSET(DKCONFIGURE_IOS64 ../../configure ${DKCONFIGURE_FLAGS})     # iOS 64
	DKSET(DKCMAKE_IOSSIM32 ${CMAKE_EXE} -G "Xcode" ${DKCMAKE_FLAGS})  # iOS Simulator 32
	DKSET(DKCONFIGURE_IOSSIM32 ../../configure ${DKCONFIGURE_FLAGS})  # iOS Simulator 32
	DKSET(DKCMAKE_IOSSIM64 ${CMAKE_EXE} -G "Xcode" ${DKCMAKE_FLAGS})  # iOS Simulator 64
	DKSET(DKCONFIGURE_IOSSIM64 ../../configure ${DKCONFIGURE_FLAGS})  # iOS Simulator 64
endif()

if(LINUX)
	##DKDEPEND(kdevelop)
	DKDEPEND(libx11-dev)
	LINUX_LIB(pthread)
	LINUX_LIB(dl)
	LINUX_LIB(libstdc++fs.a)
	
	DKSET(DKCMAKE_LINUX_DEBUG ${CMAKE_EXE} -G "Unix Makefiles" ${DKCMAKE_FLAGS} -DCMAKE_BUILD_TYPE=Debug)        # Linux Debug
	DKSET(DKCMAKE_LINUX_RELEASE ${CMAKE_EXE} -G "Unix Makefiles" ${DKCMAKE_FLAGS} -DCMAKE_BUILD_TYPE=Release)    #Linux Release
	DKSET(DKCMAKE_LINUX32_DEBUG ${CMAKE_EXE} -G "Unix Makefiles" ${DKCMAKE_FLAGS} -DCMAKE_BUILD_TYPE=Debug)      # Linux 32 Debug
	DKSET(DKCMAKE_LINUX32_RELEASE ${CMAKE_EXE} -G "Unix Makefiles" ${DKCMAKE_FLAGS} -DCMAKE_BUILD_TYPE=Release)  # Linux 32 Release
	DKSET(DKCMAKE_LINUX64_DEBUG ${CMAKE_EXE} -G "Unix Makefiles" ${DKCMAKE_FLAGS} -DCMAKE_BUILD_TYPE=Debug)      # Linux 64 Debug
	DKSET(DKCMAKE_LINUX64_RELEASE ${CMAKE_EXE} -G "Unix Makefiles" ${DKCMAKE_FLAGS} -DCMAKE_BUILD_TYPE=Release)  # Linux 64 Release
	DKSET(DKCONFIGURE_LINUX ../../configure ${DKCONFIGURE_FLAGS})                                                # Linux
endif()

if(CMAKE_HOST_LINUX AND RASPBERRY)
	DKDEPEND(libx11-dev)
	RASPBERRY_LIB(pthread)
	RASPBERRY_LIB(dl)
	RASPBERRY_LIB(libstdc++fs.a)
	link_directories(/opt/vc/lib)
	RASPBERRY_LIB(bcm_host)
	
	DKSET(DKCMAKE_RASPBERRY_DEBUG ${CMAKE_EXE} -G "Unix Makefiles" ${DKCMAKE_FLAGS} -DCMAKE_BUILD_TYPE=Debug)        # RaspBerry Debug
	DKSET(DKCMAKE_RASPBERRY_RELEASE ${CMAKE_EXE} -G "Unix Makefiles" ${DKCMAKE_FLAGS} -DCMAKE_BUILD_TYPE=Release)    # RaspBerry Release
	DKSET(DKCMAKE_RASPBERRY32_DEBUG ${CMAKE_EXE} -G "Unix Makefiles" ${DKCMAKE_FLAGS} -DCMAKE_BUILD_TYPE=Debug)      # RaspBerry 32 Debug
	DKSET(DKCMAKE_RASPBERRY32_RELEASE ${CMAKE_EXE} -G "Unix Makefiles" ${DKCMAKE_FLAGS} -DCMAKE_BUILD_TYPE=Release)  # RaspBerry 32 Release
	DKSET(DKCMAKE_RASPBERRY64_DEBUG ${CMAKE_EXE} -G "Unix Makefiles" ${DKCMAKE_FLAGS} -DCMAKE_BUILD_TYPE=Debug)      # RaspBerry 64 Debug
	DKSET(DKCMAKE_RASPBERRY64_RELEASE ${CMAKE_EXE} -G "Unix Makefiles" ${DKCMAKE_FLAGS} -DCMAKE_BUILD_TYPE=Release)  # RaspBerry 64 Release
	DKSET(DKCONFIGURE_RASPBERRY ../../configure ${DKCONFIGURE_FLAGS})                                                # RaspBerry
endif()

if(CMAKE_HOST_WIN32 AND ANDROID)
	ANDROID_LIB(dl)
	ANDROID_LIB(log)
	ANDROID_LIB(android)
	ANDROID_LIB(m)
	DKDEPEND(jdk)
	DKDEPEND(apache-ant)
	DKDEPEND(android-sdk)
	#DKDEPEND(android-studio)
	DKDEPEND(android-ndk) 
	DKDEPEND(visualstudio)
	DKDEPEND(mingw32)
	DKDEPEND(msys)
	DKDEPEND(openssl)
	#DKINCLUDE(${ANDROIDNDK}/sources/android/cpufeatures)
	
	DKSET(DKCMAKE_ANDROID32 ${CMAKE_EXE} -G ${VS_GENERATOR} -A ARM ${DKCMAKE_FLAGS})    # Android 32
	DKSET(DKCMAKE_ANDROID64 ${CMAKE_EXE} -G ${VS_GENERATOR} -A ARM64 ${DKCMAKE_FLAGS})  # Android 64
	DKSET(DKCONFIGURE_ANDROID ../../configure ${DKCONFIGURE_FLAGS})                     # Android
endif()
