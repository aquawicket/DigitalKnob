include_guard()
##################################################################################
# dk_load(fn)
#
#	load a ${fn}.cmake file located in the DKCMake path 
#
#	@fn	- TODO
#
macro(dk_load var)
	#message("dk_load(${var})")
	string(STRIP ${var} fn)
	
	get_filename_component(name_we "${fn}" NAME_WE)
	if("${name_we}" STREQUAL "DKMAKE")
		get_filename_component(fnDir "${fn}" DIRECTORY)
		#message("fnDir = ${fnDir}")
		if(fnDir)
			set(fn ${fnDir})
		endif()
		get_filename_component(fnName "${fn}" NAME)
		#message("fnName = ${fnName}")
		if(fnName)
			set(fn ${fnName})
		endif()
	else()
		set(fn ${name_we})
	endif()
	
	if(COMMAND ${fn})
		#message("dk_load(${fn}) function already loaded")
	elseif(COMMAND ${var})
		#message("dk_load(${var}) function already loaded")
	else()
		dk_parseFunctionsAndLoad(${fn} ${var})
	endif()
endmacro()

macro(dk_parseFunctionsAndLoad fn fpath)
	#message("dk_parseFunctionsAndLoad(${fn} ${fpath})")
	
	if(EXISTS ${DKCMAKE_DIR}/functions/${fpath}.cmake)
		set(${fn}_file ${DKCMAKE_DIR}/functions/${fpath}.cmake)
	#elseif(EXISTS ${fpath}/DKMAKE.cmake)
	#	set(${fn}_file ${fpath}/DKMAKE.cmake)
	elseif(EXISTS ${fpath})
		set(${fn}_file ${fpath})
	#elseif(EXISTS ${DKCMAKE_DIR}/functions/${fpath})
	#	set(${fn}_file ${DKCMAKE_DIR}/functions/${fpath})
	
	#elseif(EXISTS ${DKCMAKE_DIR}/${fpath})
	#	set(${fn}_file ${DKCMAKE_DIR}/${fpath})
	#elseif(EXISTS ${fpath}.cmake)
	#	set(${fn}_file ${fpath}.cmake)
	#elseif(EXISTS ${DKCMAKE_DIR}/${fpath}.cmake)
		#	set(${fn}_file ${DKCMAKE_DIR}/${fpath}.cmake)
	
	#elseif(EXISTS ${DKPLUGINS_DIR}/${fpath}/DKMAKE.cmake)
	#	set(${fn}_file ${DKPLUGINS_DIR}/${fpath}/DKMAKE.cmake)
	else()
		if(NOT EXISTS ${DKCMAKE_DIR})
			message(FATAL_ERROR "DKCMAKE_DIR does not exist!  \n    DKCMAKE_DIR = ${DKCMAKE_DIR} \n")
		endif()
		message(FATAL_ERROR "${fpath}: file not found")
	endif()
			
	list(FIND dk_load_list ${${fn}_file} index)
	if(${index} GREATER -1)
		#message(STATUS "dk_load(${fn}) function already in list @ ${${fn}_file}")
		#message(STATUS "dk_load_list = ${dk_load_list}")
	else()
		set(dk_load_list ${dk_load_list} ${${fn}_file} CACHE INTERNAL "")
				
		#message("${fn}_file = ${${fn}_file}")
		file(READ ${${fn}_file} ${fn}_contents)
		#string(REGEX MATCHALL "[Dd][Kk]_.[A-Za-z0-9_\t]*\\(" ${fn}_matches "${${fn}_contents}")
				
		## Match text that contains *dk_*( 		I.E.  WIN_HOST_dk_, MAC_X86_64_dk_, dk_
		string(REGEX MATCHALL "[A-Za-z0-9_]*[Dd][Kk]_.[A-Za-z0-9_\t]*\\(" ${fn}_matches "${${fn}_contents}")
		list(REMOVE_DUPLICATES ${fn}_matches)
		foreach(${fn}_item ${${fn}_matches})
			if(NOT ${fn}_item)
				continue()
			endif()
				
			#message("item-in = ${${fn}_item}")
				
			## remove any prefix to dk_*( 		I.E.  WIN_HOST_dk_  becomes dk_
			string(REGEX MATCH "[Dd][Kk]_.[A-Za-z0-9_\t]*\\(" ${fn}_item ${${fn}_item})
			#message("item-out = ${${fn}_item}")
				
			string(STRIP ${${fn}_item} ${fn}_item)
			string(REPLACE "\t" "" ${fn}_item ${${fn}_item})
			string(REPLACE "\r" "" ${fn}_item ${${fn}_item})
			string(REPLACE "\n" "" ${fn}_item ${${fn}_item})
			string(REPLACE "(" "" ${fn}_item ${${fn}_item})
			#message("item-stripped = ${${fn}_item}")
					
			#message("${fn}_item  ${${fn}_item}")
			list(FIND dk_load_list ${${fn}_item} index)
			if(${index} GREATER -1)
				#message(STATUS "${fn} -> ${${fn}_item} already in list")
				#message(STATUS "dk_load_list = ${dk_load_list}")
				continue()
			elseif(${${fn}_item} STREQUAL ${fn})
				#message(STATUS "${fn} -> ${${fn}_item} already loaded")
				continue()
			elseif(COMMAND ${${fn}_item})
				#message(STATUS "${fn} -> ${${fn}_item} already loaded")
				continue()
			else()
				#message(STATUS "${fn} -> loading ${${fn}_item}")
				dk_load(${${fn}_item})
			endif()
		endforeach()
			
		message(STATUS "include(${${fn}_file})")
		include(${${fn}_file})
	endif()
endmacro()
set(dk_load_list dk_load CACHE INTERNAL "")