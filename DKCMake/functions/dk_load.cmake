include_guard()
##################################################################################
# dk_load(fn)
#
#	load a ${fn}.cmake file located in the DKCMake path 
#
#	@fn	- TODO
#
#function(dk_load fn)
macro(dk_load fn)
	string(STRIP ${fn} fn)
	message("dk_load(${fn})")
	#get_filename_component(fnDir "${var}" DIRECTORY)
	#message("fnDir = ${fnDir}")
	#if(fnDir)
	#	set(var ${fnDir})
	#	message("var = ${var}")
	#endif()
	#get_filename_component(fnName "${var}" NAME)
	#message("fnName = ${fnName}")
	#if(fnName)
	#	set(var ${fnName})
	#	message("var = ${var}")
	#endif()

	message("fn = ${fn}")

	list(FIND dk_load_list ${fn} index)
	if(${index} GREATER -1)
		#message(STATUS "dk_load(${fn}) function already in list")
		#return()
	#endif()
	else()
		set(dk_load_list ${dk_load_list} ${fn} CACHE INTERNAL "")
		
		if(COMMAND ${fn})
			#message("dk_load(${fn}) function already loaded")
			#return()
		#endif()
		else()

			if(EXISTS ${fn})
				set(${fn}_file ${fn})
			elseif(EXISTS ${fn}.cmake)
				set(${fn}_file ${fn}.cmake)
			elseif(EXISTS ${DKCMAKE_DIR}/${fn})
				set(${fn}_file ${DKCMAKE_DIR}/${fn})
			elseif(EXISTS ${DKCMAKE_DIR}/${fn}.cmake)
				set(${fn}_file ${DKCMAKE_DIR}/${fn}.cmake)
			elseif(EXISTS ${DKCMAKE_DIR}/functions/${fn})
				set(${fn}_file ${DKCMAKE_DIR}/functions/${fn})
			elseif(EXISTS ${DKCMAKE_DIR}/functions/${fn}.cmake)
				set(${fn}_file ${DKCMAKE_DIR}/functions/${fn}.cmake)
			elseif(EXISTS ${DKIMPORTS_DIR}/${fn}/DKMAKE.cmake)
				set(${fn}_file ${DKIMPORTS_DIR}/${fn}/DKMAKE.cmake)
			elseif(EXISTS ${DKPLUGINS_DIR}/${fn}/DKMAKE.cmake)
				set(${fn}_file ${DKPLUGINS_DIR}/${fn}/DKMAKE.cmake)
			else()
				if(NOT EXISTS ${DKCMAKE_DIR})
					message(FATAL_ERROR "DKCMAKE_DIR does not exist!  \n    DKCMAKE_DIR = ${DKCMAKE_DIR} \n")
				endif()
				message(FATAL_ERROR "${fn}: file not found")
			endif()
			
			message("${fn}_file = ${${fn}_file}")
			file(READ ${${fn}_file} ${fn}_contents)
			string(REGEX MATCHALL "[Dd][Kk]_.[A-Za-z0-9_\t]*\\(" ${fn}_matches "${${fn}_contents}")
			list(REMOVE_DUPLICATES ${fn}_matches)
			foreach(${fn}_item ${${fn}_matches})
				if(NOT ${fn}_item)
					continue()
				endif()
				string(STRIP ${${fn}_item} ${fn}_item)
				string(REPLACE "\t" "" ${fn}_item ${${fn}_item})
				string(REPLACE "\r" "" ${fn}_item ${${fn}_item})
				string(REPLACE "\n" "" ${fn}_item ${${fn}_item})
				string(REPLACE "(" "" ${fn}_item ${${fn}_item})
				message("${fn}_item  ${${fn}_item}")
				
				list(FIND dk_load_list ${${fn}_item} index)
				if(${index} GREATER -1)
					#message(STATUS "${fn} -> ${${fn}_item} already in list")
					continue()
				elseif(${${fn}_item} STREQUAL ${fn})
					#message(STATUS "${fn} -> ${${fn}_item} already loaded")
					continue()
				elseif(COMMAND ${${fn}_item})
					#message(STATUS "${fn} -> ${${fn}_item} already loaded")
					continue()
				else()
					message(STATUS "${fn} -> loading ${${fn}_item}")
					dk_load(${${fn}_item})
				endif()
			endforeach()
			
			message(STATUS "include(${${fn}_file})")
			include(${${fn}_file})
		endif()
	endif()
#endfunction()
endmacro()
set(dk_load_list dk_load CACHE INTERNAL "")