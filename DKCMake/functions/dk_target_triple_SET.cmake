#!/usr/bin/cmake -P
include(${DKCMAKE_FUNCTIONS_DIR_}DK.cmake)
include_guard()

###############################################################################
# dk_target_triple_SET()
#
#
function(dk_target_triple_SET)
	dk_debugFunc()
	message("dk_target_triple_SET(${ARGV})")

	set(default_target_env "clang")

	if(CMAKE_SCRIPT_MODE_FILE)
		dk_validate(host_triple "dk_host_triple()")
		
		dk_echo()
		dk_echo(" 1) ${host_triple}_${default_target_env}")
		dk_echo()
		dk_echo(" 2) cosmopolitan")
		dk_echo(" 3) android_arm32_clang")
		dk_echo(" 4) android_arm64_clang")
		dk_echo(" 5) android_x86_clang")
		dk_echo(" 6) android_x86_64_clang")
		dk_echo(" 7) emscripten_x86_clang")
		dk_echo(" 8) ios_arm32_clang")
		dk_echo(" 9) ios_arm64_clang")
		dk_echo("10) ios_x86_clang")
		dk_echo("11) ios_x86_64_clang")
		dk_echo("12) iossim_arm32_clang")
		dk_echo("13) iossim_arm64_clang")
		dk_echo("14) iossim_x86_clang")
		dk_echo("15) iossim_x86_64_clang")
		dk_echo("16) linux_arm32_clang")
		dk_echo("17) linux_arm64_clang")
		dk_echo("18) linux_x86_clang")
		dk_echo("19) linux_x86_64_clang")
		dk_echo("20) mac_arm32_clang")
		dk_echo("21) mac_arm64_clang")
		dk_echo("22) mac_x86_clang")
		dk_echo("23) mac_x86_64_clang")
		dk_echo("24) raspberry_arm32_clang")
		dk_echo("25) raspberry_arm64_clang")
		dk_echo("26) raspberry_x86_clang")
		dk_echo("27) raspberry_x86_64_clang")
		dk_echo("28) windows_arm32_clang")
		dk_echo("29) windows_arm64_clang")
		dk_echo("30) windows_x86_clang")
		dk_echo("31) windows_x86_gcc")
		dk_echo("32) windows_x86_msvc")
		dk_echo("33) windows_x86_64_clang")
		dk_echo("34) windows_x86_64_gcc")
		dk_echo("35) windows_x86_64_msvc")
		dk_echo("36) windows_x86_64_ucrt")
		dk_echo("37) Exit")
		dk_echo()
		
		dk_keyboardInput(input)
		if("${input}" STREQUAL "0")
			#dk_echo("repeating last selection")
			#dk_set(app 	${_app_})
			#dk_set(os 		${_os_})
			#dk_set(type 	${_type_})
		elseif("${input}" STREQUAL "1")
			dk_set(triple 	"${host_triple}")
			dk_set(os     	"${host_os}")
			dk_set(arch  	"${host_arch}")
			if(default_target_env)
				dk_set(env  "${default_target_env}")
			endif()
		elseif("${input}" STREQUAL "2")
			dk_set(os "cosmopolitan")
			dk_set(arch "cosmopolitan")
			dk_set(env "cosmopolitan")
		elseif("${input}" STREQUAL "3")
			dk_set(os "android")
			dk_set(arch "arm32")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "4")
			dk_set(os "android")
			dk_set(arch "arm64")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "5")
			dk_set(os "android")
			dk_set(arch "x86")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "6")
			dk_set(os "android")
			dk_set(arch "x86_64")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "7")
			dk_set(os "emscripten")
			dk_set(arch "x86")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "8")
			dk_set(os "ios")
			dk_set(arch "arm32")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "9")
			dk_set(os "ios")
			dk_set(arch "arm64")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "10")
			dk_set(os "ios")
			dk_set(arch "x86")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "11")
			dk_set(os "ios")
			dk_set(arch "x86_64")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "12")
			dk_set(os "iossim")
			dk_set(arch "arm32")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "13")
			dk_set(os "iossim")
			dk_set(arch "arm64")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "14")
			dk_set(os "iossim")
			dk_set(arch "x86")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "15")
			dk_set(os "iossim")
			dk_set(arch "x86_64")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "16")
			dk_set(os "linux")
			dk_set(arch "arm32")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "17")
			dk_set(os "linux")
			dk_set(arch "arm64")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "18")
			dk_set(os "linux")
			dk_set(arch "x86")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "19")
			dk_set(os "linux")
			dk_set(arch "x86_64")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "20")
			dk_set(os "mac")
			dk_set(arch "arm32")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "21")
			dk_set(os "mac")
			dk_set(arch "arm64")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "22")
			dk_set(os "mac")
			dk_set(arch "x86")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "23")
			dk_set(os "mac")
			dk_set(arch "x86_64")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "24")
			dk_set(os "raspberry")
			dk_set(arch "arm32")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "25")
			dk_set(os "raspberry")
			dk_set(arch "arm64")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "26")
			dk_set(os "raspberry")
			dk_set(arch "x86")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "27")
			dk_set(os "raspberry")
			dk_set(arch "x86_64")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "28")
			dk_set(os "win")
			dk_set(arch "arm32")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "29")
			dk_set(os "win")
			dk_set(arch "arm64")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "30")
			dk_set(os "win")
			dk_set(arch "x86")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "31")
			dk_set(os "win")
			dk_set(arch "x86")
			dk_set(env "gcc")
		elseif("${input}" STREQUAL "32")
			dk_set(os "win")
			dk_set(arch "x86")
			dk_set(env "msvc")
		elseif("${input}" STREQUAL "33")
			dk_set(os "win")
			dk_set(arch "x86_64")
			dk_set(env "clang")
		elseif("${input}" STREQUAL "34")
			dk_set(os "win")
			dk_set(arch "x86_64")
			dk_set(env "gcc")
		elseif("${input}" STREQUAL "35")
			dk_set(os "win")
			dk_set(arch "x86_64")
			dk_set(env "msvc")
		elseif("${input}" STREQUAL "36")
			dk_set(os "win")
			dk_set(arch "x86_64")
			dk_set(env "ucrt")
		elseif("${input}" STREQUAL "37")
			dk_exit(0)
		else()
			dk_warning("invalid selection")
		endif()
		
		dk_assertVar(os)
		dk_toLower(${os} os)
		dk_toUpper(${os} OS)
		dk_set(os ${os})
		dk_set(OS ${OS})
		dk_set(${os} 1)
		dk_set(${OS} 1)
		dk_assertVar(OS)
		dk_printVar(os)
		dk_printVar(OS)
		dk_printVar(${os})
		dk_printVar(${OS})

		dk_assertVar(arch)
		dk_toLower(${arch} arch)
		dk_toUpper(${arch} ARCH)
		dk_set(arch ${arch})
		dk_set(ARCH ${ARCH})
		dk_set(${arch} 1)
		dk_set(${ARCH} 1)
		dk_assertVar(ARCH)
		dk_printVar(arch)
		dk_printVar(ARCH)
		dk_printVar(${arch})
		dk_printVar(${ARCH})
		
		if(env)
			dk_toLower(${env} env)
			dk_toUpper(${env} ENV)
			dk_set(env ${env})
			dk_set(ENV ${ENV})
			dk_set(${env} 1)
			dk_set(${ENV} 1)
			dk_printVar(env)
			dk_printVar(ENV)
			dk_printVar(${env})
			dk_printVar(${ENV})
		endif()
		
		if(env)
			dk_set(triple "${os}_${arch}_${env}")
			dk_set(TRIPLE "${OS}_${ARCH}_${ENV}")
		else()
			dk_set(triple "${os}_${arch}")
			dk_set(TRIPLE "${OS}_${ARCH}")
		endif()
		dk_assertVar(triple)
		dk_assertVar(TRIPLE)
		dk_set(target_triple ${triple})
		dk_set(TARGET_TRIPLE ${TRIPLE})
		dk_set(${triple} 1)	
		dk_set(${TRIPLE} 1)
		dk_printVar(triple)
		dk_printVar(TRIPLE)
		dk_printVar(${triple})
		dk_printVar(${TRIPLE})	
		
		### Set DEBUG_DIR and RELEASE_DIR variables
		if(IOS)
			dk_set(DEBUG_DIR Debug-iphoneos)
			dk_set(RELEASE_DIR Release-iphoneos)
		elseif(IOSSIM)
			dk_set(DEBUG_DIR Debug-iphonesimulator)
			dk_set(RELEASE_DIR Release-iphonesimulator)
		else()
			dk_set(DEBUG_DIR Debug)
			dk_set(RELEASE_DIR Release)
		endif()
		dk_assertVar(DEBUG_DIR)
		dk_assertVar(RELEASE_DIR)
		dk_printVar(DEBUG_DIR)
		dk_printVar(RELEASE_DIR)
	#else()
	#	dk_target_triple()
	endif()
endfunction()






###### DKTEST ###### DKTEST ###### DKTEST ###### DKTEST ###### DKTEST ######
function(DKTEST)
	dk_debugFunc(0)
	
	dk_target_triple_SET()
endfunction()
