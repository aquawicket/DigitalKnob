#!/usr/bin/cmake -P
include("$ENV{DKCMAKE_FUNCTIONS_DIR_}DK.cmake")
include_guard()

###############################################################################
# dk_Target_Tuple_SET()
#
#
function(dk_Target_Tuple_SET)
	dk_debugFunc()
	message("dk_Target_Tuple_SET(${ARGV})")

	set(Default_Target_Env "Clang")

	if(CMAKE_SCRIPT_MODE_FILE)
		dk_validate(Host_Tuple "dk_Host_Tuple()")
		
		dk_echo()
		dk_echo(" 1) ${Host_Tuple}_${Default_Target_Env}")
		dk_echo()
		dk_echo(" 2) Cosmopolitan")
		dk_echo(" 3) Android_Arm32_Clang")
		dk_echo(" 4) Android_Arm64_Clang")
		dk_echo(" 5) Android_X86_Clang")
		dk_echo(" 6) Android_X86_64_Clang")
		dk_echo(" 7) Emscripten_X86_Clang")
		dk_echo(" 8) Ios_Arm32_Clang")
		dk_echo(" 9) Ios_Arm32_Clang")
		dk_echo("10) Ios_X86_Clang")
		dk_echo("11) Ios_X86_64_Clang")
		dk_echo("12) Iossim_Arm32_Clang")
		dk_echo("13) Iossim_Arm32_Clang")
		dk_echo("14) Iossim_X86_Clang")
		dk_echo("15) Iossim_X86_Clang")
		dk_echo("16) Linux_Arm32_Clang")
		dk_echo("17) Linux_Arm32_Clang")
		dk_echo("18) Linux_X86_Clang")
		dk_echo("19) Linux_X86_64_Clang")
		dk_echo("20) Mac_Arm32_Clang")
		dk_echo("21) Mac_Arm32_Clang")
		dk_echo("22) Mac_X86_Clang")
		dk_echo("23) Mac_X86_64_Clang")
		dk_echo("24) Raspberry_Arm32_Clang")
		dk_echo("25) Raspberry_Arm32_Clang")
		dk_echo("26) Raspberry_X86_Clang")
		dk_echo("27) Raspberry_X86_64_Clang")
		dk_echo("28) Windows_Arm32_Clang")
		dk_echo("29) Windows_Arm32_Clang")
		dk_echo("30) Windows_X86_Clang")
		dk_echo("31) Windows_X86_Gcc")
		dk_echo("32) Windows_X86_Msvc")
		dk_echo("33) Windows_X86_64_Clang")
		dk_echo("34) Windows_X86_64_Gcc")
		dk_echo("35) Windows_X86_64_Msvc")
		dk_echo("36) Windows_X86_64_Ucrt")
		dk_echo("37) Exit")
		dk_echo()
		
		dk_keyboardInput(input)
		if("${input}" STREQUAL "0")
			#dk_echo("repeating last selection")
			#dk_set(Target_App 		${Target_App_Cache})
			#dk_set(Target_Os 		${Target_Os_Cache})
			#dk_set(Target_Type 	${_Target_Type_})
		elseif("${input}" STREQUAL "1")
			dk_set(Target_Tuple 	"${Host_Tuple}")
			dk_set(Target_Os     	"${Host_Os}")
			dk_set(Target_Arch  	"${Host_Arch}")
			if(Default_Target_Env)
				dk_set(Target_Env  "${Default_Target_Env}")
			endif()
		elseif("${input}" STREQUAL "2")
			dk_set(Target_Os "Cosmopolitan")
			dk_set(Target_Arch "Cosmopolitan")
			dk_set(Target_Env "Cosmopolitan")
		elseif("${input}" STREQUAL "3")
			dk_set(Target_Os "Android")
			dk_set(Target_Arch "Arm32")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "4")
			dk_set(Target_Os "Android")
			dk_set(Target_Arch "Arm32")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "5")
			dk_set(Target_Os "Android")
			dk_set(Target_Arch "X86")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "6")
			dk_set(Target_Os "Android")
			dk_set(Target_Arch "X86_64")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "7")
			dk_set(Target_Os "Emscripten")
			dk_set(Target_Arch "X86")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "8")
			dk_set(Target_Os "Ios")
			dk_set(Target_Arch "Arm32")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "9")
			dk_set(Target_Os "Ios")
			dk_set(Target_Arch "Arm32")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "10")
			dk_set(Target_Os "Ios")
			dk_set(Target_Arch "X86")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "11")
			dk_set(Target_Os "Ios")
			dk_set(Target_Arch "X86_64")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "12")
			dk_set(Target_Os "Iossim")
			dk_set(Target_Arch "Arm32")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "13")
			dk_set(Target_Os "Iossim")
			dk_set(Target_Arch "Arm32")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "14")
			dk_set(Target_Os "Iossim")
			dk_set(Target_Arch "X86")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "15")
			dk_set(Target_Os "Iossim")
			dk_set(Target_Arch "X86_64")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "16")
			dk_set(Target_Os "Linux")
			dk_set(Target_Arch "Arm32")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "17")
			dk_set(Target_Os "Linux")
			dk_set(Target_Arch "Arm32")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "18")
			dk_set(Target_Os "Linux")
			dk_set(Target_Arch "X86")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "19")
			dk_set(Target_Os "Linux")
			dk_set(Target_Arch "X86_64")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "20")
			dk_set(Target_Os "Mac")
			dk_set(Target_Arch "Arm32")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "21")
			dk_set(Target_Os "Mac")
			dk_set(Target_Arch "Arm32")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "22")
			dk_set(Target_Os "Mac")
			dk_set(Target_Arch "X86")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "23")
			dk_set(Target_Os "Mac")
			dk_set(Target_Arch "X86_64")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "24")
			dk_set(Target_Os "Raspberry")
			dk_set(Target_Arch "Arm32")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "25")
			dk_set(Target_Os "Raspberry")
			dk_set(Target_Arch "Arm32")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "26")
			dk_set(Target_Os "Raspberry")
			dk_set(Target_Arch "X86")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "27")
			dk_set(Target_Os "Raspberry")
			dk_set(Target_Arch "X86_64")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "28")
			dk_set(Target_Os "Win")
			dk_set(Target_Arch "Arm32")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "29")
			dk_set(Target_Os "Win")
			dk_set(Target_Arch "Arm32")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "30")
			dk_set(Target_Os "Win")
			dk_set(Target_Arch "X86")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "31")
			dk_set(Target_Os "Win")
			dk_set(Target_Arch "X86")
			dk_set(Target_Env "Gcc")
		elseif("${input}" STREQUAL "32")
			dk_set(Target_Os "Win")
			dk_set(Target_Arch "X86")
			dk_set(Target_Env "Msvc")
		elseif("${input}" STREQUAL "33")
			dk_set(Target_Os "Win")
			dk_set(Target_Arch "X86_64")
			dk_set(Target_Env "Clang")
		elseif("${input}" STREQUAL "34")
			dk_set(Target_Os "Win")
			dk_set(Target_Arch "X86_64")
			dk_set(Target_Env "Gcc")
		elseif("${input}" STREQUAL "35")
			dk_set(Target_Os "Win")
			dk_set(Target_Arch "X86_64")
			dk_set(Target_Env "Msvc")
		elseif("${input}" STREQUAL "36")
			dk_set(Target_Os "Win")
			dk_set(Target_Arch "X86_64")
			dk_set(Target_Env "Ucrt")
		elseif("${input}" STREQUAL "37")
			dk_exit(0)
		else()
			dk_warning("invalid selection")
		endif()
		
		dk_assertVar(Target_Os)
		dk_set(${Target_Os} 1)

		dk_assertVar(Target_Arch)
		dk_set(${Target_Arch} 1)

		if(Target_Env)
			dk_set(${Target_Env} 1)
			dk_depend(${target_env})
		endif()
		
		if(Target_Env)
			dk_set(Target_Tuple "${Target_Os}_${Target_Arch}_${Target_Env}")
		else()
			dk_set(Target_Tuple "${Target_os}_${Target_Arch}")
		endif()
		dk_assertVar(Target_Tuple)
		dk_set(${Target_Tuple} 1)
		
		### Set DEBUG_DIR and RELEASE_DIR variables
		if(IOS)
			dk_set(DEBUG_DIR Debug-iphoneos)
			dk_set(RELEASE_DIR Release-iphoneos)
		elseif(IOSSIM)
			dk_set(DEBUG_DIR Debug-iphonesimulator)
			dk_set(RELEASE_DIR Release-iphonesimulator)
		else()
			dk_set(DEBUG_DIR Debug)
			dk_set(RELEASE_DIR Release)
		endif()
		dk_assertVar(DEBUG_DIR)
		dk_assertVar(RELEASE_DIR)
		dk_printVar(DEBUG_DIR)
		dk_printVar(RELEASE_DIR)
	else()
		dk_error("dk_Target_Tuple must run in CMAKE_SCRIPT_MODE_FILE")
	endif()
endfunction()






###### DKTEST ###### DKTEST ###### DKTEST ###### DKTEST ###### DKTEST ######
function(DKTEST)
	dk_debugFunc(0)
	
	dk_Target_Tuple_SET()
endfunction()
