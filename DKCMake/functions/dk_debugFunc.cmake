include(${DKCMAKE_FUNCTIONS_DIR}/DK.cmake)
include_guard()


if(NOT DEFINED ENABLE_dk_debugFunc)
	set(ENABLE_dk_debugFunc 0 CACHE INTERNAL "")
endif()
if(NOT DEFINED PRINT_CALL_DETAILS)
	set(PRINT_CALL_DETAILS 1 CACHE INTERNAL "")
endif()
if(NOT DEFINED PRINT_FILE_NAMES)
	set(PRINT_FILE_NAMES 1 CACHE INTERNAL "")
endif()
if(NOT DEFINED PRINT_LINE_NUMBERS)
	set(PRINT_LINE_NUMBERS 1 CACHE INTERNAL "")
endif()
if(NOT DEFINED PRINT_FUNCTION_NAMES)
	set(PRINT_FUNCTION_NAMES 1 CACHE INTERNAL "")
endif()
if(NOT DEFINED PRINT_FUNCTION_ARGUMENTS)
	set(PRINT_FUNCTION_ARGUMENTS 1 CACHE INTERNAL "")
endif()
##################################################################################
# dk_debugFunc(${ARGV})
#
#	Prints the current file name, line number, function or macro name, and argument names with values
#	Place this at the first line of every function in DKCMake and your own functions
# 
#	Example:
#		function(MyFunction myArg1 myArg2)
#			dk_debugFunc(${ARGV})

#			## user code
#		endfunction()
#
macro(dk_debugFunc)
	#message("dk_debugFunc(${ARGV})")
	
	if(ENABLE_dk_debugFunc)
		if(NOT CMAKE_CURRENT_FUNCTION_LIST_FILE)
			set(CMAKE_CURRENT_FUNCTION_LIST_FILE "unknown")
		endif()
		get_filename_component(FILENAME ${CMAKE_CURRENT_FUNCTION_LIST_FILE} NAME)
		if(${ARGC} LESS 1)
			dk_debugFunc_updateLogInfo()
			message("${H_black}${FILENAME}:${CMAKE_CURRENT_FUNCTION_LIST_LINE}->${clr}${cyan}${CMAKE_CURRENT_FUNCTION}()${clr}")
		else()
			set(argIndex 1)
			set(argString " {")
			dk_debugFunc_getArgIdentifiers(${ARGV})
			foreach(arg ${ARGV})
				#set(argString "${argString}\"${ARGI${argIndex}}\":\"${arg}\"")
				set(argString "${argString} ${arg}\"")
				if(${argIndex} LESS ${ARGC})
					set(argString "${argString},  ")
				endif()
				math(EXPR argIndex "${argIndex}+1")
			endforeach()
			set(argString "${argString}} ")
			message("${H_black}${FILENAME}:${CMAKE_CURRENT_FUNCTION_LIST_LINE}->${clr}${cyan}${CMAKE_CURRENT_FUNCTION}(${argString})${clr}")
		endif()
	endif()
endmacro()

macro(dk_debugFunc_updateLogInfo)
	if(PRINT_CALL_DETAILS)
		set(STACK_HEADER "")
		if(NOT CMAKE_CURRENT_FUNCTION_LIST_FILE)
			if(PRINT_FILE_NAMES)
				get_filename_component(STACK_FILENAME ${CMAKE_CURRENT_LIST_FILE} NAME)
				set(STACK_HEADER "${STACK_FILENAME}:")
			endif()
			if(PRINT_LINE_NUMBERS)		
				set(STACK_HEADER "${STACK_HEADER}${CMAKE_CURRENT_LIST_LINE}->")
			endif()	
		else()
			if(PRINT_FILE_NAMES)
				get_filename_component(STACK_FILENAME ${CMAKE_CURRENT_FUNCTION_LIST_FILE} NAME)
				set(STACK_HEADER "${STACK_FILENAME}:")
			endif()
			if(PRINT_LINE_NUMBERS)	
				set(STACK_HEADER "${STACK_HEADER}${CMAKE_CURRENT_FUNCTION_LIST_LINE}->")
			endif()
		endif()
		if(PRINT_FUNCTION_NAMES)
			set(STACK_HEADER "${STACK_HEADER}${CMAKE_CURRENT_FUNCTION}")
			if(PRINT_FUNCTION_ARGUMENTS)
				set(STACK_HEADER "${STACK_HEADER}(${ARGV}): ")
			else()
				set(STACK_HEADER "${STACK_HEADER}(): ")
			endif()
		endif()
	endif()
endmacro()

function(dk_debugFunc_getArgIdentifiers ARGV)
	list(LENGTH ARGV ARGV_LENGTH)
	if(ARGV_LENGTH LESS 1)
		return()
	endif()
	get_cmake_property(varNames VARIABLES)
	set(index 0)
	unset(names)
	unset(ARGI)
	while(${index} LESS ${ARGV_LENGTH})
		list(APPEND names ARGV${index})
		set(ARGI${index} ARGV${index} CACHE INTERNAL "")
		foreach(varName ${varNames} REVERSE)
			if(ARGV${index} STREQUAL ${varName})
				if("ARGV${index}" STREQUAL "${varName}") #exclude variables with the same name like ARGV0
					continue()
				endif()
				if("ARGN" STREQUAL "${varName}")
					continue()
				endif()
				#if("CMAKE_CURRENT_FUNCTION" STREQUAL "${varName}")
				#	continue()
				#endif()
				dk_debugFunc_listReplace(names ARGV${index} ${varName})
				set(ARGI${index} ${varName} CACHE INTERNAL "")
				#message(STATUS "ARGI${index} == ${ARGI${index}}")
				break()
			endif()
		endforeach()
		math(EXPR index "${index}+1")
	endwhile()
	set(ARGI ${names} CACHE INTERNAL "")
endfunction()

function(dk_debugFunc_listReplace LIST old_value new_value)
    list(FIND ${LIST} ${old_value} old_value_INDEX)
    if(old_value_INDEX GREATER_EQUAL 0)
        list(REMOVE_AT ${LIST} ${old_value_INDEX})
        list(INSERT ${LIST} ${old_value_INDEX} ${new_value})
    endif()
endfunction()