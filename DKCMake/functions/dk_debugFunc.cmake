set(ENABLE_dk_debugFunc 1)
include(${DKCMAKE_FUNCTIONS_DIR}/DK.cmake)
#include_guard()


##################################################################################
# dk_debugFunc(${ARGV})
#
#	Prints the current file name, line number, function or macro name, and argument names with values
#	Place this at the first line of every function in DKCMake and your own functions
# 
#	Example:
#		function(MyFunction myArg1 myArg2)
#			dk_debugFunc(${ARGV})
#
#			## user code
#		endfunction()
#
macro(dk_debugFunc)
	set(__FILE__ "${CMAKE_CURRENT_FUNCTION_LIST_FILE}" CACHE INTERNAL "")
	set(__LINE__ "${CMAKE_CURRENT_FUNCTION_LIST_LINE}" CACHE INTERNAL "")
	set(__FUNCTION__ "${CMAKE_CURRENT_FUNCTION}"       CACHE INTERNAL "")
	
	#dk_info("TODO: make an exclude ARGV list for dk_debugFunc")
	if(NOT "${__FUNCTION__}" STREQUAL "dk_fileAppend")
	if(NOT "${__FUNCTION__}" STREQUAL "dk_fileWrite")
		set(__ARGV__     "${ARGV}"                         CACHE INTERNAL "")
	endif()
	endif()
	
	list(GET STACK_LEVEL 0 __LEVEL__)
	set(__LEVEL__     ${__LEVEL__}                     CACHE INTERNAL "")
	string(TIMESTAMP __TIME__ "%M:%S:%f")
	string(SUBSTRING "${__TIME__}" 0 10 __TIME__)
	set(__TIME__      ${__TIME__}                      CACHE INTERNAL "")
		
	if(ENABLE_dk_debugFunc)	
		#dk_info("TODO: make an exclude echo list for dk_debugFunc")
		    if("${__FUNCTION__}" STREQUAL "dk_echo")
		elseif("${__FUNCTION__}" STREQUAL "dk_info")
		elseif("${__FUNCTION__}" STREQUAL "dk_debug")
		elseif("${__FUNCTION__}" STREQUAL "dk_warning")
		elseif("${__FUNCTION__}" STREQUAL "dk_verbose")
		elseif("${__FUNCTION__}" STREQUAL "dk_error")
		elseif("${__FUNCTION__}" STREQUAL "dk_todo")
		elseif("${__FUNCTION__}" STREQUAL "dk_fixme")
		elseif("${__FUNCTION__}" STREQUAL "dk_printVar")
		elseif("${__FUNCTION__}" STREQUAL "dk_dumpAllVariables")
		elseif("${__FUNCTION__}" STREQUAL "dk_fileAppend")
		else()
			set(ESC "")
			set(cyan "[36m")
			set(blue "[34m")
			set(clr "[0m")

			unset(indent)
			set(i 4)
			while(${i} LESS ${__LEVEL__})
				set(indent "${indent}   ")
				math(EXPR i "${i}+1")
			endwhile(${i} LESS ${__LEVEL__})
			set(indent "${indent} L ")
	
			dk_echo("${cyan}[${__TIME__}]${indent}${__FILE__}:${__LINE__}   ${blue}${__FUNCTION__}(${__ARGV__})${clr}")
		endif()
	endif()
endmacro()








#macro(dk_debugFunc)
#	#message("dk_debugFunc(${ARGV})")
#	
#	if(ENABLE_dk_debugFunc)
#		if(NOT CMAKE_CURRENT_FUNCTION_LIST_FILE)
#			set(CMAKE_CURRENT_FUNCTION_LIST_FILE "unknown")
#		endif()
#		
#		#dk_getBasename(${CMAKE_CURRENT_FUNCTION_LIST_FILE} FILENAME)
#		if(${ARGC} LESS 1)
#			dk_debugFunc_updateLogInfo()
#			message("${BLACK}${FILENAME}:${CMAKE_CURRENT_FUNCTION_LIST_LINE}->${clr}${cyan}${CMAKE_CURRENT_FUNCTION}()${clr}")
#		else()
#			set(argIndex 1)
#			set(argString " {")
#			dk_debugFunc_getArgIdentifiers(${ARGV})
#			foreach(arg ${ARGV})
#				#set(argString "${argString}\"${ARGI${argIndex}}\":\"${arg}\"")
#				set(argString "${argString} ${arg}\"")
#				if(${argIndex} LESS ${ARGC})
#					set(argString "${argString},  ")
#				endif()
#				math(EXPR argIndex "${argIndex}+1")
#			endforeach()
#			set(argString "${argString}} ")
#			message("${BLACK}${FILENAME}:${CMAKE_CURRENT_FUNCTION_LIST_LINE}->${clr}${cyan}${CMAKE_CURRENT_FUNCTION}(${argString})${clr}")
#		endif()
#	endif()
#endmacro()

#macro(dk_debugFunc_updateLogInfo)
#	if(PRINT_CALL_DETAILS)
#		set(STACK_HEADER "")
#		if(NOT CMAKE_CURRENT_FUNCTION_LIST_FILE)
#			if(PRINT_FILE_NAMES)
#				dk_getBasename(${CMAKE_CURRENT_LIST_FILE} STACK_FILENAME)
#				set(STACK_HEADER "${STACK_FILENAME}:")
#			endif()
#			if(PRINT_LINE_NUMBERS)		
#				set(STACK_HEADER "${STACK_HEADER}${CMAKE_CURRENT_LIST_LINE}->")
#			endif()	
#		else()
#			if(PRINT_FILE_NAMES)
#				dk_getBasename(${CMAKE_CURRENT_FUNCTION_LIST_FILE} STACK_FILENAME)
#				set(STACK_HEADER "${STACK_FILENAME}:")
#			endif()
#			if(PRINT_LINE_NUMBERS)	
#				set(STACK_HEADER "${STACK_HEADER}${CMAKE_CURRENT_FUNCTION_LIST_LINE}->")
#			endif()
#		endif()
#		if(PRINT_FUNCTION_NAMES)
#			set(STACK_HEADER "${STACK_HEADER}${CMAKE_CURRENT_FUNCTION}")
#			if(PRINT_FUNCTION_ARGUMENTS)
#				set(STACK_HEADER "${STACK_HEADER}(${ARGV}): ")
#			else()
#				set(STACK_HEADER "${STACK_HEADER}(): ")
#			endif()
#		endif()
#	endif()
#endmacro()

#function(dk_debugFunc_getArgIdentifiers ARGV)
#	list(LENGTH ARGV ARGV_LENGTH)
#	if(ARGV_LENGTH LESS 1)
#		return()
#	endif()
#	get_cmake_property(varNames VARIABLES)
#	set(index 0)
#	unset(names) #dk_unset(names)
#	unset(ARGI) #dk_unset(ARGI)
#	while(${index} LESS ${ARGV_LENGTH})
#		list(APPEND names ARGV${index})
#		set(ARGI${index} ARGV${index} CACHE INTERNAL "")
#		foreach(varName ${varNames} REVERSE)
#			if(ARGV${index} STREQUAL ${varName})
#				if("ARGV${index}" STREQUAL "${varName}") #exclude variables with the same name like ARGV0
#					continue()
#				endif()
#				if("ARGN" STREQUAL "${varName}")
#					continue()
#				endif()
#				#if("CMAKE_CURRENT_FUNCTION" STREQUAL "${varName}")
#				#	continue()
#				#endif()
#				dk_debugFunc_listReplace(names ARGV${index} ${varName})
#				set(ARGI${index} ${varName} CACHE INTERNAL "")
#				#message(STATUS "ARGI${index} == ${ARGI${index}}")
#				break()
#			endif()
#		endforeach()
#		math(EXPR index "${index}+1")
#	endwhile()
#	set(ARGI ${names} CACHE INTERNAL "")
#endfunction()

#function(dk_debugFunc_listReplace LIST old_value new_value)
#   list(FIND ${LIST} ${old_value} old_value_INDEX)
#    if(old_value_INDEX GREATER_EQUAL 0)
#        list(REMOVE_AT ${LIST} ${old_value_INDEX})
#        list(INSERT ${LIST} ${old_value_INDEX} ${new_value})
#    endif()
#endfunction()
