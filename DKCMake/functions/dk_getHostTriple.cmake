include_guard()

###############################################################################
# dk_getHostTriple()
#
#	set the cached host variables 
#
#	<HOST> 			= WIN, APPLE, LINUX, ANDROID
#	<HOST>_HOST 	= WIN_HOST, UNIX_HOST, MAC_HOST, ANDROID_HOST
#	HOST_ARCH		= arm32, arm64, x86, x86_64

macro(dk_getHostTriple)
	if("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "MSYS")
		set(CMAKE_HOST_WIN32 1)
		unset(CMAKE_HOST_UNIX)
		unset(CMAKE_HOST_APPLE)
	endif()
	
	dk_debug(CMAKE_HOST_WIN32)
	dk_debug(CMAKE_HOST_APPLE)
	dk_debug(CMAKE_HOST_UNIX)
	dk_debug(CMAKE_HOST_SYSTEM_NAME)
	
	###### Set <HOST>_HOST variables ######
	if(CMAKE_HOST_WIN32)
		set(WIN_HOST 			TRUE 		CACHE INTERNAL "")
	endif()
	if(CMAKE_HOST_APPLE)
		set(UNIX_HOST 			TRUE 		CACHE INTERNAL "")
		set(MAC_HOST 			TRUE 		CACHE INTERNAL "")
	endif()
	if(CMAKE_HOST_UNIX AND NOT CMAKE_HOST_APPLE)
		set(UNIX_HOST 			TRUE 		CACHE INTERNAL "")
		set(LINUX_HOST 			TRUE 		CACHE INTERNAL "")
		
		if("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Android")
			set(ANDROID_HOST 	TRUE 		CACHE INTERNAL "")
		endif()
	endif()
	
	###### Set HOST variable ######
	if(CMAKE_HOST_WIN32)
		set(HOST		WIN			CACHE INTERNAL "")
	elseif(CMAKE_HOST_APPLE)
		set(HOST		APPLE		CACHE INTERNAL "")
	elseif(CMAKE_HOST_UNIX AND NOT CMAKE_HOST_APPLE)
		if("${CMAKE_HOST_SYSTEM_NAME}" STREQUAL "Android")
			set(HOST	ANDROID		CACHE INTERNAL "")
		else()
			set(HOST	LINUX		CACHE INTERNAL "")
		endif()
	else()
		dk_error("CMAKE_HOST: Unknown host")
	endif()
	dk_debug(HOST)
	
	### Set HOST_ARCH
	if(NOT CMAKE_HOST_SYSTEM_PROCESSOR)
		if(CMAKE_HOST_WIN32)
			if (DEFINED ENV{PROCESSOR_ARCHITEW6432})
			  set (CMAKE_HOST_SYSTEM_PROCESSOR "$ENV{PROCESSOR_ARCHITEW6432}")
			else()
			  set (CMAKE_HOST_SYSTEM_PROCESSOR "$ENV{PROCESSOR_ARCHITECTURE}")
			endif()
		else()
			execute_process(COMMAND uname -m OUTPUT_VARIABLE CMAKE_HOST_SYSTEM_PROCESSOR)
		endif()
	endif()
	string(STRIP "${CMAKE_HOST_SYSTEM_PROCESSOR}" CMAKE_HOST_SYSTEM_PROCESSOR)
	dk_debug(CMAKE_HOST_SYSTEM_PROCESSOR)
	
	if("${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "aarch64")
		set(ARM64 TRUE CACHE INTERNAL "")
		set(HOST_ARCH arm64	CACHE INTERNAL "")
	elseif("${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "AMD64")
		set(X86_64 TRUE CACHE INTERNAL "")
		set(HOST_ARCH x86_64 CACHE INTERNAL "")
	elseif("${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "ARM64")
		set(ARM64 TRUE CACHE INTERNAL "")
		set(HOST_ARCH arm64	CACHE INTERNAL "")
	elseif("${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "EM64T")
		set(X86_64 TRUE CACHE INTERNAL "")
		set(HOST_ARCH x86_64 CACHE INTERNAL "")
	elseif("${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "IA64")
		set(X86_64 TRUE CACHE INTERNAL "")
		set(HOST_ARCH x86_64 CACHE INTERNAL "")
	elseif("${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "x86")
		set(X86 TRUE CACHE INTERNAL "")
		set(HOST_ARCH x86 CACHE INTERNAL "")
	elseif("${CMAKE_HOST_SYSTEM_PROCESSOR}" STREQUAL "x86_64")
		set(X86_64 TRUE CACHE INTERNAL "")
		set(HOST_ARCH x86_64 CACHE INTERNAL "")
	else()
		dk_error("CMAKE_HOST_SYSTEM_PROCESSOR: Unknown arch: \"${CMAKE_HOST_SYSTEM_PROCESSOR}\"")
	endif()
	#string(STRIP "${HOST_ARCH}" HOST_ARCH)
	dk_debug(HOST_ARCH)
	
	### set [HOST]_[HOST_ARCH] variable
	string(TOUPPER ${HOST} HOST_UPPER)
	string(TOUPPER ${HOST_ARCH} HOST_ARCH_UPPER)
	set(${HOST_UPPER}_${HOST_ARCH_UPPER}_HOST TRUE CACHE INTERNAL "")
	#string(STRIP "${${HOST_UPPER}_${HOST_ARCH_UPPER}_HOST}" ${HOST_UPPER}_${HOST_ARCH_UPPER}_HOST)
	dk_debug(${HOST_UPPER}_${HOST_ARCH_UPPER}_HOST)
	
endmacro()