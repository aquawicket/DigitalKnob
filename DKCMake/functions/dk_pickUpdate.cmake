#!/usr/bin/cmake -P
if(NOT EXISTS "$ENV{DKCMAKE_FUNCTIONS_DIR_}DK.cmake")
	cmake_policy(SET CMP0009 NEW)
	file(GLOB_RECURSE DK.cmake "/DK.cmake")
	list(GET DK.cmake 0 DK.cmake)
	get_filename_component(DKCMAKE_FUNCTIONS_DIR "${DK.cmake}" DIRECTORY)
	set(ENV{DKCMAKE_FUNCTIONS_DIR_} "${DKCMAKE_FUNCTIONS_DIR}/")
endif()
include("$ENV{DKCMAKE_FUNCTIONS_DIR_}DK.cmake")
include_guard()

#dk_fatal("dk_pickUpdate.cmake is discontinued")
##############################################################################
# dk_pickUpdate()
# 
#	Pause execution and wait for keypress to continue
#
function(dk_pickUpdate) 
	dk_debugFunc(0)

	dk_gitCheckRemote()
	
	unset(Target_App)
	unset(Target_Tuple)
	unset(Target_Type)
	
	### Load DKBuilder.cache ###
	dk_validate(DKCACHE_DIR "dk_DKCACHE_DIR()")
	if(EXISTS "${DKCACHE_DIR}/DKBuilder.cache")
		dk_getFileParams("${DKCACHE_DIR}/DKBuilder.cache")
	endif()
	
	if(${behind} LESS 1)
		if((DEFINED Target_App_Cache) AND (DEFINED Target_Os_Cache) AND (DEFINED Target_Arch_Cache) AND (DEFINED Target_Env_Cache) AND (DEFINED Target_Type_Cache))
			dk_echo(" 0) Repeat Cache '${Target_App_Cache}_${Target_Os_Cache}_${Target_Arch_Cache}_${Target_Env_Cache}_${Target_Type_Cache}'")
		endif()
		dk_echo(" 1) Git Update") 
		dk_echo(" 2) Git Commit")
		dk_echo(" 3) Push assets")
		dk_echo(" 4) Pull assets")
		dk_echo(" 5) Reset All")
		dk_echo(" 6) Remove All")
		dk_echo(" 7) Clear Screen")
		dk_echo(" 8) Clear cmake cache and .tmp files")
		dk_echo(" 9) Reload")
		dk_echo("10) Exit")
		dk_validate(ENV{DKBRANCH_DIR} "dk_DKBRANCH_DIR()")
		if(EXISTS "$ENV{DKBRANCH_DIR}/build_list.txt")
			dk_echo("11) Run 'build_list.txt'")
		endif()
		dk_echo()
		dk_echo(" Press Enter To Skip")
	else()
		dk_warning("Your local repository is behind, please 'Git Update'")
		dk_echo()
		dk_echo("$ENV{red}") 
		if((DEFINED Target_App_Cache) AND (DEFINED Target_Os_Cache) AND (DEFINED Target_Arch_Cache) AND (DEFINED Target_Env_Cache) AND (DEFINED Target_Type_Cache))
			dk_echo(" 0) Repeat Cache '${Target_App_Cache}_${Target_Os_Cache}_${Target_Arch_Cache}_${Target_Env_Cache}_${Target_Type_Cache}'")
		endif()
		dk_echo("$ENV{green}")
		dk_echo(" 1) Git Update")
		dk_echo("$ENV{red}")
		dk_echo(" 2) Git Commit")
		dk_echo(" 3) Push assets")
		dk_echo(" 4) Pull assets")
		dk_echo(" 5) Reset All")
		dk_echo(" 6) Remove All")
		dk_echo(" 7) Clear Screen")
		dk_echo(" 8) Reload")
		dk_echo(" 9) Exit")
		if("${choice}" STREQUAL "11")
			set(BUILD_LIST_FILE "$ENV{DKBRANCH_DIR}/build_list.txt")
			return()
		endif()
		dk_echo()
		dk_echo("Press Enter To Skip")
		dk_echo("$ENV{clr}")
	endif()
	
	
	dk_keyboardInput(input)
	if("${input}" EQUAL "0")
		dk_set(Target_App	${Target_App_Cache})
		dk_set(Target_Tuple	${Target_Tuple_Cache})
		dk_set(Target_Type	${Target_Type_Cache})
		set(ENV{UPDATE} 1)
	elseif("${input}" EQUAL "1")
		dk_gitUpdate("https://github.com/aquawicket/DigitalKnob.git" "Development")
	elseif("${input}" EQUAL "2")
		dk_gitCommit()
	elseif("${input}" EQUAL "3")
		dk_pushAssets()
	elseif("${input}" EQUAL "4")
		dk_pullAssets()
	elseif("${input}" EQUAL "5")
		dk_resetAll()
	elseif("${input}" EQUAL "6")
		dk_removeAll()
	elseif("${input}" EQUAL "7")
		dk_clearScreen()
	elseif("${input}" EQUAL "8")
		dk_reload()
	elseif("${input}" EQUAL "9")
		dk_exit(0)	
	elseif("${input}" STREQUAL "")
		set(ENV{UPDATE} 1)
	else()
		dk_warning("invalid selection: '${input}'")
	endif()
endfunction()






###### DKTEST ###### DKTEST ###### DKTEST ###### DKTEST ###### DKTEST ######
function(DKTEST)
	dk_debugFunc(0)
	
	dk_pickUpdate()
endfunction()
