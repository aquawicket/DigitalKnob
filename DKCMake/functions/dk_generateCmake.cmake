#!/usr/bin/cmake -P
include(${DKCMAKE_FUNCTIONS_DIR_}DK.cmake)
include_guard()

###############################################################################
# dk_generateCmake(plugin_name)
#
#	TODO
#
#	@plugin_name	- TODO
#
function(dk_generateCmake plugin_name)
	dk_debugFunc()
	dk_info("dk_generateCmake(${plugin_name})")
	
	dk_getPathToPlugin(${plugin_name} plugin_path)
	if(NOT EXISTS "${plugin_path}")
		dk_fatal("dk_generateCmake(${plugin_name}): plugin not found")
	endif()
	# Create CmakeLists.txt file
	dk_delete(${plugin_path}/CMakeLists.txt)
	dk_fileWrite(${plugin_path}/CMakeLists.txt "### This file is generated by DKCMake. Any Changes here, will be overwritten. ###\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "### ${plugin_name} ###\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "cmake_minimum_required(VERSION 3.10)\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "cmake_policy(SET CMP0054 NEW)\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "project(${plugin_name})\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "include_directories(${DKPLUGINS_DIR})\n")
	foreach(each_include ${DKINCLUDES_LIST})
		dk_fileAppend(${plugin_path}/CMakeLists.txt "include_directories(${each_include})\n")
	endforeach()
	foreach(each_define ${DKDEFINES_LIST})
		dk_fileAppend(${plugin_path}/CMakeLists.txt "add_definitions(-D${each_define})\n")
	endforeach()
	foreach(each_linkdir ${DKLINKDIRS_LIST})
		dk_fileAppend(${plugin_path}/CMakeLists.txt "link_directories(${each_linkdir})\n")
	endforeach()	
	dk_fileAppend(${plugin_path}/CMakeLists.txt "file(GLOB ${plugin_name}_SRC\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "		${plugin_path}/*.h\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "		${plugin_path}/*.c\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "		${plugin_path}/*.cpp\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt ")\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "if(WIN)\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "		file(GLOB WIN_SRC\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "			${plugin_path}/*.rc\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "			${plugin_path}/*.manifest\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "		)\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "		list(APPEND ${plugin_name}_SRC \${WIN_SRC})\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "endif()\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "if(IOS OR IOSSIM)\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "		file(GLOB IOS_SRC\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "			${plugin_path}/*.mm\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "		)\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "		list(APPEND ${plugin_name}_SRC \${IOS_SRC})\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "endif()\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "add_library(${plugin_name} STATIC \${${plugin_name}_SRC})\n")
	#dk_fileAppend(${plugin_path}/CMakeLists.txt "target_compile_options(${plugin_name} PRIVATE \${CMAKE_CXX_FLAGS} $<$<CONFIG:Debug>:\${CMAKE_CXX_FLAGS_DEBUG}> $<$<CONFIG:Release>:\${CMAKE_CXX_FLAGS_RELEASE}>)\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "if(MSVC)\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "set_target_properties(${plugin_name} PROPERTIES LINKER_LANGUAGE CPP)\n") 
	dk_fileAppend(${plugin_path}/CMakeLists.txt "		set_property(DIRECTORY \${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${plugin_name})\n")
	dk_fileAppend(${plugin_path}/CMakeLists.txt "endif()\n")
	#dk_fileAppend(${plugin_path}/CMakeLists.txt "install(TARGETS ${plugin_name} DESTINATION lib/\${triple})\n")
	#dk_fileAppend(${plugin_path}/CMakeLists.txt "file(GLOB HEADER_FILES ${plugin_path}/*.h)\n")
	#dk_fileAppend(${plugin_path}/CMakeLists.txt "install(FILES \${HEADER_FILES} DESTINATION include/${plugin_name})\n")
	#dk_fileAppend(${plugin_path}/CMakeLists.txt "if(NOT DKAPP)\n")
	#dk_fileAppend(${plugin_path}/CMakeLists.txt "     set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${plugin_name})\n")
	#dk_fileAppend(${plugin_path}/CMakeLists.txt "endif()\n")
	# add headers to DKPlugins.h
	#if(${plugin_name} STREQUAL DK OR STATIC)
	if(${plugin_name} STREQUAL DK OR BUILD_STATIC_LIBS)
		file(GLOB HEADER_FILES RELATIVE ${DKPLUGINS_DIR} ${plugin_path}/*.h)
		foreach(header ${HEADER_FILES})
			if(NOT PLUGINS_FILE MATCHES "${header}")
				dk_info("Adding ${header} to header file.")
				dk_set(PLUGINS_FILE ${PLUGINS_FILE} "#include \"${header}\"\\n")
			endif()
			#if(NOT PLUGINS_FILE MATCHES "DKHAVE_${plugin_name}")
			#	dk_info("Adding #define DKHAVE_${plugin_name} 1 to header file.")
			#	dk_set(PLUGINS_FILE ${PLUGINS_FILE} "#define DKHAVE_${plugin_name} 1\\n")
			#endif()
		endforeach()
	endif()
	dk_enable				(${plugin_name})
	if(MSVC)
		dk_if(WIN			"dk_libDebug(${plugin_path}/${triple}/${DEBUG_DIR}/${plugin_name}.lib)")
		dk_if(WIN			"dk_libRelease(${plugin_path}/${triple}/${RELEASE_DIR}/${plugin_name}.lib)")
	else()
		dk_if(WIN			"dk_libDebug(${plugin_path}/${triple}/${DEBUG_DIR}/lib${plugin_name}.a)")
		dk_if(WIN			"dk_libRelease(${plugin_path}/${triple}/${RELEASE_DIR}/lib${plugin_name}.a)")
	endif()
	dk_if(MAC				"dk_libDebug(${plugin_path}/${triple}/${DEBUG_DIR}/lib${plugin_name}.a)")
	dk_if(MAC				"dk_libRelease(${plugin_path}/${triple}/${RELEASE_DIR}/lib${plugin_name}.a)")
	dk_if(IOS				"dk_libDebug(${plugin_path}/${triple}/Debug-iphoneos/lib${plugin_name}.a)")
	dk_if(IOS				"dk_libRelease(${plugin_path}/${triple}/Release-iphoneos/lib${plugin_name}.a)")
	dk_if(IOSSIM			"dk_libDebug(${plugin_path}/${triple}/Debug-iphonesimulator/lib${plugin_name}.a)")
	dk_if(IOSSIM			"dk_libRelease(${plugin_path}/${triple}/Release-iphonesimulator/lib${plugin_name}.a)")
	dk_if(LINUX				"dk_libDebug(${plugin_path}/${triple}/${DEBUG_DIR}/lib${plugin_name}.a)")
	dk_if(LINUX				"dk_libRelease(${plugin_path}/${triple}/${RELEASE_DIR}/lib${plugin_name}.a)")
	dk_if(RASPBERRY			"dk_libDebug(${plugin_path}/${triple}/${DEBUG_DIR}/lib${plugin_name}.a)")
	dk_if(RASPBERRY			"dk_libRelease(${plugin_path}/${triple}/${RELEASE_DIR}/lib${plugin_name}.a)")
	dk_if(ANDROID			"dk_libDebug(${plugin_path}/${triple}/${DEBUG_DIR}/lib${plugin_name}.a)")
	dk_if(ANDROID			"dk_libRelease(${plugin_path}/${triple}/${RELEASE_DIR}/lib${plugin_name}.a)")
	dk_if(EMSCRIPTEN		"dk_libDebug(${plugin_path}/${triple}/${DEBUG_DIR}/lib${plugin_name}.a)")
	dk_if(EMSCRIPTEN		"dk_libRelease(${plugin_path}/${triple}/${RELEASE_DIR}/lib${plugin_name}.a)")
	if(REBUILD OR REBUILDALL)
		dk_set(QUEUE_BUILD ON)
	endif()

	dk_verbose("dk_append(DKPLUGIN_LIST ${plugin_name})  #Add to list")
	dk_append(DKPLUGIN_LIST ${plugin_name})  #Add to list
endfunction()





###### DKTEST ###### DKTEST ###### DKTEST ###### DKTEST ###### DKTEST ######
function(DKTEST)
	dk_debugFunc(0)
	
	dk_todo()
endfunction()