#!/usr/bin/cmake -P
include("$ENV{DKCMAKE_FUNCTIONS_DIR_}DK.cmake")
include_guard()

###############################################################################
# dk_testApp(plugin_name)
#
#	TODO
#
#	@plugin_name	- TODO
#
function(dk_testApp plugin_name)
	dk_debugFunc()
	
	dk_getPathToPlugin(${plugin_name} Plugin_Path)
	if(NOT EXISTS "${Plugin_Path}/test")
		dk_info("dk_testApp(): ${plugin_name}_test app not found")
		dk_return()
	endif()
	dk_info("building ${plugin_name}_test app")
	dk_set(test_path "${Plugin_Path}/test")
	
	# Create CmakeLists.txt file
	dk_delete("${test_path}/CMakeLists.txt")
	dk_fileAppend(${test_path}/CMakeLists.txt "### This file is generated by DKCMake. Any Changes here, will be overwritten. ###\n")
	dk_fileAppend(${test_path}/CMakeLists.txt "### ${plugin_name} ###\n")
	dk_fileAppend(${test_path}/CMakeLists.txt "cmake_minimum_required(VERSION 3.10)\n")
	#dk_fileAppend(${test_path}/CMakeLists.txt "cmake_policy(SET CMP0054 NEW)\n")
	dk_fileAppend(${test_path}/CMakeLists.txt "include($ENV{DKCMAKE_DIR}/DKFunctions.cmake)\n")
	dk_fileAppend(${test_path}/CMakeLists.txt "include($ENV{DKCMAKE_DIR}/DKVariables.cmake)\n")
	dk_appendCmake("project(${plugin_name}_test)\n")
	dk_appendCmake("include_directories(${DKCPP_PLUGINS_DIR})\n")
		
	# TODO		
	dk_addToPluginList(${plugin_name})
endfunction()





###### DKTEST ###### DKTEST ###### DKTEST ###### DKTEST ###### DKTEST ######
function(DKTEST)
	dk_debugFunc(0)
	
	dk_todo()
endfunction()