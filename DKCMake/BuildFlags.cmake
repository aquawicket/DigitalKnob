if(DKBUILDTOOLS_INCLUDED)
  return()
endif(DKBUILDTOOLS_INCLUDED)
set(DKBUILDTOOLS_INCLUDED 1)

# https://clang.llvm.org/docs/ClangCommandLineReference.html
# https://clang.llvm.org/docs/CrossCompilation.html
# https://gcc.gnu.org/onlinedocs/gcc/C_002b_002b-Dialect-Options.html
# https://gcc.gnu.org/onlinedocs/gcc/ARM-Options.html
# https://llvm.org/docs/GettingStarted.html
# https://llvm.org/docs/HowToCrossCompileLLVM.html
# https://forums.raspberrypi.com/viewtopic.php?t=244095
# https://bibouh123.wordpress.com/2014/10/13/compile-llvm-with-enabling-rtti/
# https://chromium.googlesource.com/external/github.com/google/crc32c/+/refs/tags/1.0.5/CMakeLists.txt
# https://docs.microsoft.com/en-us/cpp/build/reference/eh-exception-handling-model?view=msvc-170
# https://stackoverflow.com/a/24836566/688352
# https://docs.microsoft.com/en-us/cpp/c-runtime-library/crt-library-features?view=msvc-170

# Get the definition of any shell command                                             https://explainshell.com          
# helpful terminal commands
# lscpu                                     see details about the cpu                 https://explainshell.com/explain?cmd=lscpu
# uname -a                                  system identifier                         https://explainshell.com/explain?cmd=uname+-a
# gcc -c -Q -march=native --help=target     target specific compiler gcc flags        https://explainshell.com/explain?cmd=gcc+-c+-Q+-march%3Dnative+--help%3Dtarget
# gcc --version                             the version of gcc on the host machine    https://explainshell.com/explain?cmd=gcc+--version
# gcc --help                                general gcc help                          https://explainshell.com/explain?cmd=gcc+--help
# clang --version                           the version of clang on the host machine  https://explainshell.com/explain?cmd=clang+--version 
# clang--help                               general clang help                        https://explainshell.com/explain?cmd=clang+--help
# gcc-fpu                                   ARM processor floating point math         https://explainshell.com/explain?cmd=gcc+-fpu

# common flags for compilers
#                                         GCC                 CLANG/LLVM          MSVC                                                               NOTES
# Enable runtime type information         -frtti              -frtti              /GR                                                         
# Disable runtime type information        -fno-rtti           -fno-rtti           /GR-                                                         
# Standard C++ exception handling         -fexceptions        -fexceptions        /EHsc                                                    #https://stackoverflow.com/a/4574319/688352
# No Exceptions                           -fno-exceptions     -fno-exceptions     /D_HAS_EXCEPTIONS=0                                      #https://stackoverflow.com/a/65513682/688352
# Use address sanatizer                   -fsanitize=address  -fsanitize=address  /fsanitize=address                                       incompatable with /RTC1 
# Suppress Startup Banner                                                         /nologo     
# Enable updated __cplusplus macro                                                /Zc:__cplusplus       
# Precompiled Header Memory Limit                                                 /Zm<factor>                                              <factor> = memory size  EXAMPLE: /Zm500  
# No Experimental filesystem warning                                              /D_SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING
# Enable CRT Secure functions extension                                           /D__STDC_WANT_LIB_EXT1__
# supress CRT Secure function warnings                                            /D_CRT_SECURE_NO_WARNINGS
# precompiled headers                                                             /Yu<file>                                                <file> = file name  EXAMPLE: /Yustdafx.h


### User Friendly Options ###
DKSET(WARNINGS_AS_ERRORS OFF)
DKSET(WARNING_LEVEL 3)
DKSET(WARNING_4244 ON)
DKSET(WARNING_5105 ON)
#DKSET(STATIC ON)
#DKSET(SHARED OFF)                                          

# xcode Variables
DKSET(XCODE_DEVROOT  /Applications/Xcode.app/Contents/Developer)
DKSET(XCODE_CLANG    ${XCODE_DEVROOT}/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang)
DKSET(XCODE_CLANGXX  ${XCODE_DEVROOT}/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++)
DKSET(XCODE_LIBTOOL  ${XCODE_DEVROOT}/Toolchains/XcodeDefault.xctoolchain/usr/bin/libtool)

# iOS variables
DKSET(IOS_DARWIN      darwin20.6.0)
DKSET(IOS_MIN_SDK     13.0)
DKSET(IOS_SYSROOT     ${XCODE_DEVROOT}/Platforms/iPhone.platform/Developer/SDKs/iPhone15.0.sdk)
DKSET(IOSSIM_SYSROOT  ${XCODE_DEVROOT}/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.0.sdk)

# linux variables
DKSET(LINUX_GCC   /usr/bin/gcc)
DKSET(LINUX_GXX   /usr/bin/g++)

# Visual C++ variables 
DKSET(MSVC_CL      C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.30.30705/bin/Hostx64/x86/cl.exe)
DKSET(MINGW32_GCC  C:/Users/Administrator/digitalknob/DK/3rdParty/mingw32-8.1.0/bin/gcc.exe)
DKSET(MINGW32_GXX  C:/Users/Administrator/digitalknob/DK/3rdParty/mingw32-8.1.0/bin/g++.exe)
DKSET(MINGW64_GCC  C:/Users/Administrator/digitalknob/DK/3rdParty/mingw64-8.1.0/bin/gcc.exe)
DKSET(MINGW64_GXX  C:/Users/Administrator/digitalknob/DK/3rdParty/mingw64-8.1.0/bin/g++.exe)
 

# Windows i686
WIN32_DKSET(DKCMAKE_FLAGS                -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON)
WIN32_DKSET(DKCMAKE_C_COMPILER           "${MSVC_CL}")
WIN32_DKSET(DKCMAKE_C_FLAGS              "/DWIN /DWIN32 /D_WINDOWS /D_CRT_SECURE_NO_WARNINGS /D_USING_V110_SDK71_ /std:c17 /nologo /GR /EHsc /Zm500 /Zc:__cplusplus") #/D_WIN32_WINNT=0x0600
WIN32_DKSET(DKCMAKE_C_FLAGS_DEBUG        "/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG")
WIN32_DKSET(DKCMAKE_C_FLAGS_RELEASE      "/MT /O2 /Ob2 /DNDEBUG /DRELEASE")
WIN32_DKSET(DKCMAKE_CXX_COMPILER         "${MSVC_CL}")
WIN32_DKSET(DKCMAKE_CXX_FLAGS            "/DWIN /DWIN32 /D_WINDOWS /D_CRT_SECURE_NO_WARNINGS /D_USING_V110_SDK71_ /std:c++17 /nologo /GR /EHsc /Zm500 /Zc:__cplusplus") #/D_WIN32_WINNT=0x0600
WIN32_DKSET(DKCMAKE_CXX_FLAGS_DEBUG      "/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG")
WIN32_DKSET(DKCMAKE_CXX_FLAGS_RELEASE    "/MT /O2 /Ob2 /DNDEBUG /DRELEASE")
WIN32_DKSET(DKCONFIGURE_FLAGS            --build=i686-w64-mingw32 --disable-shared --enable-static)
WIN32_DKSET(DKCONFIGURE_CC               ${MINGW32_GCC})
WIN32_DKSET(DKCONFIGURE_CFLAGS           "-march=i686 -DWIN -DWIN32 -D_WINDOWS -D_CRT_SECURE_NO_WARNINGS -D_USING_V110_SDK71_ -std=gnu17 -fexceptions") #-D_WIN32_WINNT=0x0600 
WIN32_DKSET(DKCONFIGURE_CFLAGS_DEBUG     "-DDEBUG -D_DEBUG -g")
WIN32_DKSET(DKCONFIGURE_CFLAGS_RELEASE   "-DNDEBUG -DRELEASE -O3")
WIN32_DKSET(DKCONFIGURE_CXX	             ${MINGW32_GXX})
WIN32_DKSET(DKCONFIGURE_CXXFLAGS         "-march=i686 -DWIN -DWIN32 -D_WINDOWS -D_CRT_SECURE_NO_WARNINGS -D_USING_V110_SDK71_ -std=gnu++17 -frtti -fexceptions") #-D_WIN32_WINNT=0x0600
WIN32_DKSET(DKCONFIGURE_CXXFLAGS_DEBUG   "-DDEBUG -D_DEBUG -g")
WIN32_DKSET(DKCONFIGURE_CXXFLAGS_RELEASE "-DNDEBUG -DRELEASE -O3")
		
# Windows x86_64
WIN64_DKSET(DKCMAKE_FLAGS                 -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON)
WIN64_DKSET(DKCMAKE_C_COMPILER            "${MSVC_CL}")
WIN64_DKSET(DKCMAKE_C_FLAGS               "/DWIN /DWIN64 /D_WINDOWS /D_CRT_SECURE_NO_WARNINGS /D_USING_V110_SDK71_ /std:c17 /nologo /GR /EHsc /Zm500 /Zc:__cplusplus /MACHINE:X64") #/D_WIN32_WINNT=0x0600
WIN64_DKSET(DKCMAKE_C_FLAGS_DEBUG         "/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG")
WIN64_DKSET(DKCMAKE_C_FLAGS_RELEASE       "/MT /O2 /Ob2 /DNDEBUG /DRELEASE")
WIN64_DKSET(DKCMAKE_CXX_COMPILER          "${MSVC_CL}")
WIN64_DKSET(DKCMAKE_CXX_FLAGS             "/DWIN /DWIN64 /D_WINDOWS /D_CRT_SECURE_NO_WARNINGS /D_USING_V110_SDK71_ /std:c++17 /nologo /GR /EHsc /Zm500 /Zc:__cplusplus /MACHINE:X64") #/D_WIN32_WINNT=0x0600
WIN64_DKSET(DKCMAKE_CXX_FLAGS_DEBUG       "/MTd /Od /Ob0 /Zi /RTC1 /DDEBUG /D_DEBUG")
WIN64_DKSET(DKCMAKE_CXX_FLAGS_RELEASE     "/MT /O2 /Ob2 /DNDEBUG /DRELEASE")
WIN64_DKSET(DKCONFIGURE_FLAGS             --build=x86_64-w64-mingw32 --disable-shared --enable-static)
WIN64_DKSET(DKCONFIGURE_CC                ${MINGW64_GCC})
WIN64_DKSET(DKCONFIGURE_CFLAGS            "-march=x86-64 -DWIN -DWIN64 -D_WINDOWS -D_CRT_SECURE_NO_WARNINGS -D_WIN32_WINNT=0x0600 -D_USING_V110_SDK71_ -std=gnu17 -fexceptions") #/D_WIN32_WINNT=0x0600
WIN64_DKSET(DKCONFIGURE_CFLAGS_DEBUG      "-DDEBUG -D_DEBUG -g")
WIN64_DKSET(DKCONFIGURE_CFLAGS_RELEASE    "-DNDEBUG -DRELEASE -O3")
WIN64_DKSET(DKCONFIGURE_CXX	              ${MINGW64_GXX})
WIN64_DKSET(DKCONFIGURE_CXXFLAGS          "-march=x86-64 -DWIN -DWIN64 -D_WINDOWS -D_CRT_SECURE_NO_WARNINGS -D_WIN32_WINNT=0x0600 -D_USING_V110_SDK71_ -std=gnu++17 -frtti -fexceptions") #/D_WIN32_WINNT=0x0600
WIN64_DKSET(DKCONFIGURE_CXXFLAGS_DEBUG    "-DDEBUG -D_DEBUG -g")
WIN64_DKSET(DKCONFIGURE_CXXFLAGS_RELEASE  "-DNDEBUG -DRELEASE -O3")

# Moc i686
MAC32_DKSET(DKCMAKE_FLAGS                 -DCMAKE_OSX_ARCHITECTURES=x86 -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON)
MAC32_DKSET(DKCMAKE_C_COMPILER            ${XCODE_CLANG})
MAC32_DKSET(DKCMAKE_C_FLAGS               "-DMAC -DMAC32 -std=c17 -x objective-c")
MAC32_DKSET(DKCMAKE_C_FLAGS_DEBUG         "-DDEBUG -D_DEBUG -g")
MAC32_DKSET(DKCMAKE_C_FLAGS_RELEASE       "-DNDEBUG -DRELEASE -O3")
MAC32_DKSET(DKCMAKE_CXX_COMPILER          ${XCODE_CLANGXX})
MAC32_DKSET(DKCMAKE_CXX_FLAGS             "-DMAC -DMAC32 -std=c++17 -x objective-c++")
MAC32_DKSET(DKCMAKE_CXX_FLAGS_DEBUG       "-DDEBUG -D_DEBUG -g")
MAC32_DKSET(DKCMAKE_CXX_FLAGS_RELEASE     "-DNDEBUG -DRELEASE -O3")
MAC32_DKSET(DKCONFIGURE_FLAGS             --disable-shared --enable-static)
#MAC32_DKSET(DKCONFIGURE_CC                ${XCODE_CLANG})
MAC32_DKSET(DKCONFIGURE_CFLAGS            "-arch i686 -DMAC -DMAC32 -std=c17") #-x objective-c") # https://stackoverflow.com/questions/28756343/clang-link-failure-error-source-file-is-not-valid-utf-8
MAC32_DKSET(DKCONFIGURE_CFLAGS_DEBUG      "-DDEBUG -D_DEBUG -g")
MAC32_DKSET(DKCONFIGURE_CFLAGS_RELEASE    "-DNDEBUG -DRELEASE -O3")
#MAC32_DKSET(DKCONFIGURE_CXX               ${XCODE_CLANGXX})
MAC32_DKSET(DKCONFIGURE_CXXFLAGS          "-arch i686 -DMAC -DMAC32 -std=c++17 -x objective-c++") #-x objective-c++") # https://stackoverflow.com/questions/28756343/clang-link-failure-error-source-file-is-not-valid-utf-8
MAC32_DKSET(DKCONFIGURE_CXXFLAGS_DEBUG    "-DDEBUG -D_DEBUG -g")
MAC32_DKSET(DKCONFIGURE_CXXFLAGS_RELEASE  "-DNDEBUG -DRELEASE -O3")

# Moc x86_64
MAC64_DKSET(DKCMAKE_FLAGS                 -DCMAKE_OSX_ARCHITECTURES=x86_64 -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON)
MAC64_DKSET(DKCMAKE_C_COMPILER            ${XCODE_CLANG})
MAC64_DKSET(DKCMAKE_C_FLAGS               "-DMAC -DMAC64 -std=c17 -x objective-c")
MAC64_DKSET(DKCMAKE_C_FLAGS_DEBUG         "-DDEBUG -D_DEBUG -g")
MAC64_DKSET(DKCMAKE_C_FLAGS_RELEASE       "-DNDEBUG -DRELEASE -O3")
MAC64_DKSET(DKCMAKE_CXX_COMPILER          ${XCODE_CLANGXX})
MAC64_DKSET(DKCMAKE_CXX_FLAGS             "-DMAC -DMAC64 -std=c++17 -x objective-c++")
MAC64_DKSET(DKCMAKE_CXX_FLAGS_DEBUG       "-DDEBUG -D_DEBUG -g")
MAC64_DKSET(DKCMAKE_CXX_FLAGS_RELEASE     "-DNDEBUG -DRELEASE -O3")
MAC64_DKSET(DKCONFIGURE_FLAGS             --disable-shared --enable-static)
#MAC64_DKSET(DKCONFIGURE_CC                ${XCODE_CLANG})
MAC64_DKSET(DKCONFIGURE_CFLAGS            "-DMAC -DMAC64 -std=c17") #-x objective-c") # https://stackoverflow.com/questions/28756343/clang-link-failure-error-source-file-is-not-valid-utf-8
MAC64_DKSET(DKCONFIGURE_CFLAGS_DEBUG      "-DDEBUG -D_DEBUG -g")
MAC64_DKSET(DKCONFIGURE_CFLAGS_RELEASE    "-DNDEBUG -DRELEASE -O3")
#MAC64_DKSET(DKCONFIGURE_CXX               ${XCODE_CLANGXX})
MAC64_DKSET(DKCONFIGURE_CXXFLAGS          "-DMAC -DMAC64 -std=c++17") #-x objective-c++") #https://stackoverflow.com/questions/28756343/clang-link-failure-error-source-file-is-not-valid-utf-8
MAC64_DKSET(DKCONFIGURE_CXXFLAGS_DEBUG    "-DDEBUG -D_DEBUG -g")
MAC64_DKSET(DKCONFIGURE_CXXFLAGS_RELEASE  "-DNDEBUG -DRELEASE -O3")

# iOS i686
IOS32_DKSET(DKCMAKE_FLAGS                 -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/ios.toolchain.cmake -DPLATFORM=OS -DSDK_VERSION=15.0 -DDEPLOYMENT_TARGET=${IOS_MIN_SDK} -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON)
#IOS32_DKSET(DKCMAKE_C_COMPILER            ${XCODE_CLANG})
IOS32_DKSET(DKCMAKE_C_FLAGS               "-DIOS -DIOS32 -std=c17 -x objective-c")
IOS32_DKSET(DKCMAKE_C_FLAGS_DEBUG         "-DDEBUG -D_DEBUG -g")
IOS32_DKSET(DKCMAKE_C_FLAGS_RELEASE       "-DNDEBUG -DRELEASE -O3")
#IOS32_DKSET(DKCMAKE_CXX_COMPILER          ${XCODE_CLANGXX})
IOS32_DKSET(DKCMAKE_CXX_FLAGS             "-DIOS -DIOS32 -std=c++17 -x objective-c++")
IOS32_DKSET(DKCMAKE_CXX_FLAGS_DEBUG       "-DDEBUG -D_DEBUG -g")
IOS32_DKSET(DKCMAKE_CXX_FLAGS_RELEASE     "-DNDEBUG -DRELEASE -O3")
IOS32_DKSET(DKCONFIGURE_FLAGS             --disable-shared --enable-static --host i686-apple-${IOS_DARWIN})
IOS32_DKSET(DKCONFIGURE_CC                ${XCODE_CLANG})
IOS32_DKSET(DKCONFIGURE_CFLAGS            "-arch i686 -DIOS -DIOS32 -mios-version-min=${IOS_MIN_SDK} -isysroot ${IOS_SYSROOT}")
IOS32_DKSET(DKCONFIGURE_CFLAGS_DEBUG      "-DDEBUG -D_DEBUG -g")
IOS32_DKSET(DKCONFIGURE_CFLAGS_RELEASE    "-DNDEBUG -DRELEASE -O3")
IOS32_DKSET(DKCONFIGURE_CXX	              ${XCODE_CLANGXX})
IOS32_DKSET(DKCONFIGURE_CXXFLAGS          "-arch i686 -DIOS -DIOS32 -mios-version-min=${IOS_MIN_SDK} -isysroot ${IOS_SYSROOT}")
IOS32_DKSET(DKCONFIGURE_CXXFLAGS_DEBUG    "-DDEBUG -D_DEBUG -g")
IOS32_DKSET(DKCONFIGURE_CXXFLAGS_RELEASE  "-DNDEBUG -DRELEASE -O3")

# iOS x86_64
IOS64_DKSET(DKCMAKE_FLAGS                 -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/ios.toolchain.cmake -DPLATFORM=OS64 -DSDK_VERSION=15.0 -DDEPLOYMENT_TARGET=${IOS_MIN_SDK})
#IOS64_DKSET(DKCMAKE_C_COMPILER            ${XCODE_CLANG})
IOS64_DKSET(DKCMAKE_C_FLAGS               "-DIOS -DIOS64 -std=c17 -x objective-c")
IOS64_DKSET(DKCMAKE_C_FLAGS_DEBUG         "-DDEBUG -D_DEBUG -g")
IOS64_DKSET(DKCMAKE_C_FLAGS_RELEASE       "-DNDEBUG -DRELEASE -O3")
#IOS64_DKSET(DKCMAKE_CXX_COMPILER          ${XCODE_CLANGXX})
IOS64_DKSET(DKCMAKE_CXX_FLAGS             "-DIOS -DIOS64 -std=c++17 -x objective-c++")
IOS64_DKSET(DKCMAKE_CXX_FLAGS_DEBUG       "-DDEBUG -D_DEBUG -g")
IOS64_DKSET(DKCMAKE_CXX_FLAGS_RELEASE     "-DNDEBUG -DRELEASE -O3")
IOS64_DKSET(DKCONFIGURE_FLAGS             --disable-shared --enable-static --host x86_64-apple-${IOS_DARWIN})
IOS64_DKSET(DKCONFIGURE_CC                ${XCODE_CLANG})
IOS64_DKSET(DKCONFIGURE_CFLAGS            "-arch x86_64 -DIOS -DIOS64 -mios-version-min=${IOS_MIN_SDK} -isysroot ${IOS_SYSROOT}")
IOS64_DKSET(DKCONFIGURE_CFLAGS_DEBUG      "-DDEBUG -D_DEBUG -g")
IOS64_DKSET(DKCONFIGURE_CFLAGS_RELEASE    "-DNDEBUG -DRELEASE -O3")
IOS64_DKSET(DKCONFIGURE_CXX	              ${XCODE_CLANGXX})
IOS64_DKSET(DKCONFIGURE_CXXFLAGS          "-arch x86_64 -DIOS -DIOS64 -mios-version-min=${IOS_MIN_SDK} -isysroot ${IOS_SYSROOT}")
IOS64_DKSET(DKCONFIGURE_CXXFLAGS_DEBUG    "-DDEBUG -D_DEBUG -g")
IOS64_DKSET(DKCONFIGURE_CXXFLAGS_RELEASE  "-DNDEBUG -DRELEASE -O3")

# iOS Simulator i686
IOSSIM32_DKSET(DKCMAKE_FLAGS              -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/ios.toolchain.cmake -DPLATFORM=SIMULATOR -DSDK_VERSION=15.0 -DDEPLOYMENT_TARGET=13.0)
#IOSSIM32_DKSET(DKCMAKE_C_COMPILER         ${XCODE_CLANG})
IOSSIM32_DKSET(DKCMAKE_C_FLAGS            "-DIOS -DIOS32 -DIOSSIM -DIOSSIM32 -std=c17 -x objective-c")
IOSSIM32_DKSET(DKCMAKE_C_FLAGS_DEBUG      "-DDEBUG -D_DEBUG -g")
IOSSIM32_DKSET(DKCMAKE_C_FLAGS_RELEASE    "-DNDEBUG -DRELEASE -O3")
#IOSSIM32_DKSET(DKCMAKE_CXX_COMPILER       ${XCODE_CLANGXX})
IOSSIM32_DKSET(DKCMAKE_CXX_FLAGS          "-DIOS -DIOS32 -DIOSSIM -DIOSSIM32 -std=c++17 -x objective-c++")
IOSSIM32_DKSET(DKCMAKE_CXX_FLAGS_DEBUG    "-DDEBUG -D_DEBUG -g")
IOSSIM32_DKSET(DKCMAKE_CXX_FLAGS_RELEASE  "-DNDEBUG -DRELEASE -O3")
IOSSIM32_DKSET(DKCONFIGURE_FLAGS          --disable-shared --enable-static --host i686-apple-${IOS_DARWIN})
IOSSIM32_DKSET(DKCONFIGURE_CC             ${XCODE_CLANG})
IOSSIM32_DKSET(DKCONFIGURE_CFLAGS         "-arch i686 -DIOS -DIOS32 -DIOSSIM -DIOSSIM32 -mios-version-min=${IOS_MIN_SDK} -isysroot ${IOSSIM_SYSROOT}")
IOSSIM32_DKSET(DKCONFIGURE_CXX	          ${XCODE_CLANGXX})
IOSSIM32_DKSET(DKCONFIGURE_CXXFLAGS       "-arch i686 -DIOS -DIOS32 -DIOSSIM -DIOSSIM32 -mios-version-min=${IOS_MIN_SDK} -isysroot ${IOSSIM_SYSROOT}")

# iOS Simulator x86_64
IOSSIM64_DKSET(DKCMAKE_FLAGS              -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON -DCMAKE_TOOLCHAIN_FILE=${DKCMAKE}/ios.toolchain.cmake -DPLATFORM=SIMULATOR64 -DSDK_VERSION=15.0 -DDEPLOYMENT_TARGET=13.0)
#IOSSIM64_DKSET(DKCMAKE_C_COMPILER         "")
IOSSIM64_DKSET(DKCMAKE_C_FLAGS            "-DIOS -DIOS64 -DIOSSIM -DIOSSIM64 -std=c17 -x objective-c")
IOSSIM64_DKSET(DKCMAKE_C_FLAGS_DEBUG      "-DDEBUG -D_DEBUG -g")
IOSSIM64_DKSET(DKCMAKE_C_FLAGS_RELEASE    "-DNDEBUG -DRELEASE -O3")
#IOSSIM64_DKSET(DKCMAKE_CXX_COMPILER      "")
IOSSIM64_DKSET(DKCMAKE_CXX_FLAGS          "-DIOS -DIOS64 -DIOSSIM -DIOSSIM64 -std=c++17 -x objective-c++")
IOSSIM64_DKSET(DKCMAKE_CXX_FLAGS_DEBUG    "-DDEBUG -D_DEBUG -g")
IOSSIM64_DKSET(DKCMAKE_CXX_FLAGS_RELEASE  "-DNDEBUG -DRELEASE -O3")
IOSSIM64_DKSET(DKCONFIGURE_FLAGS          --disable-shared --enable-static --host x86_64-apple-${IOS_DARWIN})
IOSSIM64_DKSET(DKCONFIGURE_CC             ${XCODE_CLANG})
IOSSIM64_DKSET(DKCONFIGURE_CFLAGS         "-arch x86_64 -DIOS -DIOS64 -DIOSSIM -DIOSSIM64 -mios-version-min=${IOS_MIN_SDK} -isysroot ${IOSSIM_SYSROOT}")
IOSSIM64_DKSET(DKCONFIGURE_CXX	          ${XCODE_CLANGXX})
IOSSIM64_DKSET(DKCONFIGURE_CXXFLAGS       "-arch x86_64 -DIOS -DIOS64 -DIOSSIM -DIOSSIM64 -mios-version-min=${IOS_MIN_SDK} -isysroot ${IOSSIM_SYSROOT}")

# Linux i686
LINUX32_DKSET(DKCMAKE_FLAGS                 -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON)
LINUX32_DKSET(DKCMAKE_C_COMPILER            ${LINUX_GCC})
LINUX32_DKSET(DKCMAKE_C_FLAGS               "-march=i686 -DLINUX -DLINUX32 -std=gnu11 -no-pie -fPIC")
LINUX32_DKSET(DKCMAKE_C_FLAGS_DEBUG         "-DDEBUG -D_DEBUG -g")
LINUX32_DKSET(DKCMAKE_C_FLAGS_RELEASE       "-DNDEBUG -DRELEASE -O3")
LINUX32_DKSET(DKCMAKE_CXX_COMPILER          ${LINUX_GXX})
LINUX32_DKSET(DKCMAKE_CXX_FLAGS             "-march=i686 -DLINUX -DLINUX32 -std=gnu++17 -lstdc++fs -no-pie -fPIC")
LINUX32_DKSET(DKCMAKE_CXX_FLAGS_DEBUG       "-DDEBUG -D_DEBUG -g")
LINUX32_DKSET(DKCMAKE_CXX_FLAGS_RELEASE     "-DNDEBUG -DRELEASE -O3")
LINUX32_DKSET(DKCONFIGURE_FLAGS             --disable-shared --enable-static)
LINUX32_DKSET(DKCONFIGURE_CC                ${LINUX_GCC})
LINUX32_DKSET(DKCONFIGURE_CFLAGS            "-march=i686 -DLINUX -DLINUX32 -std=gnu11 -no-pie -fPIC")
LINUX32_DKSET(DKCONFIGURE_CFLAGS_DEBUG      "-DDEBUG -D_DEBUG -g")
LINUX32_DKSET(DKCONFIGURE_CFLAGS_RELEASE    "-DNDEBUG -DRELEASE -O3")
LINUX32_DKSET(DKCONFIGURE_CXX               ${LINUX_GXX})
LINUX32_DKSET(DKCONFIGURE_CXXFLAGS          "-march=i686 -DLINUX -DLINUX32 -std=gnu++17 -lstdc++fs -no-pie -fPIC")
LINUX32_DKSET(DKCONFIGURE_CXXFLAGS_DEBUG    "-DDEBUG -D_DEBUG -g")
LINUX32_DKSET(DKCONFIGURE_CXXFLAGS_RELEASE  "-DNDEBUG -DRELEASE -O3")

# Linux x86_64
LINUX64_DKSET(DKCMAKE_FLAGS                 -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON)
LINUX64_DKSET(DKCMAKE_C_COMPILER            ${LINUX_GCC})
LINUX64_DKSET(DKCMAKE_C_FLAGS               "-march=x86-64 -DLINUX -DLINUX64 -std=gnu11 -no-pie -fPIC")
LINUX64_DKSET(DKCMAKE_C_FLAGS_DEBUG         "-DDEBUG -D_DEBUG -g")
LINUX64_DKSET(DKCMAKE_C_FLAGS_RELEASE       "-DNDEBUG -DRELEASE -O3")
LINUX64_DKSET(DKCMAKE_CXX_COMPILER          ${LINUX_GXX})
LINUX64_DKSET(DKCMAKE_CXX_FLAGS             "-march=x86-64 -DLINUX -DLINUX64 -std=gnu++17 -lstdc++fs -no-pie -fPIC")
LINUX64_DKSET(DKCMAKE_CXX_FLAGS_DEBUG       "-DDEBUG -D_DEBUG -g")
LINUX64_DKSET(DKCMAKE_CXX_FLAGS_RELEASE     "-DNDEBUG -DRELEASE -O3")
LINUX64_DKSET(DKCONFIGURE_FLAGS             --disable-shared --enable-static)
LINUX64_DKSET(DKCONFIGURE_CC                ${LINUX_GCC})
LINUX64_DKSET(DKCONFIGURE_CFLAGS            "-march=x86-64 -DLINUX -DLINUX64 -std=gnu11 -no-pie -fPIC")
LINUX64_DKSET(DKCONFIGURE_CFLAGS_DEBUG      "-DDEBUG -D_DEBUG -g")
LINUX64_DKSET(DKCONFIGURE_CFLAGS_RELEASE    "-DNDEBUG -DRELEASE -O3")
LINUX64_DKSET(DKCONFIGURE_CXX               ${LINUX_GXX})
LINUX64_DKSET(DKCONFIGURE_CXXFLAGS          "-march=x86-64 -DLINUX -DLINUX64 -std=gnu++17 -lstdc++fs -no-pie -fPIC")
LINUX64_DKSET(DKCONFIGURE_CXXFLAGS_DEBUG    "-DDEBUG -D_DEBUG -g")
LINUX64_DKSET(DKCONFIGURE_CXXFLAGS_RELEASE  "-DNDEBUG -DRELEASE -O3")

# Raspbery arm
RASPBERRY32_DKSET(DKCMAKE_FLAGS                 -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON)
RASPBERRY32_DKSET(DKCMAKE_C_COMPILER            ${LINUX_GCC})
RASPBERRY32_DKSET(DKCMAKE_C_FLAGS               "-DLINUX -DLINUX32 -DRASPBERRY -DRASPBERRY32 -std=gnu11 -no-pie -fPIC") #-march=armv7l
RASPBERRY32_DKSET(DKCMAKE_C_FLAGS_DEBUG         "-DDEBUG -D_DEBUG -g")
RASPBERRY32_DKSET(DKCMAKE_C_FLAGS_RELEASE       "-DNDEBUG -DRELEASE -O3")
RASPBERRY32_DKSET(DKCMAKE_CXX_COMPILER          ${LINUX_GXX})
RASPBERRY32_DKSET(DKCMAKE_CXX_FLAGS             "-DLINUX -DLINUX32 -DRASPBERRY -DRASPBERRY32 -std=gnu++17 -lstdc++fs -no-pie -fPIC") #-march=armv7l 
RASPBERRY32_DKSET(DKCMAKE_CXX_FLAGS_DEBUG       "-DDEBUG -D_DEBUG -g")
RASPBERRY32_DKSET(DKCMAKE_CXX_FLAGS_RELEASE     "-DNDEBUG -DRELEASE -O3")
RASPBERRY32_DKSET(DKCONFIGURE_FLAGS             --disable-shared --enable-static)
RASPBERRY32_DKSET(DKCONFIGURE_CC                ${LINUX_GCC})
RASPBERRY32_DKSET(DKCONFIGURE_CFLAGS            "-DLINUX -DLINUX32 -DRASPBERRY -DRASPBERRY32 -std=gnu11 -no-pie -fPIC") #-march=armv7l 
RASPBERRY32_DKSET(DKCONFIGURE_CFLAGS_DEBUG      "-DDEBUG -D_DEBUG -g")
RASPBERRY32_DKSET(DKCONFIGURE_CFLAGS_RELEASE    "-DNDEBUG -DRELEASE -O3")
RASPBERRY32_DKSET(DKCONFIGURE_CXX               ${LINUX_GXX})
RASPBERRY32_DKSET(DKCONFIGURE_CXXFLAGS          "-DLINUX -DLINUX32 -DRASPBERRY -DRASPBERRY32 -std=gnu++17 -lstdc++fs -no-pie -fPIC") #-march=armv7l 
RASPBERRY32_DKSET(DKCONFIGURE_CXXFLAGS_DEBUG    "-DDEBUG -D_DEBUG -g")
RASPBERRY32_DKSET(DKCONFIGURE_CXXFLAGS_RELEASE  "-DNDEBUG -DRELEASE -O3")

# Raspbery arm64
RASPBERRY64_DKSET(DKCMAKE_FLAGS                 -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON)
RASPBERRY64_DKSET(DKCMAKE_C_COMPILER            ${LINUX_GCC})
RASPBERRY64_DKSET(DKCMAKE_C_FLAGS               "-march=armv7l -DLINUX -DLINUX64 -DRASPBERRY -DRASPBERRY64 -std=gnu11 -no-pie -fPIC")
RASPBERRY64_DKSET(DKCMAKE_C_FLAGS_DEBUG         "-DDEBUG -D_DEBUG -g")
RASPBERRY64_DKSET(DKCMAKE_C_FLAGS_RELEASE       "-DNDEBUG -DRELEASE -O3")
RASPBERRY64_DKSET(DKCMAKE_CXX_COMPILER          ${LINUX_GXX})
RASPBERRY64_DKSET(DKCMAKE_CXX_FLAGS             "-march=armv7l -DLINUX -DLINUX64 -DRASPBERRY -DRASPBERRY64 -std=gnu++17 -lstdc++fs -no-pie -fPIC")
RASPBERRY64_DKSET(DKCMAKE_CXX_FLAGS_DEBUG       "-DDEBUG -D_DEBUG -g")
RASPBERRY64_DKSET(DKCMAKE_CXX_FLAGS_RELEASE     "-DNDEBUG -DRELEASE -O3")
RASPBERRY64_DKSET(DKCONFIGURE_FLAGS             --disable-shared --enable-static)
RASPBERRY64_DKSET(DKCONFIGURE_CC                ${LINUX_GCC})
RASPBERRY64_DKSET(DKCONFIGURE_CFLAGS            "-march=armv7l -DLINUX -DLINUX64 -DRASPBERRY -DRASPBERRY64 -std=gnu11 -no-pie -fPIC")
RASPBERRY64_DKSET(DKCONFIGURE_CFLAGS_DEBUG      "-DDEBUG -D_DEBUG -g")
RASPBERRY64_DKSET(DKCONFIGURE_CFLAGS_RELEASE    "-DNDEBUG -DRELEASE -O3")
RASPBERRY64_DKSET(DKCONFIGURE_CXX               ${LINUX_GXX})
RASPBERRY64_DKSET(DKCONFIGURE_CXXFLAGS          "-march=armv7l -DLINUX -DLINUX64 -DRASPBERRY -DRASPBERRY64 -std=gnu++17 -lstdc++fs -no-pie -fPIC")
RASPBERRY64_DKSET(DKCONFIGURE_CXXFLAGS_DEBUG    "-DDEBUG -D_DEBUG -g")
RASPBERRY64_DKSET(DKCONFIGURE_CXXFLAGS_RELEASE  "-DNDEBUG -DRELEASE -O3")

# Android armeabi-v7a
ANDROID32_DKSET(DKCMAKE_FLAGS
	-DBUILD_SHARED_LIBS=OFF 
	-DBUILD_STATIC_LIBS=ON
	-DANDROID_PLATFORM=26
	-DANDROID_NDK=${ANDROIDNDK}
	-DCMAKE_TOOLCHAIN_FILE=${ANDROIDNDK}/build/cmake/android.toolchain.cmake
	-DANDROID_TOOLCHAIN=clang
	-DANDROID_ABI=
	-DANDROID_STL=c++_static)
	#-DANDROID_CPP_FEATURES="rtti exceptions")
#ANDROID32_DKSET(DKCMAKE_C_COMPILER         "")
ANDROID32_DKSET(DKCMAKE_C_FLAGS            "-DANDROID -DANDROID32 -std=c17")
ANDROID32_DKSET(DKCMAKE_C_FLAGS_DEBUG      "-DDEBUG -D_DEBUG -g")
ANDROID32_DKSET(DKCMAKE_C_FLAGS_RELEASE    "-DNDEBUG -DRELEASE -O3")
#ANDROID32_DKSET(DKCMAKE_CXX_COMPILER      "")
ANDROID32_DKSET(DKCMAKE_CXX_FLAGS          "-DANDROID -DANDROID32 -std=c++17")
ANDROID32_DKSET(DKCMAKE_CXX_FLAGS_DEBUG    "-DDEBUG -D_DEBUG -g")
ANDROID32_DKSET(DKCMAKE_CXX_FLAGS_RELEASE  "-DNDEBUG -DRELEASE -O3")
ANDROID32_DKSET(DKCONFIGURE_FLAGS          --disable-shared --enable-static)
#ANDROID32_DKSET(DKCONFIGURE_CC             ${CLANG})
ANDROID32_DKSET(DKCONFIGURE_CFLAGS         "-DANDROID -DANDROID32 -std=c17")
#ANDROID32_DKSET(DKCONFIGURE_CXX            ${CLANGXX})
ANDROID32_DKSET(DKCONFIGURE_CXXFLAGS       "-DANDROID -DANDROID32 -std=c++17")

# Android arm64-v8a
ANDROID64_DKSET(DKCMAKE_FLAGS 
	-DBUILD_SHARED_LIBS=OFF 
	-DBUILD_STATIC_LIBS=ON
	-DANDROID_PLATFORM=26
	-DANDROID_NDK=${ANDROIDNDK}
	-DCMAKE_TOOLCHAIN_FILE=${ANDROIDNDK}/build/cmake/android.toolchain.cmake
	-DANDROID_TOOLCHAIN=clang
	-DANDROID_ABI=arm64-v8a
	-DANDROID_STL=c++_static)
	#-DANDROID_CPP_FEATURES="rtti exceptions")
#ANDROID64_DKSET(DKCMAKE_C_COMPILER         "")
ANDROID64_DKSET(DKCMAKE_C_FLAGS            "-DANDROID -DANDROID64 -std=c17")
ANDROID64_DKSET(DKCMAKE_C_FLAGS_DEBUG      "-DDEBUG -D_DEBUG -g")
ANDROID64_DKSET(DKCMAKE_C_FLAGS_RELEASE    "-DNDEBUG -DRELEASE -O3")
#ANDROID64_DKSET(DKCMAKE_CXX_COMPILER      "")
ANDROID64_DKSET(DKCMAKE_CXX_FLAGS          "-DANDROID -DANDROID64 -std=c++17")
ANDROID64_DKSET(DKCMAKE_CXX_FLAGS_DEBUG    "-DDEBUG -D_DEBUG -g")
ANDROID64_DKSET(DKCMAKE_CXX_FLAGS_RELEASE  "-DNDEBUG -DRELEASE -O3")
ANDROID64_DKSET(DKCONFIGURE_FLAGS          --disable-shared --enable-static)
#ANDROID64_DKSET(DKCONFIGURE_CC             ${CLANG})
ANDROID64_DKSET(DKCONFIGURE_CFLAGS         "-DANDROID -DANDROID64 -std=c17")
#ANDROID64_DKSET(DKCONFIGURE_CXX            ${CLANGXX})
ANDROID64_DKSET(DKCONFIGURE_CXXFLAGS       "-DANDROID -DANDROID64 -std=c++17")





######### Extra Flags and Settings #########
if(WARNINGS_AS_ERRORS)
	WIN_DKSET(DKCMAKE_C_FLAGS    "${DKCMAKE_C_FLAGS} /WX")
	WIN_DKSET(DKCMAKE_CXX_FLAGS  "${DKCMAKE_CXX_FLAGS} /WX")
	UNIX_DKSET(DCMAKE_C_FLAGS    "${DKCMAKE_C_FLAGS} -Werror")
	UNIX_DKSET(DCMAKE_CXX_FLAGS  "${DKCMAKE_CXX_FLAGS} -Werror")
endif()
if(WARNING_LEVEL)
	WIN_DKSET(DKCMAKE_C_FLAGS    "${DKCMAKE_C_FLAGS} /W${WARNING_LEVEL}")
	WIN_DKSET(DKCMAKE_CXX_FLAGS  "${DKCMAKE_CXX_FLAGS} /W${WARNING_LEVEL}")
endif()
if(WARNING_4244) # /wd4244 - Warning: possible loss of data 
	WIN_DKSET(DKCMAKE_C_FLAGS    "${DKCMAKE_C_FLAGS} /wd4244")
	WIN_DKSET(DKCMAKE_CXX_FLAGS  "${DKCMAKE_CXX_FLAGS} /wd4244")
endif()
if(WARNING_5105) # /wd5105 - macro producing defined is undefined behaviour
	WIN_DKSET(DKCMAKE_C_FLAGS    "${DKCMAKE_C_FLAGS} /wd5105")
	WIN_DKSET(DKCMAKE_CXX_FLAGS  "${DKCMAKE_CXX_FLAGS} /wd5105")
endif()




############## Setup continued by cmake from here ##############
DKSET(CMAKE_C_FLAGS                    "${CMAKE_C_FLAGS} ${DKCMAKE_C_FLAGS}")
DKSET(CMAKE_C_FLAGS_DEBUG              "${CMAKE_C_FLAGS_DEBUG} ${DKCMAKE_C_FLAGS_DEBUG}")
DKSET(CMAKE_C_FLAGS_RELEASE            "${CMAKE_C_FLAGS_RELEASE} ${DKCMAKE_C_FLAGS_RELEASE}")
DKSET(CMAKE_CXX_FLAGS                  "${CMAKE_CXX_FLAGS} ${DKCMAKE_CXX_FLAGS}")
DKSET(CMAKE_CXX_FLAGS_DEBUG            "${CMAKE_CXX_FLAGS_DEBUG} ${DKCMAKE_CXX_FLAGS_DEBUG}")
DKSET(CMAKE_CXX_FLAGS_RELEASE          "${CMAKE_CXX_FLAGS_RELEASE} ${DKCMAKE_CXX_FLAGS_RELEASE}")
LINUX_DEBUG_DKSET(CMAKE_C_FLAGS        "${CMAKE_C_FLAGS} ${DKCMAKE_C_FLAGS_DEBUG}")
LINUX_DEBUG_DKSET(CMAKE_CXX_FLAGS        "${CMAKE_CXX_FLAGS} ${DKCMAKE_CXX_FLAGS_DEBUG}")
LINUX_RELEASE_DKSET(CMAKE_C_FLAGS        "${CMAKE_C_FLAGS} ${DKCMAKE_C_FLAGS_RELEASE}")
LINUX_RELEASE_DKSET(CMAKE_CXX_FLAGS      "${CMAKE_CXX_FLAGS} ${DKCMAKE_CXX_FLAGS_RELEASE}")
RASPBERRY_DEBUG_DKSET(CMAKE_C_FLAGS      "${CMAKE_C_FLAGS} ${DKCMAKE_C_FLAGS_DEBUG}")
RASPBERRY_DEBUG_DKSET(CMAKE_CXX_FLAGS    "${CMAKE_CXX_FLAGS} ${DKCMAKE_CXX_FLAGS_DEBUG}")
RASPBERRY_RELEASE_DKSET(CMAKE_C_FLAGS    "${CMAKE_C_FLAGS} ${DKCMAKE_C_FLAGS_RELEASE}")
RASPBERRY_RELEASE_DKSET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} ${DKCMAKE_CXX_FLAGS_RELEASE}")



if(DKCMAKE_C_FLAGS)
	DKSET(DKCMAKE_FLAGS ${DKCMAKE_FLAGS} -DCMAKE_C_FLAGS=${DKCMAKE_C_FLAGS})
endif()
if(DKCMAKE_CXX_FLAGS)
	DKSET(DKCMAKE_FLAGS ${DKCMAKE_FLAGS} -DCMAKE_CXX_FLAGS=${DKCMAKE_CXX_FLAGS})
endif()
if(NOT LINUX AND NOT RASPBERRY)
	if(DKCMAKE_C_FLAGS_DEBUG)
		DKSET(DKCMAKE_FLAGS ${DKCMAKE_FLAGS} -DCMAKE_C_FLAGS_DEBUG=${DKCMAKE_C_FLAGS_DEBUG})
	endif()
	if(DKCMAKE_C_FLAGS_RELEASE)
		DKSET(DKCMAKE_FLAGS ${DKCMAKE_FLAGS} -DCMAKE_C_FLAGS_RELEASE=${DKCMAKE_C_FLAGS_RELEASE})
	endif()
	if(DKCMAKE_CXX_FLAGS_DEBUG)
		DKSET(DKCMAKE_FLAGS ${DKCMAKE_FLAGS} -DCMAKE_CXX_FLAGS_DEBUG=${DKCMAKE_CXX_FLAGS_DEBUG})
	endif()
	if(DKCMAKE_CXX_FLAGS_RELEASE)
		DKSET(DKCMAKE_FLAGS ${DKCMAKE_FLAGS} -DCMAKE_CXX_FLAGS_RELEASE=${DKCMAKE_CXX_FLAGS_RELEASE})
	endif()
endif()



if(DKCONFIGURE_CC)
	DKSET(DKCONFIGURE_FLAGS ${DKCONFIGURE_FLAGS} CC=${DKCONFIGURE_CC})
endif()
if(DKCONFIGURE_CXX)
	DKSET(DKCONFIGURE_FLAGS ${DKCONFIGURE_FLAGS} CXX=${DKCONFIGURE_CXX})
endif()
if(WIN)
	if(DKCONFIGURE_CFLAGS)
		WIN_DKSET(DKCONFIGURE_FLAGS ${DKCONFIGURE_FLAGS} CFLAGS="${DKCONFIGURE_CFLAGS}")
	endif()
	if(DKCONFIGURE_CXXFLAGS)
		WIN_DKSET(DKCONFIGURE_FLAGS ${DKCONFIGURE_FLAGS} CXXFLAGS="${DKCONFIGURE_CXXFLAGS}")
	endif()
else()
	if(DKCONFIGURE_CFLAGS)
		DKSET(DKCONFIGURE_FLAGS ${DKCONFIGURE_FLAGS} CFLAGS=${DKCONFIGURE_CFLAGS})
	endif()
	if(DKCONFIGURE_CXXFLAGS)
		DKSET(DKCONFIGURE_FLAGS ${DKCONFIGURE_FLAGS} CXXFLAGS=${DKCONFIGURE_CXXFLAGS})
	endif()
endif()




#this is incorrect. Build directory goes by IDE/compiler, not OS
# Here's the list

# COMPILER                 Build_root         Target configs
# ---------------------------------------------------
# VisualStudio_cl           ${OS}             /multiple      /win
# VisualStudio clang/++     ${OS}             /multi
# XCode_clang/++            ${OS}             /multi
# MinGW_gcc/++              ${OS}/${TYPE}     /single        /win   for example, win can be multiple or single 
# Linux_gcc/++              ${OS}/${TYPE}     /single
# RaspberryPi_gcc/++        ${OS}/${TYPE}     /single           
# ./configure               ${OS}/${TYPE}     /single

if(LINUX OR RASPBERRY)
	if(DEBUG)
		DKSET(CMAKE_BUILD_TYPE DEBUG)
		DKSET(BUILD_DIR ${OS}/${DEBUG_DIR})
	elseif(RELEASE)
		DKSET(CMAKE_BUILD_TYPE RELEASE)
		DKSET(BUILD_DIR ${OS}/${RELEASE_DIR})
	endif()
else()
	DKSET(CMAKE_BUILD_TYPE DEBUG RELEASE)
	DKSET(BUILD_DIR ${OS})
endif()


############ CORE DEPENDENCIES ############
DKDEPEND(git)
DKDEPEND(cmake)

### WINDOWS ###	
WIN_DKDEPEND(visualstudio)
WIN_DKDEPEND(imagemagick)
WIN32_DKSET(DKCMAKE_BUILD ${CMAKE_EXE} -G ${VS_GENERATOR} -A Win32 ${DKCMAKE_FLAGS})
WIN64_DKSET(DKCMAKE_BUILD ${CMAKE_EXE} -G ${VS_GENERATOR} -A x64 ${DKCMAKE_FLAGS})
WIN_DKSET(DKCONFIGURE_BUILD ../../configure ${DKCONFIGURE_FLAGS})


MAC_DKDEPEND(xcode)
MAC_DKSET(DKCMAKE_BUILD ${CMAKE_EXE} -G "Xcode" ${DKCMAKE_FLAGS})
MAC_DKSET(DKCONFIGURE_BUILD ../../configure ${DKCONFIGURE_FLAGS})


##LINUX_DKDEPEND(kdevelop)
LINUX_DKDEPEND(libx11-dev)
LINUX_LIB(pthread)
LINUX_LIB(dl)
LINUX_LIB(libstdc++fs.a)
LINUX_DEBUG_DKSET(DKCMAKE_BUILD ${CMAKE_EXE} -G "Unix Makefiles" ${DKCMAKE_FLAGS} -DCMAKE_BUILD_TYPE=Debug)
LINUX_RELEASE_DKSET(DKCMAKE_BUILD ${CMAKE_EXE} -G "Unix Makefiles" ${DKCMAKE_FLAGS} -DCMAKE_BUILD_TYPE=Release)
LINUX_DKSET(DKCONFIGURE_BUILD ../../configure ${DKCONFIGURE_FLAGS})  


RASPBERRY_DKDEPEND(libx11-dev)
RASPBERRY_LIB(pthread)
RASPBERRY_LIB(dl)
RASPBERRY_LIB(libstdc++fs.a)
RASPBERRY_DKLINKDIR(/opt/vc/lib)
RASPBERRY_LIB(bcm_host)
RASPBERRY_DEBUG_DKSET(DKCMAKE_BUILD ${CMAKE_EXE} -G "Unix Makefiles" ${DKCMAKE_FLAGS} -DCMAKE_BUILD_TYPE=Debug)
RASPBERRY_RELEASE_DKSET(DKCMAKE_BUILD ${CMAKE_EXE} -G "Unix Makefiles" ${DKCMAKE_FLAGS} -DCMAKE_BUILD_TYPE=Release)
RASPBERRY_DKSET(DKCONFIGURE_BUILD ../../configure ${DKCONFIGURE_FLAGS})  


ANDROID_LIB(dl)
ANDROID_LIB(log)
ANDROID_LIB(android)
ANDROID_LIB(m)
ANDROID_DKDEPEND(jdk)
ANDROID_DKDEPEND(apache-ant)
ANDROID_DKDEPEND(android-sdk)
#ANDROID_DKDEPEND(android-studio)
ANDROID_DKDEPEND(android-ndk) 
ANDROID_DKDEPEND(visualstudio)
ANDROID_DKDEPEND(mingw32)
ANDROID_DKDEPEND(msys)
ANDROID_DKDEPEND(openssl)
#ANDROID_DKINCLUDE(${ANDROIDNDK}/sources/android/cpufeatures)
if(WIN_HOST)
	ANDROID32_DKSET(DKCMAKE_BUILD ${CMAKE_EXE} -G ${VS_GENERATOR} -A ARM ${DKCMAKE_FLAGS})
	ANDROID64_DKSET(DKCMAKE_BUILD ${CMAKE_EXE} -G ${VS_GENERATOR} -A ARM64 ${DKCMAKE_FLAGS})
endif()
ANDROID_DKSET(DKCONFIGURE_BUILD ../../configure ${DKCONFIGURE_FLAGS})
