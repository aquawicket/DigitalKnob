#!/usr/bin/cmake -P
if(NOT DKCMAKE_FUNCTIONS_DIR_)
	set(DKCMAKE_FUNCTIONS_DIR_ ${CMAKE_SOURCE_DIR}/../../DKCMake/functions/)
endif()
include("$ENV{DKCMAKE_FUNCTIONS_DIR_}DK.cmake")


############ HellowWorld ############
set(APP_NAME "DKPreprocessor")
dk_load(dk_builder)


#dk_generateCmake(${APP_NAME})
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\### This file is generated by DKCMake. Any Changes here, will be overwritten. ### \n")
dk_fileWrite(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt   "cmake_minimum_required(VERSION 3.10) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "include(\${DKCMAKE_FUNCTIONS_DIR}/DK.cmake) \n\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "### ${APP_NAME} ### \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "project(${APP_NAME}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "include_directories(${CMAKE_CURRENT_LIST_DIR}) \n")
dk_validate(DKCPP_PLUGINS_DIR "dk_DKBRANCH_DIR()")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "include_directories(${DKCPP_PLUGINS_DIR}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "file(GLOB App_SRC \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	${CMAKE_CURRENT_LIST_DIR}/*.h \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	${CMAKE_CURRENT_LIST_DIR}/*.c \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	${CMAKE_CURRENT_LIST_DIR}/*.hpp \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	${CMAKE_CURRENT_LIST_DIR}/*.cpp) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "list(FILTER App_SRC EXCLUDE REGEX \"${CMAKE_CURRENT_LIST_DIR}/assets/*\") \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "list(FILTER App_SRC EXCLUDE REGEX \"${CMAKE_CURRENT_LIST_DIR}/${target_triple}/*\") \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "dk_validate(TARGET_TRIPLE \"dk_target_triple()\") \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "if(MSVC) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	add_executable(${APP_NAME} WIN32 \${App_SRC}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "else() \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "	add_executable(${APP_NAME} \${App_SRC}) \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "endif() \n")
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt  "\n")	
dk_fileAppend(${CMAKE_CURRENT_LIST_DIR}/CMakeLists.txt "target_link_libraries(${APP_NAME} dbghelp.lib version.lib winmm.lib ws2_32.lib psapi.lib) \n")

#dk_clearCmakeCache()

dk_set(ENV{CURRENT_PLUGIN} ${APP_NAME})
dk_set($ENV{CURRENT_PLUGIN} ${CMAKE_SOURCE_DIR})
dk_set($ENV{CURRENT_PLUGIN}_CONFIG_DIR ${CMAKE_SOURCE_DIR}/${CONFIG_PATH})
dk_printVar($ENV{CURRENT_PLUGIN}_CONFIG_DIR)
dk_configure(${CMAKE_CURRENT_LIST_DIR} -DDKCMAKE_FUNCTIONS_DIR=${DKCMAKE_FUNCTIONS_DIR} -DTRIPLE=${TRIPLE})
dk_build(${CMAKE_CURRENT_LIST_DIR})